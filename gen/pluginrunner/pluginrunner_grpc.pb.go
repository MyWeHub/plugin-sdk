// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pluginrunner/pluginrunner.proto

package pluginrunner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginRunnerService_RunTest_FullMethodName   = "/pluginrunner.PluginRunnerService/RunTest"
	PluginRunnerService_RunTestv2_FullMethodName = "/pluginrunner.PluginRunnerService/RunTestv2"
	PluginRunnerService_Run_FullMethodName       = "/pluginrunner.PluginRunnerService/Run"
	PluginRunnerService_RunV2_FullMethodName     = "/pluginrunner.PluginRunnerService/RunV2"
)

// PluginRunnerServiceClient is the client API for PluginRunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginRunnerServiceClient interface {
	RunTest(ctx context.Context, in *InputTestRequest, opts ...grpc.CallOption) (*InputTestResponse, error)
	RunTestv2(ctx context.Context, in *InputTestRequestV2, opts ...grpc.CallOption) (*InputTestResponseV2, error)
	Run(ctx context.Context, in *InputRequest, opts ...grpc.CallOption) (*InputTestResponse, error)
	RunV2(ctx context.Context, in *InputRequestV2, opts ...grpc.CallOption) (*InputTestResponseV2, error)
}

type pluginRunnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginRunnerServiceClient(cc grpc.ClientConnInterface) PluginRunnerServiceClient {
	return &pluginRunnerServiceClient{cc}
}

func (c *pluginRunnerServiceClient) RunTest(ctx context.Context, in *InputTestRequest, opts ...grpc.CallOption) (*InputTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InputTestResponse)
	err := c.cc.Invoke(ctx, PluginRunnerService_RunTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRunnerServiceClient) RunTestv2(ctx context.Context, in *InputTestRequestV2, opts ...grpc.CallOption) (*InputTestResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InputTestResponseV2)
	err := c.cc.Invoke(ctx, PluginRunnerService_RunTestv2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRunnerServiceClient) Run(ctx context.Context, in *InputRequest, opts ...grpc.CallOption) (*InputTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InputTestResponse)
	err := c.cc.Invoke(ctx, PluginRunnerService_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRunnerServiceClient) RunV2(ctx context.Context, in *InputRequestV2, opts ...grpc.CallOption) (*InputTestResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InputTestResponseV2)
	err := c.cc.Invoke(ctx, PluginRunnerService_RunV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginRunnerServiceServer is the server API for PluginRunnerService service.
// All implementations must embed UnimplementedPluginRunnerServiceServer
// for forward compatibility.
type PluginRunnerServiceServer interface {
	RunTest(context.Context, *InputTestRequest) (*InputTestResponse, error)
	RunTestv2(context.Context, *InputTestRequestV2) (*InputTestResponseV2, error)
	Run(context.Context, *InputRequest) (*InputTestResponse, error)
	RunV2(context.Context, *InputRequestV2) (*InputTestResponseV2, error)
	mustEmbedUnimplementedPluginRunnerServiceServer()
}

// UnimplementedPluginRunnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginRunnerServiceServer struct{}

func (UnimplementedPluginRunnerServiceServer) RunTest(context.Context, *InputTestRequest) (*InputTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTest not implemented")
}
func (UnimplementedPluginRunnerServiceServer) RunTestv2(context.Context, *InputTestRequestV2) (*InputTestResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTestv2 not implemented")
}
func (UnimplementedPluginRunnerServiceServer) Run(context.Context, *InputRequest) (*InputTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedPluginRunnerServiceServer) RunV2(context.Context, *InputRequestV2) (*InputTestResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunV2 not implemented")
}
func (UnimplementedPluginRunnerServiceServer) mustEmbedUnimplementedPluginRunnerServiceServer() {}
func (UnimplementedPluginRunnerServiceServer) testEmbeddedByValue()                             {}

// UnsafePluginRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginRunnerServiceServer will
// result in compilation errors.
type UnsafePluginRunnerServiceServer interface {
	mustEmbedUnimplementedPluginRunnerServiceServer()
}

func RegisterPluginRunnerServiceServer(s grpc.ServiceRegistrar, srv PluginRunnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPluginRunnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginRunnerService_ServiceDesc, srv)
}

func _PluginRunnerService_RunTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRunnerServiceServer).RunTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRunnerService_RunTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRunnerServiceServer).RunTest(ctx, req.(*InputTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRunnerService_RunTestv2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputTestRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRunnerServiceServer).RunTestv2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRunnerService_RunTestv2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRunnerServiceServer).RunTestv2(ctx, req.(*InputTestRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRunnerService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRunnerServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRunnerService_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRunnerServiceServer).Run(ctx, req.(*InputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRunnerService_RunV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRunnerServiceServer).RunV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRunnerService_RunV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRunnerServiceServer).RunV2(ctx, req.(*InputRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginRunnerService_ServiceDesc is the grpc.ServiceDesc for PluginRunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginRunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginrunner.PluginRunnerService",
	HandlerType: (*PluginRunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTest",
			Handler:    _PluginRunnerService_RunTest_Handler,
		},
		{
			MethodName: "RunTestv2",
			Handler:    _PluginRunnerService_RunTestv2_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _PluginRunnerService_Run_Handler,
		},
		{
			MethodName: "RunV2",
			Handler:    _PluginRunnerService_RunV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluginrunner/pluginrunner.proto",
}
