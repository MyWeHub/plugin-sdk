// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: workflow/folder.proto

package workflow

import (
	context "context"
	workflow "github.com/MyWeHub/plugin-sdk/gen/workflow"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FolderService_CreateFolder_FullMethodName = "/workflow.FolderService/CreateFolder"
	FolderService_SaveFolder_FullMethodName   = "/workflow.FolderService/SaveFolder"
	FolderService_FolderByID_FullMethodName   = "/workflow.FolderService/FolderByID"
	FolderService_RemoveFolder_FullMethodName = "/workflow.FolderService/RemoveFolder"
	FolderService_MoveFolder_FullMethodName   = "/workflow.FolderService/MoveFolder"
	FolderService_ListFolders_FullMethodName  = "/workflow.FolderService/ListFolders"
	FolderService_EditFolder_FullMethodName   = "/workflow.FolderService/EditFolder"
)

// FolderServiceClient is the client API for FolderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FolderServiceClient interface {
	CreateFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Folder, error)
	SaveFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Folder, error)
	FolderByID(ctx context.Context, in *workflow.IdRequest, opts ...grpc.CallOption) (*Folder, error)
	RemoveFolder(ctx context.Context, in *RemoveFolderRequest, opts ...grpc.CallOption) (*workflow.Empty, error)
	MoveFolder(ctx context.Context, in *MoveFolderRequest, opts ...grpc.CallOption) (*workflow.Empty, error)
	ListFolders(ctx context.Context, in *workflow.Empty, opts ...grpc.CallOption) (*ListFolderResponse, error)
	EditFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*workflow.Empty, error)
}

type folderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFolderServiceClient(cc grpc.ClientConnInterface) FolderServiceClient {
	return &folderServiceClient{cc}
}

func (c *folderServiceClient) CreateFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Folder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Folder)
	err := c.cc.Invoke(ctx, FolderService_CreateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) SaveFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Folder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Folder)
	err := c.cc.Invoke(ctx, FolderService_SaveFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) FolderByID(ctx context.Context, in *workflow.IdRequest, opts ...grpc.CallOption) (*Folder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Folder)
	err := c.cc.Invoke(ctx, FolderService_FolderByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) RemoveFolder(ctx context.Context, in *RemoveFolderRequest, opts ...grpc.CallOption) (*workflow.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(workflow.Empty)
	err := c.cc.Invoke(ctx, FolderService_RemoveFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) MoveFolder(ctx context.Context, in *MoveFolderRequest, opts ...grpc.CallOption) (*workflow.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(workflow.Empty)
	err := c.cc.Invoke(ctx, FolderService_MoveFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) ListFolders(ctx context.Context, in *workflow.Empty, opts ...grpc.CallOption) (*ListFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFolderResponse)
	err := c.cc.Invoke(ctx, FolderService_ListFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) EditFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*workflow.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(workflow.Empty)
	err := c.cc.Invoke(ctx, FolderService_EditFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FolderServiceServer is the server API for FolderService service.
// All implementations must embed UnimplementedFolderServiceServer
// for forward compatibility.
type FolderServiceServer interface {
	CreateFolder(context.Context, *Folder) (*Folder, error)
	SaveFolder(context.Context, *Folder) (*Folder, error)
	FolderByID(context.Context, *workflow.IdRequest) (*Folder, error)
	RemoveFolder(context.Context, *RemoveFolderRequest) (*workflow.Empty, error)
	MoveFolder(context.Context, *MoveFolderRequest) (*workflow.Empty, error)
	ListFolders(context.Context, *workflow.Empty) (*ListFolderResponse, error)
	EditFolder(context.Context, *Folder) (*workflow.Empty, error)
	mustEmbedUnimplementedFolderServiceServer()
}

// UnimplementedFolderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFolderServiceServer struct{}

func (UnimplementedFolderServiceServer) CreateFolder(context.Context, *Folder) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedFolderServiceServer) SaveFolder(context.Context, *Folder) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFolder not implemented")
}
func (UnimplementedFolderServiceServer) FolderByID(context.Context, *workflow.IdRequest) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FolderByID not implemented")
}
func (UnimplementedFolderServiceServer) RemoveFolder(context.Context, *RemoveFolderRequest) (*workflow.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFolder not implemented")
}
func (UnimplementedFolderServiceServer) MoveFolder(context.Context, *MoveFolderRequest) (*workflow.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFolder not implemented")
}
func (UnimplementedFolderServiceServer) ListFolders(context.Context, *workflow.Empty) (*ListFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFolders not implemented")
}
func (UnimplementedFolderServiceServer) EditFolder(context.Context, *Folder) (*workflow.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFolder not implemented")
}
func (UnimplementedFolderServiceServer) mustEmbedUnimplementedFolderServiceServer() {}
func (UnimplementedFolderServiceServer) testEmbeddedByValue()                       {}

// UnsafeFolderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FolderServiceServer will
// result in compilation errors.
type UnsafeFolderServiceServer interface {
	mustEmbedUnimplementedFolderServiceServer()
}

func RegisterFolderServiceServer(s grpc.ServiceRegistrar, srv FolderServiceServer) {
	// If the following call pancis, it indicates UnimplementedFolderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FolderService_ServiceDesc, srv)
}

func _FolderService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Folder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).CreateFolder(ctx, req.(*Folder))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_SaveFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Folder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).SaveFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_SaveFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).SaveFolder(ctx, req.(*Folder))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_FolderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).FolderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_FolderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).FolderByID(ctx, req.(*workflow.IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_RemoveFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).RemoveFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_RemoveFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).RemoveFolder(ctx, req.(*RemoveFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_MoveFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).MoveFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_MoveFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).MoveFolder(ctx, req.(*MoveFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_ListFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).ListFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_ListFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).ListFolders(ctx, req.(*workflow.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_EditFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Folder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).EditFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_EditFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).EditFolder(ctx, req.(*Folder))
	}
	return interceptor(ctx, in, info, handler)
}

// FolderService_ServiceDesc is the grpc.ServiceDesc for FolderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FolderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.FolderService",
	HandlerType: (*FolderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFolder",
			Handler:    _FolderService_CreateFolder_Handler,
		},
		{
			MethodName: "SaveFolder",
			Handler:    _FolderService_SaveFolder_Handler,
		},
		{
			MethodName: "FolderByID",
			Handler:    _FolderService_FolderByID_Handler,
		},
		{
			MethodName: "RemoveFolder",
			Handler:    _FolderService_RemoveFolder_Handler,
		},
		{
			MethodName: "MoveFolder",
			Handler:    _FolderService_MoveFolder_Handler,
		},
		{
			MethodName: "ListFolders",
			Handler:    _FolderService_ListFolders_Handler,
		},
		{
			MethodName: "EditFolder",
			Handler:    _FolderService_EditFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow/folder.proto",
}
