// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: workflow/workflow.proto

package workflow

import (
	entrypointService "github.com/MyWeHub/plugin-sdk/gen/entrypointService"
	graph "github.com/MyWeHub/plugin-sdk/gen/graph"
	pluginrunner "github.com/MyWeHub/plugin-sdk/gen/pluginrunner"
	schema "github.com/MyWeHub/plugin-sdk/gen/schema"
	_ "github.com/amsokol/mongo-go-driver-protobuf/pmongo"
	_ "github.com/amsokol/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceEngagementType int32

const (
	ResourceEngagementType_NONE           ResourceEngagementType = 0
	ResourceEngagementType_SCHEMA         ResourceEngagementType = 1
	ResourceEngagementType_SCHEMA_VERSION ResourceEngagementType = 2
	ResourceEngagementType_CONNECTION     ResourceEngagementType = 3
)

// Enum value maps for ResourceEngagementType.
var (
	ResourceEngagementType_name = map[int32]string{
		0: "NONE",
		1: "SCHEMA",
		2: "SCHEMA_VERSION",
		3: "CONNECTION",
	}
	ResourceEngagementType_value = map[string]int32{
		"NONE":           0,
		"SCHEMA":         1,
		"SCHEMA_VERSION": 2,
		"CONNECTION":     3,
	}
)

func (x ResourceEngagementType) Enum() *ResourceEngagementType {
	p := new(ResourceEngagementType)
	*p = x
	return p
}

func (x ResourceEngagementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceEngagementType) Descriptor() protoreflect.EnumDescriptor {
	return file_workflow_workflow_proto_enumTypes[0].Descriptor()
}

func (ResourceEngagementType) Type() protoreflect.EnumType {
	return &file_workflow_workflow_proto_enumTypes[0]
}

func (x ResourceEngagementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceEngagementType.Descriptor instead.
func (ResourceEngagementType) EnumDescriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{0}
}

type WorkflowStatus int32

const (
	WorkflowStatus_DRAFT     WorkflowStatus = 0
	WorkflowStatus_PUBLISHED WorkflowStatus = 1
	WorkflowStatus_INACTIVE  WorkflowStatus = 2
)

// Enum value maps for WorkflowStatus.
var (
	WorkflowStatus_name = map[int32]string{
		0: "DRAFT",
		1: "PUBLISHED",
		2: "INACTIVE",
	}
	WorkflowStatus_value = map[string]int32{
		"DRAFT":     0,
		"PUBLISHED": 1,
		"INACTIVE":  2,
	}
)

func (x WorkflowStatus) Enum() *WorkflowStatus {
	p := new(WorkflowStatus)
	*p = x
	return p
}

func (x WorkflowStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_workflow_workflow_proto_enumTypes[1].Descriptor()
}

func (WorkflowStatus) Type() protoreflect.EnumType {
	return &file_workflow_workflow_proto_enumTypes[1]
}

func (x WorkflowStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowStatus.Descriptor instead.
func (WorkflowStatus) EnumDescriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{1}
}

type ResourceType int32

const (
	ResourceType_None        ResourceType = 0
	ResourceType_workflowApp ResourceType = 1
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "None",
		1: "workflowApp",
	}
	ResourceType_value = map[string]int32{
		"None":        0,
		"workflowApp": 1,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_workflow_workflow_proto_enumTypes[2].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_workflow_workflow_proto_enumTypes[2]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{2}
}

type ResourceEngagementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceID string                 `protobuf:"bytes,1,opt,name=resourceID,proto3" json:"resourceID,omitempty"`
	Type       ResourceEngagementType `protobuf:"varint,2,opt,name=type,proto3,enum=workflow.ResourceEngagementType" json:"type,omitempty"`
}

func (x *ResourceEngagementReq) Reset() {
	*x = ResourceEngagementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceEngagementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceEngagementReq) ProtoMessage() {}

func (x *ResourceEngagementReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceEngagementReq.ProtoReflect.Descriptor instead.
func (*ResourceEngagementReq) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceEngagementReq) GetResourceID() string {
	if x != nil {
		return x.ResourceID
	}
	return ""
}

func (x *ResourceEngagementReq) GetType() ResourceEngagementType {
	if x != nil {
		return x.Type
	}
	return ResourceEngagementType_NONE
}

type ResourceEngagementRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEngaged bool        `protobuf:"varint,1,opt,name=isEngaged,proto3" json:"isEngaged,omitempty"`
	Resources []*Resource `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *ResourceEngagementRes) Reset() {
	*x = ResourceEngagementRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceEngagementRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceEngagementRes) ProtoMessage() {}

func (x *ResourceEngagementRes) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceEngagementRes.ProtoReflect.Descriptor instead.
func (*ResourceEngagementRes) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceEngagementRes) GetIsEngaged() bool {
	if x != nil {
		return x.IsEngaged
	}
	return false
}

func (x *ResourceEngagementRes) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowID       string           `protobuf:"bytes,1,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	WorkflowName     string           `protobuf:"bytes,2,opt,name=workflowName,proto3" json:"workflowName,omitempty"`
	WorkflowFolderID string           `protobuf:"bytes,3,opt,name=workflowFolderID,proto3" json:"workflowFolderID,omitempty"`
	Children         []*ResourceChild `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{2}
}

func (x *Resource) GetWorkflowID() string {
	if x != nil {
		return x.WorkflowID
	}
	return ""
}

func (x *Resource) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *Resource) GetWorkflowFolderID() string {
	if x != nil {
		return x.WorkflowFolderID
	}
	return ""
}

func (x *Resource) GetChildren() []*ResourceChild {
	if x != nil {
		return x.Children
	}
	return nil
}

type ResourceChild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowVersionID     string `protobuf:"bytes,1,opt,name=workflowVersionID,proto3" json:"workflowVersionID,omitempty"`
	WorkflowVersionName   string `protobuf:"bytes,2,opt,name=workflowVersionName,proto3" json:"workflowVersionName,omitempty"`
	WorkflowVersionStatus string `protobuf:"bytes,3,opt,name=workflowVersionStatus,proto3" json:"workflowVersionStatus,omitempty"`
	ParentID              string `protobuf:"bytes,4,opt,name=parentID,proto3" json:"parentID,omitempty"`
}

func (x *ResourceChild) Reset() {
	*x = ResourceChild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceChild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceChild) ProtoMessage() {}

func (x *ResourceChild) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceChild.ProtoReflect.Descriptor instead.
func (*ResourceChild) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceChild) GetWorkflowVersionID() string {
	if x != nil {
		return x.WorkflowVersionID
	}
	return ""
}

func (x *ResourceChild) GetWorkflowVersionName() string {
	if x != nil {
		return x.WorkflowVersionName
	}
	return ""
}

func (x *ResourceChild) GetWorkflowVersionStatus() string {
	if x != nil {
		return x.WorkflowVersionStatus
	}
	return ""
}

func (x *ResourceChild) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

type IdAndWorkflowIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	WorkflowId string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
}

func (x *IdAndWorkflowIdReq) Reset() {
	*x = IdAndWorkflowIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdAndWorkflowIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdAndWorkflowIdReq) ProtoMessage() {}

func (x *IdAndWorkflowIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdAndWorkflowIdReq.ProtoReflect.Descriptor instead.
func (*IdAndWorkflowIdReq) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{4}
}

func (x *IdAndWorkflowIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdAndWorkflowIdReq) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type ListSubWorkflowsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubWorkflows []*ListSubWorkflow `protobuf:"bytes,1,rep,name=subWorkflows,proto3" json:"subWorkflows,omitempty"`
}

func (x *ListSubWorkflowsRes) Reset() {
	*x = ListSubWorkflowsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubWorkflowsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubWorkflowsRes) ProtoMessage() {}

func (x *ListSubWorkflowsRes) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubWorkflowsRes.ProtoReflect.Descriptor instead.
func (*ListSubWorkflowsRes) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{5}
}

func (x *ListSubWorkflowsRes) GetSubWorkflows() []*ListSubWorkflow {
	if x != nil {
		return x.SubWorkflows
	}
	return nil
}

type ListSubWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repeated WorkflowVersion versions = 1;
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	WorkflowId  string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Graph graphData = 6;
	WorkflowName string `protobuf:"bytes,5,opt,name=workflowName,proto3" json:"workflowName,omitempty"`
}

func (x *ListSubWorkflow) Reset() {
	*x = ListSubWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubWorkflow) ProtoMessage() {}

func (x *ListSubWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubWorkflow.ProtoReflect.Descriptor instead.
func (*ListSubWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{6}
}

func (x *ListSubWorkflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListSubWorkflow) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ListSubWorkflow) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListSubWorkflow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListSubWorkflow) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

type CloneWorkflowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ParentFolder string `protobuf:"bytes,4,opt,name=parentFolder,proto3" json:"parentFolder,omitempty"`
}

func (x *CloneWorkflowReq) Reset() {
	*x = CloneWorkflowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneWorkflowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneWorkflowReq) ProtoMessage() {}

func (x *CloneWorkflowReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneWorkflowReq.ProtoReflect.Descriptor instead.
func (*CloneWorkflowReq) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{7}
}

func (x *CloneWorkflowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloneWorkflowReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloneWorkflowReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CloneWorkflowReq) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

type ChartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	Data   []*Data  `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ChartResponse) Reset() {
	*x = ChartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartResponse) ProtoMessage() {}

func (x *ChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartResponse.ProtoReflect.Descriptor instead.
func (*ChartResponse) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{8}
}

func (x *ChartResponse) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ChartResponse) GetData() []*Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type MoveWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	ParentFolder string `protobuf:"bytes,2,opt,name=parentFolder,proto3" json:"parentFolder,omitempty"`
}

func (x *MoveWorkflow) Reset() {
	*x = MoveWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveWorkflow) ProtoMessage() {}

func (x *MoveWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveWorkflow.ProtoReflect.Descriptor instead.
func (*MoveWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{9}
}

func (x *MoveWorkflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MoveWorkflow) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int32 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{10}
}

func (x *Data) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListTriggersEntrypointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*TriggerEntrypoint `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListTriggersEntrypointResponse) Reset() {
	*x = ListTriggersEntrypointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTriggersEntrypointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTriggersEntrypointResponse) ProtoMessage() {}

func (x *ListTriggersEntrypointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTriggersEntrypointResponse.ProtoReflect.Descriptor instead.
func (*ListTriggersEntrypointResponse) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{11}
}

func (x *ListTriggersEntrypointResponse) GetResult() []*TriggerEntrypoint {
	if x != nil {
		return x.Result
	}
	return nil
}

type TriggerEntrypoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label      string                                        `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Entrypoint *entrypointService.GetVersionTriggersResponse `protobuf:"bytes,3,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
}

func (x *TriggerEntrypoint) Reset() {
	*x = TriggerEntrypoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerEntrypoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerEntrypoint) ProtoMessage() {}

func (x *TriggerEntrypoint) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerEntrypoint.ProtoReflect.Descriptor instead.
func (*TriggerEntrypoint) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{12}
}

func (x *TriggerEntrypoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerEntrypoint) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TriggerEntrypoint) GetEntrypoint() *entrypointService.GetVersionTriggersResponse {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

type MarkAsTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	MarkAs     bool   `protobuf:"varint,2,opt,name=markAs,proto3" json:"markAs,omitempty"`
}

func (x *MarkAsTemplateRequest) Reset() {
	*x = MarkAsTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAsTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsTemplateRequest) ProtoMessage() {}

func (x *MarkAsTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsTemplateRequest.ProtoReflect.Descriptor instead.
func (*MarkAsTemplateRequest) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{13}
}

func (x *MarkAsTemplateRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *MarkAsTemplateRequest) GetMarkAs() bool {
	if x != nil {
		return x.MarkAs
	}
	return false
}

type TransformComponentSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema  *schema.FieldSchema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	FieldId string              `protobuf:"bytes,2,opt,name=fieldId,proto3" json:"fieldId,omitempty"`
}

func (x *TransformComponentSchemaRequest) Reset() {
	*x = TransformComponentSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformComponentSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformComponentSchemaRequest) ProtoMessage() {}

func (x *TransformComponentSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformComponentSchemaRequest.ProtoReflect.Descriptor instead.
func (*TransformComponentSchemaRequest) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{14}
}

func (x *TransformComponentSchemaRequest) GetSchema() *schema.FieldSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *TransformComponentSchemaRequest) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

type TransformFromSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs []*pluginrunner.TransformationField `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"` //string name = 2;
}

func (x *TransformFromSchemaResponse) Reset() {
	*x = TransformFromSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformFromSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformFromSchemaResponse) ProtoMessage() {}

func (x *TransformFromSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformFromSchemaResponse.ProtoReflect.Descriptor instead.
func (*TransformFromSchemaResponse) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{15}
}

func (x *TransformFromSchemaResponse) GetOutputs() []*pluginrunner.TransformationField {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type CloneWorkflowVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	WorkflowId  string `protobuf:"bytes,4,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
}

func (x *CloneWorkflowVersionRequest) Reset() {
	*x = CloneWorkflowVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneWorkflowVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneWorkflowVersionRequest) ProtoMessage() {}

func (x *CloneWorkflowVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneWorkflowVersionRequest.ProtoReflect.Descriptor instead.
func (*CloneWorkflowVersionRequest) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{16}
}

func (x *CloneWorkflowVersionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloneWorkflowVersionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CloneWorkflowVersionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CloneWorkflowVersionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type TestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Inputs         []*TestDataInputNode `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	ExpectedOutput []byte               `protobuf:"bytes,3,opt,name=expectedOutput,proto3,oneof" json:"expectedOutput,omitempty"`
}

func (x *TestData) Reset() {
	*x = TestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestData) ProtoMessage() {}

func (x *TestData) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestData.ProtoReflect.Descriptor instead.
func (*TestData) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{17}
}

func (x *TestData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestData) GetInputs() []*TestDataInputNode {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TestData) GetExpectedOutput() []byte {
	if x != nil {
		return x.ExpectedOutput
	}
	return nil
}

type TestDataInputNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
	PluginType string `protobuf:"bytes,4,opt,name=pluginType,proto3" json:"pluginType,omitempty"`
}

func (x *TestDataInputNode) Reset() {
	*x = TestDataInputNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDataInputNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDataInputNode) ProtoMessage() {}

func (x *TestDataInputNode) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDataInputNode.ProtoReflect.Descriptor instead.
func (*TestDataInputNode) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{18}
}

func (x *TestDataInputNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestDataInputNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestDataInputNode) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TestDataInputNode) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

type IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdRequest) Reset() {
	*x = IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRequest) ProtoMessage() {}

func (x *IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRequest.ProtoReflect.Descriptor instead.
func (*IdRequest) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{19}
}

func (x *IdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MakeDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId       string `protobuf:"bytes,1,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	DefaultVersionId string `protobuf:"bytes,2,opt,name=defaultVersionId,proto3" json:"defaultVersionId,omitempty"`
}

func (x *MakeDefaultRequest) Reset() {
	*x = MakeDefaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeDefaultRequest) ProtoMessage() {}

func (x *MakeDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeDefaultRequest.ProtoReflect.Descriptor instead.
func (*MakeDefaultRequest) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{20}
}

func (x *MakeDefaultRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *MakeDefaultRequest) GetDefaultVersionId() string {
	if x != nil {
		return x.DefaultVersionId
	}
	return ""
}

type WorkflowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflows []*WorkflowListView `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
}

func (x *WorkflowsResponse) Reset() {
	*x = WorkflowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowsResponse) ProtoMessage() {}

func (x *WorkflowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowsResponse.ProtoReflect.Descriptor instead.
func (*WorkflowsResponse) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{21}
}

func (x *WorkflowsResponse) GetWorkflows() []*WorkflowListView {
	if x != nil {
		return x.Workflows
	}
	return nil
}

type WorkflowListView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Parentfolder   string                 `protobuf:"bytes,4,opt,name=parentfolder,proto3" json:"parentfolder,omitempty"`
	ClientId       string                 `protobuf:"bytes,5,opt,name=clientId,proto3" json:"clientId,omitempty" bson:"clientid"`
	Defaultversion string                 `protobuf:"bytes,6,opt,name=defaultversion,proto3" json:"defaultversion,omitempty"`
	Resourcetype   string                 `protobuf:"bytes,7,opt,name=resourcetype,proto3" json:"resourcetype,omitempty"`
	Versions       []*WorkflowVersionView `protobuf:"bytes,8,rep,name=versions,proto3" json:"versions,omitempty"`
	IsTemplate     bool                   `protobuf:"varint,9,opt,name=isTemplate,proto3" json:"isTemplate,omitempty"`
	IsFavorite     bool                   `protobuf:"varint,10,opt,name=isFavorite,proto3" json:"isFavorite,omitempty"`
}

func (x *WorkflowListView) Reset() {
	*x = WorkflowListView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowListView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowListView) ProtoMessage() {}

func (x *WorkflowListView) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowListView.ProtoReflect.Descriptor instead.
func (*WorkflowListView) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{22}
}

func (x *WorkflowListView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowListView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowListView) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkflowListView) GetParentfolder() string {
	if x != nil {
		return x.Parentfolder
	}
	return ""
}

func (x *WorkflowListView) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *WorkflowListView) GetDefaultversion() string {
	if x != nil {
		return x.Defaultversion
	}
	return ""
}

func (x *WorkflowListView) GetResourcetype() string {
	if x != nil {
		return x.Resourcetype
	}
	return ""
}

func (x *WorkflowListView) GetVersions() []*WorkflowVersionView {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *WorkflowListView) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

func (x *WorkflowListView) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type WorkflowVersionView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CreateDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createDate,proto3" json:"createDate,omitempty"`
	ModifyDate    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=modifyDate,proto3" json:"modifyDate,omitempty"`
	Status        WorkflowStatus         `protobuf:"varint,6,opt,name=status,proto3,enum=workflow.WorkflowStatus" json:"status,omitempty"`
	Resourcetype  string                 `protobuf:"bytes,7,opt,name=resourcetype,proto3" json:"resourcetype,omitempty"`
	IsSubworkflow *bool                  `protobuf:"varint,8,opt,name=isSubworkflow,proto3,oneof" json:"isSubworkflow,omitempty"`
	Stopped       bool                   `protobuf:"varint,9,opt,name=stopped,proto3" json:"stopped,omitempty"`
	StopMessage   *string                `protobuf:"bytes,10,opt,name=stopMessage,proto3,oneof" json:"stopMessage,omitempty"`
}

func (x *WorkflowVersionView) Reset() {
	*x = WorkflowVersionView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowVersionView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowVersionView) ProtoMessage() {}

func (x *WorkflowVersionView) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowVersionView.ProtoReflect.Descriptor instead.
func (*WorkflowVersionView) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{23}
}

func (x *WorkflowVersionView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowVersionView) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkflowVersionView) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkflowVersionView) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *WorkflowVersionView) GetModifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyDate
	}
	return nil
}

func (x *WorkflowVersionView) GetStatus() WorkflowStatus {
	if x != nil {
		return x.Status
	}
	return WorkflowStatus_DRAFT
}

func (x *WorkflowVersionView) GetResourcetype() string {
	if x != nil {
		return x.Resourcetype
	}
	return ""
}

func (x *WorkflowVersionView) GetIsSubworkflow() bool {
	if x != nil && x.IsSubworkflow != nil {
		return *x.IsSubworkflow
	}
	return false
}

func (x *WorkflowVersionView) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

func (x *WorkflowVersionView) GetStopMessage() string {
	if x != nil && x.StopMessage != nil {
		return *x.StopMessage
	}
	return ""
}

type InputPluginData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Url         string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *InputPluginData) Reset() {
	*x = InputPluginData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputPluginData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputPluginData) ProtoMessage() {}

func (x *InputPluginData) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputPluginData.ProtoReflect.Descriptor instead.
func (*InputPluginData) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{24}
}

func (x *InputPluginData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InputPluginData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InputPluginData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InputPluginData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type NewWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	VersionName          string  `protobuf:"bytes,3,opt,name=versionName,proto3" json:"versionName,omitempty"`
	VersionDescription   string  `protobuf:"bytes,4,opt,name=versionDescription,proto3" json:"versionDescription,omitempty"`
	TemplateId           *string `protobuf:"bytes,5,opt,name=templateId,proto3,oneof" json:"templateId,omitempty"`
	WorkflowIdOfTemplate *string `protobuf:"bytes,6,opt,name=workflowIdOfTemplate,proto3,oneof" json:"workflowIdOfTemplate,omitempty"`
	ParentFolder         string  `protobuf:"bytes,7,opt,name=parentFolder,proto3" json:"parentFolder,omitempty"`
	ClientId             string  `protobuf:"bytes,8,opt,name=clientId,proto3" json:"clientId,omitempty"`
}

func (x *NewWorkflowRequest) Reset() {
	*x = NewWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewWorkflowRequest) ProtoMessage() {}

func (x *NewWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewWorkflowRequest.ProtoReflect.Descriptor instead.
func (*NewWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{25}
}

func (x *NewWorkflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewWorkflowRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewWorkflowRequest) GetVersionName() string {
	if x != nil {
		return x.VersionName
	}
	return ""
}

func (x *NewWorkflowRequest) GetVersionDescription() string {
	if x != nil {
		return x.VersionDescription
	}
	return ""
}

func (x *NewWorkflowRequest) GetTemplateId() string {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return ""
}

func (x *NewWorkflowRequest) GetWorkflowIdOfTemplate() string {
	if x != nil && x.WorkflowIdOfTemplate != nil {
		return *x.WorkflowIdOfTemplate
	}
	return ""
}

func (x *NewWorkflowRequest) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

func (x *NewWorkflowRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type NewWorkflowVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId  string `protobuf:"bytes,1,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *NewWorkflowVersionRequest) Reset() {
	*x = NewWorkflowVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewWorkflowVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewWorkflowVersionRequest) ProtoMessage() {}

func (x *NewWorkflowVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewWorkflowVersionRequest.ProtoReflect.Descriptor instead.
func (*NewWorkflowVersionRequest) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{26}
}

func (x *NewWorkflowVersionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *NewWorkflowVersionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NewWorkflowVersionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// db model
type WorkflowVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	WorkflowId    string                 `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CreateDate    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createDate,proto3" json:"createDate,omitempty"`
	ModifyDate    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=modifyDate,proto3" json:"modifyDate,omitempty"`
	Status        WorkflowStatus         `protobuf:"varint,7,opt,name=status,proto3,enum=workflow.WorkflowStatus" json:"status,omitempty"`
	GraphData     *graph.Graph           `protobuf:"bytes,8,opt,name=graphData,proto3" json:"graphData,omitempty"`
	PartitionKey  string                 `protobuf:"bytes,9,opt,name=partitionKey,proto3" json:"partitionKey,omitempty"`
	ResourceType  string                 `protobuf:"bytes,10,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	IsSubworkflow *bool                  `protobuf:"varint,11,opt,name=isSubworkflow,proto3,oneof" json:"isSubworkflow,omitempty"`
	ClientId      string                 `protobuf:"bytes,12,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Stopped       bool                   `protobuf:"varint,13,opt,name=stopped,proto3" json:"stopped,omitempty"`
	StopMessage   *string                `protobuf:"bytes,14,opt,name=stopMessage,proto3,oneof" json:"stopMessage,omitempty"`
}

func (x *WorkflowVersion) Reset() {
	*x = WorkflowVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowVersion) ProtoMessage() {}

func (x *WorkflowVersion) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowVersion.ProtoReflect.Descriptor instead.
func (*WorkflowVersion) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{27}
}

func (x *WorkflowVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowVersion) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkflowVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkflowVersion) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *WorkflowVersion) GetModifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyDate
	}
	return nil
}

func (x *WorkflowVersion) GetStatus() WorkflowStatus {
	if x != nil {
		return x.Status
	}
	return WorkflowStatus_DRAFT
}

func (x *WorkflowVersion) GetGraphData() *graph.Graph {
	if x != nil {
		return x.GraphData
	}
	return nil
}

func (x *WorkflowVersion) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *WorkflowVersion) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *WorkflowVersion) GetIsSubworkflow() bool {
	if x != nil && x.IsSubworkflow != nil {
		return *x.IsSubworkflow
	}
	return false
}

func (x *WorkflowVersion) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *WorkflowVersion) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

func (x *WorkflowVersion) GetStopMessage() string {
	if x != nil && x.StopMessage != nil {
		return *x.StopMessage
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{28}
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ParentFolder   string `protobuf:"bytes,4,opt,name=parentFolder,proto3" json:"parentFolder,omitempty"`
	ClientId       string `protobuf:"bytes,5,opt,name=clientId,proto3" json:"clientId,omitempty"`
	PartitionKey   string `protobuf:"bytes,6,opt,name=partitionKey,proto3" json:"partitionKey,omitempty"`
	DefaultVersion string `protobuf:"bytes,7,opt,name=defaultVersion,proto3" json:"defaultVersion,omitempty"`
	ResourceType   string `protobuf:"bytes,8,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	IsTemplate     bool   `protobuf:"varint,9,opt,name=isTemplate,proto3" json:"isTemplate,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{29}
}

func (x *Workflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Workflow) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

func (x *Workflow) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Workflow) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *Workflow) GetDefaultVersion() string {
	if x != nil {
		return x.DefaultVersion
	}
	return ""
}

func (x *Workflow) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Workflow) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

type NewWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ParentFolder   string                 `protobuf:"bytes,4,opt,name=parentFolder,proto3" json:"parentFolder,omitempty"`
	ClientId       string                 `protobuf:"bytes,5,opt,name=clientId,proto3" json:"clientId,omitempty"`
	PartitionKey   string                 `protobuf:"bytes,6,opt,name=partitionKey,proto3" json:"partitionKey,omitempty"`
	DefaultVersion string                 `protobuf:"bytes,7,opt,name=defaultVersion,proto3" json:"defaultVersion,omitempty"`
	ResourceType   string                 `protobuf:"bytes,8,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	IsTemplate     bool                   `protobuf:"varint,9,opt,name=isTemplate,proto3" json:"isTemplate,omitempty"`
	Versions       []*WorkflowVersionView `protobuf:"bytes,10,rep,name=versions,proto3" json:"versions,omitempty"`
	IsFavorite     bool                   `protobuf:"varint,11,opt,name=isFavorite,proto3" json:"isFavorite,omitempty"`
}

func (x *NewWorkflow) Reset() {
	*x = NewWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewWorkflow) ProtoMessage() {}

func (x *NewWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewWorkflow.ProtoReflect.Descriptor instead.
func (*NewWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{30}
}

func (x *NewWorkflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewWorkflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewWorkflow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewWorkflow) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

func (x *NewWorkflow) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *NewWorkflow) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *NewWorkflow) GetDefaultVersion() string {
	if x != nil {
		return x.DefaultVersion
	}
	return ""
}

func (x *NewWorkflow) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *NewWorkflow) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

func (x *NewWorkflow) GetVersions() []*WorkflowVersionView {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *NewWorkflow) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type SaveWorkflowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ParentFolder   string `protobuf:"bytes,4,opt,name=parentFolder,proto3" json:"parentFolder,omitempty"`
	DefaultVersion string `protobuf:"bytes,5,opt,name=defaultVersion,proto3" json:"defaultVersion,omitempty"`
	ResourceType   string `protobuf:"bytes,6,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	IsTemplate     bool   `protobuf:"varint,7,opt,name=isTemplate,proto3" json:"isTemplate,omitempty"`
}

func (x *SaveWorkflowReq) Reset() {
	*x = SaveWorkflowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveWorkflowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveWorkflowReq) ProtoMessage() {}

func (x *SaveWorkflowReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveWorkflowReq.ProtoReflect.Descriptor instead.
func (*SaveWorkflowReq) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{31}
}

func (x *SaveWorkflowReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SaveWorkflowReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SaveWorkflowReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SaveWorkflowReq) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

func (x *SaveWorkflowReq) GetDefaultVersion() string {
	if x != nil {
		return x.DefaultVersion
	}
	return ""
}

func (x *SaveWorkflowReq) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SaveWorkflowReq) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

type CountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowsCount *WorkflowsCount `protobuf:"bytes,1,opt,name=workflowsCount,proto3" json:"workflowsCount,omitempty"`
	TemplatesCount *TemplatesCount `protobuf:"bytes,2,opt,name=templatesCount,proto3" json:"templatesCount,omitempty"`
}

func (x *CountResponse) Reset() {
	*x = CountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse) ProtoMessage() {}

func (x *CountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse.ProtoReflect.Descriptor instead.
func (*CountResponse) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{32}
}

func (x *CountResponse) GetWorkflowsCount() *WorkflowsCount {
	if x != nil {
		return x.WorkflowsCount
	}
	return nil
}

func (x *CountResponse) GetTemplatesCount() *TemplatesCount {
	if x != nil {
		return x.TemplatesCount
	}
	return nil
}

type WorkflowsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DRAFT     int32 `protobuf:"varint,1,opt,name=DRAFT,proto3" json:"DRAFT,omitempty"`
	PUBLISHED int32 `protobuf:"varint,2,opt,name=PUBLISHED,proto3" json:"PUBLISHED,omitempty"`
	INACTIVE  int32 `protobuf:"varint,3,opt,name=INACTIVE,proto3" json:"INACTIVE,omitempty"`
}

func (x *WorkflowsCount) Reset() {
	*x = WorkflowsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowsCount) ProtoMessage() {}

func (x *WorkflowsCount) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowsCount.ProtoReflect.Descriptor instead.
func (*WorkflowsCount) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{33}
}

func (x *WorkflowsCount) GetDRAFT() int32 {
	if x != nil {
		return x.DRAFT
	}
	return 0
}

func (x *WorkflowsCount) GetPUBLISHED() int32 {
	if x != nil {
		return x.PUBLISHED
	}
	return 0
}

func (x *WorkflowsCount) GetINACTIVE() int32 {
	if x != nil {
		return x.INACTIVE
	}
	return 0
}

type TemplatesCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DRAFT     int32 `protobuf:"varint,1,opt,name=DRAFT,proto3" json:"DRAFT,omitempty"`
	PUBLISHED int32 `protobuf:"varint,2,opt,name=PUBLISHED,proto3" json:"PUBLISHED,omitempty"`
	INACTIVE  int32 `protobuf:"varint,3,opt,name=INACTIVE,proto3" json:"INACTIVE,omitempty"`
}

func (x *TemplatesCount) Reset() {
	*x = TemplatesCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplatesCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplatesCount) ProtoMessage() {}

func (x *TemplatesCount) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplatesCount.ProtoReflect.Descriptor instead.
func (*TemplatesCount) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{34}
}

func (x *TemplatesCount) GetDRAFT() int32 {
	if x != nil {
		return x.DRAFT
	}
	return 0
}

func (x *TemplatesCount) GetPUBLISHED() int32 {
	if x != nil {
		return x.PUBLISHED
	}
	return 0
}

func (x *TemplatesCount) GetINACTIVE() int32 {
	if x != nil {
		return x.INACTIVE
	}
	return 0
}

type ListWorkflowsByFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId string `protobuf:"bytes,1,opt,name=folderId,proto3" json:"folderId,omitempty"`
}

func (x *ListWorkflowsByFolderRequest) Reset() {
	*x = ListWorkflowsByFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowsByFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsByFolderRequest) ProtoMessage() {}

func (x *ListWorkflowsByFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsByFolderRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowsByFolderRequest) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{35}
}

func (x *ListWorkflowsByFolderRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

type FilterWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       WorkflowStatus `protobuf:"varint,1,opt,name=status,proto3,enum=workflow.WorkflowStatus" json:"status,omitempty"`
	Parentfolder string         `protobuf:"bytes,2,opt,name=parentfolder,proto3" json:"parentfolder,omitempty"`
	LightMode    *bool          `protobuf:"varint,3,opt,name=lightMode,proto3,oneof" json:"lightMode,omitempty"`
}

func (x *FilterWorkflow) Reset() {
	*x = FilterWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterWorkflow) ProtoMessage() {}

func (x *FilterWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterWorkflow.ProtoReflect.Descriptor instead.
func (*FilterWorkflow) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{36}
}

func (x *FilterWorkflow) GetStatus() WorkflowStatus {
	if x != nil {
		return x.Status
	}
	return WorkflowStatus_DRAFT
}

func (x *FilterWorkflow) GetParentfolder() string {
	if x != nil {
		return x.Parentfolder
	}
	return ""
}

func (x *FilterWorkflow) GetLightMode() bool {
	if x != nil && x.LightMode != nil {
		return *x.LightMode
	}
	return false
}

type MarkFavoriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	IsFavorite bool   `protobuf:"varint,2,opt,name=isFavorite,proto3" json:"isFavorite,omitempty"`
}

func (x *MarkFavoriteRequest) Reset() {
	*x = MarkFavoriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkFavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkFavoriteRequest) ProtoMessage() {}

func (x *MarkFavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkFavoriteRequest.ProtoReflect.Descriptor instead.
func (*MarkFavoriteRequest) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{37}
}

func (x *MarkFavoriteRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *MarkFavoriteRequest) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type WorkflowApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Actions           []*ActionApp `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	ResourceType      ResourceType `protobuf:"varint,4,opt,name=resourceType,proto3,enum=workflow.ResourceType" json:"resourceType,omitempty"`
	WorkflowVersionId string       `protobuf:"bytes,5,opt,name=workflowVersionId,proto3" json:"workflowVersionId,omitempty"`
	WorkflowId        string       `protobuf:"bytes,6,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	ClientId          string       `protobuf:"bytes,7,opt,name=clientId,proto3" json:"clientId,omitempty"`
	PartitionKey      ResourceType `protobuf:"varint,8,opt,name=partitionKey,proto3,enum=workflow.ResourceType" json:"partitionKey,omitempty"`
}

func (x *WorkflowApp) Reset() {
	*x = WorkflowApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowApp) ProtoMessage() {}

func (x *WorkflowApp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowApp.ProtoReflect.Descriptor instead.
func (*WorkflowApp) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{38}
}

func (x *WorkflowApp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowApp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowApp) GetActions() []*ActionApp {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *WorkflowApp) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_None
}

func (x *WorkflowApp) GetWorkflowVersionId() string {
	if x != nil {
		return x.WorkflowVersionId
	}
	return ""
}

func (x *WorkflowApp) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowApp) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *WorkflowApp) GetPartitionKey() ResourceType {
	if x != nil {
		return x.PartitionKey
	}
	return ResourceType_None
}

type ActionApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerName   string   `protobuf:"bytes,1,opt,name=triggerName,proto3" json:"triggerName,omitempty"`
	Description   string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	InputNodeId   string   `protobuf:"bytes,3,opt,name=inputNodeId,proto3" json:"inputNodeId,omitempty"`
	OutputNodeIds []string `protobuf:"bytes,4,rep,name=outputNodeIds,proto3" json:"outputNodeIds,omitempty"`
}

func (x *ActionApp) Reset() {
	*x = ActionApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionApp) ProtoMessage() {}

func (x *ActionApp) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionApp.ProtoReflect.Descriptor instead.
func (*ActionApp) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{39}
}

func (x *ActionApp) GetTriggerName() string {
	if x != nil {
		return x.TriggerName
	}
	return ""
}

func (x *ActionApp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ActionApp) GetInputNodeId() string {
	if x != nil {
		return x.InputNodeId
	}
	return ""
}

func (x *ActionApp) GetOutputNodeIds() []string {
	if x != nil {
		return x.OutputNodeIds
	}
	return nil
}

type ListWorkflowAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*WorkflowAppListView `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *ListWorkflowAppResponse) Reset() {
	*x = ListWorkflowAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowAppResponse) ProtoMessage() {}

func (x *ListWorkflowAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowAppResponse.ProtoReflect.Descriptor instead.
func (*ListWorkflowAppResponse) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{40}
}

func (x *ListWorkflowAppResponse) GetApps() []*WorkflowAppListView {
	if x != nil {
		return x.Apps
	}
	return nil
}

type WorkflowAppListView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Actions           []*ActionApp `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	ResourceType      ResourceType `protobuf:"varint,4,opt,name=resourceType,proto3,enum=workflow.ResourceType" json:"resourceType,omitempty"`
	WorkflowVersionId string       `protobuf:"bytes,5,opt,name=workflowVersionId,proto3" json:"workflowVersionId,omitempty"`
	WorkflowId        string       `protobuf:"bytes,6,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	GraphData         *graph.Graph `protobuf:"bytes,7,opt,name=graphData,proto3" json:"graphData,omitempty"`
	ClientId          string       `protobuf:"bytes,8,opt,name=clientId,proto3" json:"clientId,omitempty"`
}

func (x *WorkflowAppListView) Reset() {
	*x = WorkflowAppListView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowAppListView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowAppListView) ProtoMessage() {}

func (x *WorkflowAppListView) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowAppListView.ProtoReflect.Descriptor instead.
func (*WorkflowAppListView) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{41}
}

func (x *WorkflowAppListView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowAppListView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowAppListView) GetActions() []*ActionApp {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *WorkflowAppListView) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_None
}

func (x *WorkflowAppListView) GetWorkflowVersionId() string {
	if x != nil {
		return x.WorkflowVersionId
	}
	return ""
}

func (x *WorkflowAppListView) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowAppListView) GetGraphData() *graph.Graph {
	if x != nil {
		return x.GraphData
	}
	return nil
}

func (x *WorkflowAppListView) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type StartWorkflowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowID string `protobuf:"bytes,1,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	VersionID  string `protobuf:"bytes,2,opt,name=versionID,proto3" json:"versionID,omitempty"`
}

func (x *StartWorkflowReq) Reset() {
	*x = StartWorkflowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkflowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowReq) ProtoMessage() {}

func (x *StartWorkflowReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowReq.ProtoReflect.Descriptor instead.
func (*StartWorkflowReq) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{42}
}

func (x *StartWorkflowReq) GetWorkflowID() string {
	if x != nil {
		return x.WorkflowID
	}
	return ""
}

func (x *StartWorkflowReq) GetVersionID() string {
	if x != nil {
		return x.VersionID
	}
	return ""
}

type StopWorkflowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowID string  `protobuf:"bytes,1,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	VersionID  string  `protobuf:"bytes,2,opt,name=versionID,proto3" json:"versionID,omitempty"`
	Message    *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *StopWorkflowReq) Reset() {
	*x = StopWorkflowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_workflow_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopWorkflowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopWorkflowReq) ProtoMessage() {}

func (x *StopWorkflowReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_workflow_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopWorkflowReq.ProtoReflect.Descriptor instead.
func (*StopWorkflowReq) Descriptor() ([]byte, []int) {
	return file_workflow_workflow_proto_rawDescGZIP(), []int{43}
}

func (x *StopWorkflowReq) GetWorkflowID() string {
	if x != nil {
		return x.WorkflowID
	}
	return ""
}

func (x *StopWorkflowReq) GetVersionID() string {
	if x != nil {
		return x.VersionID
	}
	return ""
}

func (x *StopWorkflowReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

var File_workflow_workflow_proto protoreflect.FileDescriptor

var file_workflow_workflow_proto_rawDesc = []byte{
	0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x67, 0x6f, 0x74, 0x61, 0x67, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d,
	0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x67, 0x0a,
	0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x67, 0x61,
	0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x67,
	0x61, 0x67, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x12,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x22, 0x54, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01,
	0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x4b, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x0c, 0x4d, 0x6f,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22,
	0x1a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x22, 0x4f, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x41, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x41, 0x73, 0x22, 0x68, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a,
	0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x79, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x1b, 0x0a, 0x09, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x60, 0x0a, 0x12, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x4d, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x22, 0x86, 0x03, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69,
	0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0xce, 0x03, 0x0a, 0x13, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a,
	0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0d,
	0x69, 0x73, 0x53, 0x75, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x75, 0x62, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x53,
	0x75, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a, 0x0f, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xe2, 0x02, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x4f, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x14, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x4f, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x4f, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x77, 0x0a, 0x19, 0x4e,
	0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x04, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2d, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x73, 0x53, 0x75, 0x62, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0d, 0x69, 0x73, 0x53, 0x75, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x73, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x53, 0x75, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb1, 0x02, 0x0a, 0x08, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f,
	0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x8f, 0x03,
	0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22,
	0xe7, 0x01, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x60, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x22, 0x60, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x22, 0x3a, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x42, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x97, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x55, 0x0a, 0x13, 0x4d, 0x61, 0x72,
	0x6b, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x22, 0xc2, 0x02, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x70, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x4c, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x61, 0x70,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22, 0xbd, 0x02,
	0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x50, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22,
	0x7a, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x52, 0x0a, 0x16, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a,
	0x38, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x29, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41,
	0x70, 0x70, 0x10, 0x01, 0x32, 0xbd, 0x11, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x57, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x42, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x26, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x42, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x1e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x4d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x41, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x13, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3d, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x65, 0x77,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x13, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5c, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x47,
	0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67,
	0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x4d, 0x61, 0x6b, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x14, 0x4d, 0x6f, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x11, 0x55, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a,
	0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x67,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1a, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0x9d, 0x02, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70,
	0x12, 0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x1a, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70,
	0x70, 0x12, 0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x1a, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70,
	0x73, 0x12, 0x0f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x21, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x12, 0x13, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x18, 0x5a, 0x16, 0x77, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_workflow_workflow_proto_rawDescOnce sync.Once
	file_workflow_workflow_proto_rawDescData = file_workflow_workflow_proto_rawDesc
)

func file_workflow_workflow_proto_rawDescGZIP() []byte {
	file_workflow_workflow_proto_rawDescOnce.Do(func() {
		file_workflow_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflow_workflow_proto_rawDescData)
	})
	return file_workflow_workflow_proto_rawDescData
}

var file_workflow_workflow_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_workflow_workflow_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_workflow_workflow_proto_goTypes = []any{
	(ResourceEngagementType)(0),                          // 0: workflow.ResourceEngagementType
	(WorkflowStatus)(0),                                  // 1: workflow.WorkflowStatus
	(ResourceType)(0),                                    // 2: workflow.ResourceType
	(*ResourceEngagementReq)(nil),                        // 3: workflow.ResourceEngagementReq
	(*ResourceEngagementRes)(nil),                        // 4: workflow.ResourceEngagementRes
	(*Resource)(nil),                                     // 5: workflow.Resource
	(*ResourceChild)(nil),                                // 6: workflow.ResourceChild
	(*IdAndWorkflowIdReq)(nil),                           // 7: workflow.IdAndWorkflowIdReq
	(*ListSubWorkflowsRes)(nil),                          // 8: workflow.ListSubWorkflowsRes
	(*ListSubWorkflow)(nil),                              // 9: workflow.ListSubWorkflow
	(*CloneWorkflowReq)(nil),                             // 10: workflow.CloneWorkflowReq
	(*ChartResponse)(nil),                                // 11: workflow.ChartResponse
	(*MoveWorkflow)(nil),                                 // 12: workflow.MoveWorkflow
	(*Data)(nil),                                         // 13: workflow.Data
	(*ListTriggersEntrypointResponse)(nil),               // 14: workflow.ListTriggersEntrypointResponse
	(*TriggerEntrypoint)(nil),                            // 15: workflow.TriggerEntrypoint
	(*MarkAsTemplateRequest)(nil),                        // 16: workflow.MarkAsTemplateRequest
	(*TransformComponentSchemaRequest)(nil),              // 17: workflow.TransformComponentSchemaRequest
	(*TransformFromSchemaResponse)(nil),                  // 18: workflow.TransformFromSchemaResponse
	(*CloneWorkflowVersionRequest)(nil),                  // 19: workflow.CloneWorkflowVersionRequest
	(*TestData)(nil),                                     // 20: workflow.TestData
	(*TestDataInputNode)(nil),                            // 21: workflow.TestDataInputNode
	(*IdRequest)(nil),                                    // 22: workflow.IdRequest
	(*MakeDefaultRequest)(nil),                           // 23: workflow.MakeDefaultRequest
	(*WorkflowsResponse)(nil),                            // 24: workflow.WorkflowsResponse
	(*WorkflowListView)(nil),                             // 25: workflow.WorkflowListView
	(*WorkflowVersionView)(nil),                          // 26: workflow.WorkflowVersionView
	(*InputPluginData)(nil),                              // 27: workflow.InputPluginData
	(*NewWorkflowRequest)(nil),                           // 28: workflow.NewWorkflowRequest
	(*NewWorkflowVersionRequest)(nil),                    // 29: workflow.NewWorkflowVersionRequest
	(*WorkflowVersion)(nil),                              // 30: workflow.WorkflowVersion
	(*Empty)(nil),                                        // 31: workflow.Empty
	(*Workflow)(nil),                                     // 32: workflow.Workflow
	(*NewWorkflow)(nil),                                  // 33: workflow.NewWorkflow
	(*SaveWorkflowReq)(nil),                              // 34: workflow.SaveWorkflowReq
	(*CountResponse)(nil),                                // 35: workflow.CountResponse
	(*WorkflowsCount)(nil),                               // 36: workflow.WorkflowsCount
	(*TemplatesCount)(nil),                               // 37: workflow.TemplatesCount
	(*ListWorkflowsByFolderRequest)(nil),                 // 38: workflow.ListWorkflowsByFolderRequest
	(*FilterWorkflow)(nil),                               // 39: workflow.FilterWorkflow
	(*MarkFavoriteRequest)(nil),                          // 40: workflow.MarkFavoriteRequest
	(*WorkflowApp)(nil),                                  // 41: workflow.WorkflowApp
	(*ActionApp)(nil),                                    // 42: workflow.ActionApp
	(*ListWorkflowAppResponse)(nil),                      // 43: workflow.ListWorkflowAppResponse
	(*WorkflowAppListView)(nil),                          // 44: workflow.WorkflowAppListView
	(*StartWorkflowReq)(nil),                             // 45: workflow.StartWorkflowReq
	(*StopWorkflowReq)(nil),                              // 46: workflow.StopWorkflowReq
	(*entrypointService.GetVersionTriggersResponse)(nil), // 47: entrypointService.GetVersionTriggersResponse
	(*schema.FieldSchema)(nil),                           // 48: schema.FieldSchema
	(*pluginrunner.TransformationField)(nil),             // 49: pluginrunner.TransformationField
	(*timestamppb.Timestamp)(nil),                        // 50: google.protobuf.Timestamp
	(*graph.Graph)(nil),                                  // 51: workflow.Graph
}
var file_workflow_workflow_proto_depIdxs = []int32{
	0,  // 0: workflow.ResourceEngagementReq.type:type_name -> workflow.ResourceEngagementType
	5,  // 1: workflow.ResourceEngagementRes.resources:type_name -> workflow.Resource
	6,  // 2: workflow.Resource.children:type_name -> workflow.ResourceChild
	9,  // 3: workflow.ListSubWorkflowsRes.subWorkflows:type_name -> workflow.ListSubWorkflow
	13, // 4: workflow.ChartResponse.data:type_name -> workflow.Data
	15, // 5: workflow.ListTriggersEntrypointResponse.result:type_name -> workflow.TriggerEntrypoint
	47, // 6: workflow.TriggerEntrypoint.entrypoint:type_name -> entrypointService.GetVersionTriggersResponse
	48, // 7: workflow.TransformComponentSchemaRequest.schema:type_name -> schema.FieldSchema
	49, // 8: workflow.TransformFromSchemaResponse.outputs:type_name -> pluginrunner.TransformationField
	21, // 9: workflow.TestData.inputs:type_name -> workflow.TestDataInputNode
	25, // 10: workflow.WorkflowsResponse.workflows:type_name -> workflow.WorkflowListView
	26, // 11: workflow.WorkflowListView.versions:type_name -> workflow.WorkflowVersionView
	50, // 12: workflow.WorkflowVersionView.createDate:type_name -> google.protobuf.Timestamp
	50, // 13: workflow.WorkflowVersionView.modifyDate:type_name -> google.protobuf.Timestamp
	1,  // 14: workflow.WorkflowVersionView.status:type_name -> workflow.WorkflowStatus
	50, // 15: workflow.WorkflowVersion.createDate:type_name -> google.protobuf.Timestamp
	50, // 16: workflow.WorkflowVersion.modifyDate:type_name -> google.protobuf.Timestamp
	1,  // 17: workflow.WorkflowVersion.status:type_name -> workflow.WorkflowStatus
	51, // 18: workflow.WorkflowVersion.graphData:type_name -> workflow.Graph
	26, // 19: workflow.NewWorkflow.versions:type_name -> workflow.WorkflowVersionView
	36, // 20: workflow.CountResponse.workflowsCount:type_name -> workflow.WorkflowsCount
	37, // 21: workflow.CountResponse.templatesCount:type_name -> workflow.TemplatesCount
	1,  // 22: workflow.FilterWorkflow.status:type_name -> workflow.WorkflowStatus
	42, // 23: workflow.WorkflowApp.actions:type_name -> workflow.ActionApp
	2,  // 24: workflow.WorkflowApp.resourceType:type_name -> workflow.ResourceType
	2,  // 25: workflow.WorkflowApp.partitionKey:type_name -> workflow.ResourceType
	44, // 26: workflow.ListWorkflowAppResponse.apps:type_name -> workflow.WorkflowAppListView
	42, // 27: workflow.WorkflowAppListView.actions:type_name -> workflow.ActionApp
	2,  // 28: workflow.WorkflowAppListView.resourceType:type_name -> workflow.ResourceType
	51, // 29: workflow.WorkflowAppListView.graphData:type_name -> workflow.Graph
	28, // 30: workflow.WorkflowService.CreateWorkflow:input_type -> workflow.NewWorkflowRequest
	29, // 31: workflow.WorkflowService.CreateWorkflowVersion:input_type -> workflow.NewWorkflowVersionRequest
	31, // 32: workflow.WorkflowService.ListWorkflows:input_type -> workflow.Empty
	38, // 33: workflow.WorkflowService.ListWorkflowsByFolder:input_type -> workflow.ListWorkflowsByFolderRequest
	39, // 34: workflow.WorkflowService.FilterWorkflowInFolderByStatus:input_type -> workflow.FilterWorkflow
	31, // 35: workflow.WorkflowService.ListSubWorkflows:input_type -> workflow.Empty
	31, // 36: workflow.WorkflowService.ListTemplates:input_type -> workflow.Empty
	22, // 37: workflow.WorkflowService.GetWorkflow:input_type -> workflow.IdRequest
	7,  // 38: workflow.WorkflowService.GetWorkflowVersion:input_type -> workflow.IdAndWorkflowIdReq
	22, // 39: workflow.WorkflowService.GetWorkflowDetailAndVersions:input_type -> workflow.IdRequest
	31, // 40: workflow.WorkflowService.GetWorkflowsCount:input_type -> workflow.Empty
	7,  // 41: workflow.WorkflowService.GetVersionTriggersEntrypoint:input_type -> workflow.IdAndWorkflowIdReq
	7,  // 42: workflow.WorkflowService.GetWorkflowDetailByVersionId:input_type -> workflow.IdAndWorkflowIdReq
	22, // 43: workflow.WorkflowService.RemoveWorkflow:input_type -> workflow.IdRequest
	7,  // 44: workflow.WorkflowService.RemoveWorkflowVersion:input_type -> workflow.IdAndWorkflowIdReq
	19, // 45: workflow.WorkflowService.CloneWorkflowVersion:input_type -> workflow.CloneWorkflowVersionRequest
	10, // 46: workflow.WorkflowService.CloneWorkflow:input_type -> workflow.CloneWorkflowReq
	34, // 47: workflow.WorkflowService.SaveWorkflow:input_type -> workflow.SaveWorkflowReq
	30, // 48: workflow.WorkflowService.SaveWorkflowVersion:input_type -> workflow.WorkflowVersion
	20, // 49: workflow.WorkflowService.SaveTestData:input_type -> workflow.TestData
	22, // 50: workflow.WorkflowService.LoadTestData:input_type -> workflow.IdRequest
	17, // 51: workflow.WorkflowService.TransformFromSchema:input_type -> workflow.TransformComponentSchemaRequest
	23, // 52: workflow.WorkflowService.MakeDefault:input_type -> workflow.MakeDefaultRequest
	16, // 53: workflow.WorkflowService.MarkAsTemplate:input_type -> workflow.MarkAsTemplateRequest
	12, // 54: workflow.WorkflowService.MoveWorkflowToFolder:input_type -> workflow.MoveWorkflow
	30, // 55: workflow.WorkflowService.UnPublishWorkflow:input_type -> workflow.WorkflowVersion
	40, // 56: workflow.WorkflowService.MarkWorkflowFavorite:input_type -> workflow.MarkFavoriteRequest
	3,  // 57: workflow.WorkflowService.CheckResourceEngagement:input_type -> workflow.ResourceEngagementReq
	45, // 58: workflow.WorkflowService.StartWorkflow:input_type -> workflow.StartWorkflowReq
	46, // 59: workflow.WorkflowService.StopWorkflow:input_type -> workflow.StopWorkflowReq
	41, // 60: workflow.WorkflowAppService.CreateWorkflowApp:input_type -> workflow.WorkflowApp
	41, // 61: workflow.WorkflowAppService.UpdateWorkflowApp:input_type -> workflow.WorkflowApp
	31, // 62: workflow.WorkflowAppService.ListWorkflowApps:input_type -> workflow.Empty
	22, // 63: workflow.WorkflowAppService.RemoveWorkflowApp:input_type -> workflow.IdRequest
	33, // 64: workflow.WorkflowService.CreateWorkflow:output_type -> workflow.NewWorkflow
	30, // 65: workflow.WorkflowService.CreateWorkflowVersion:output_type -> workflow.WorkflowVersion
	24, // 66: workflow.WorkflowService.ListWorkflows:output_type -> workflow.WorkflowsResponse
	24, // 67: workflow.WorkflowService.ListWorkflowsByFolder:output_type -> workflow.WorkflowsResponse
	24, // 68: workflow.WorkflowService.FilterWorkflowInFolderByStatus:output_type -> workflow.WorkflowsResponse
	8,  // 69: workflow.WorkflowService.ListSubWorkflows:output_type -> workflow.ListSubWorkflowsRes
	24, // 70: workflow.WorkflowService.ListTemplates:output_type -> workflow.WorkflowsResponse
	33, // 71: workflow.WorkflowService.GetWorkflow:output_type -> workflow.NewWorkflow
	30, // 72: workflow.WorkflowService.GetWorkflowVersion:output_type -> workflow.WorkflowVersion
	25, // 73: workflow.WorkflowService.GetWorkflowDetailAndVersions:output_type -> workflow.WorkflowListView
	35, // 74: workflow.WorkflowService.GetWorkflowsCount:output_type -> workflow.CountResponse
	14, // 75: workflow.WorkflowService.GetVersionTriggersEntrypoint:output_type -> workflow.ListTriggersEntrypointResponse
	33, // 76: workflow.WorkflowService.GetWorkflowDetailByVersionId:output_type -> workflow.NewWorkflow
	22, // 77: workflow.WorkflowService.RemoveWorkflow:output_type -> workflow.IdRequest
	22, // 78: workflow.WorkflowService.RemoveWorkflowVersion:output_type -> workflow.IdRequest
	26, // 79: workflow.WorkflowService.CloneWorkflowVersion:output_type -> workflow.WorkflowVersionView
	25, // 80: workflow.WorkflowService.CloneWorkflow:output_type -> workflow.WorkflowListView
	31, // 81: workflow.WorkflowService.SaveWorkflow:output_type -> workflow.Empty
	30, // 82: workflow.WorkflowService.SaveWorkflowVersion:output_type -> workflow.WorkflowVersion
	31, // 83: workflow.WorkflowService.SaveTestData:output_type -> workflow.Empty
	20, // 84: workflow.WorkflowService.LoadTestData:output_type -> workflow.TestData
	18, // 85: workflow.WorkflowService.TransformFromSchema:output_type -> workflow.TransformFromSchemaResponse
	31, // 86: workflow.WorkflowService.MakeDefault:output_type -> workflow.Empty
	31, // 87: workflow.WorkflowService.MarkAsTemplate:output_type -> workflow.Empty
	31, // 88: workflow.WorkflowService.MoveWorkflowToFolder:output_type -> workflow.Empty
	30, // 89: workflow.WorkflowService.UnPublishWorkflow:output_type -> workflow.WorkflowVersion
	31, // 90: workflow.WorkflowService.MarkWorkflowFavorite:output_type -> workflow.Empty
	4,  // 91: workflow.WorkflowService.CheckResourceEngagement:output_type -> workflow.ResourceEngagementRes
	31, // 92: workflow.WorkflowService.StartWorkflow:output_type -> workflow.Empty
	31, // 93: workflow.WorkflowService.StopWorkflow:output_type -> workflow.Empty
	22, // 94: workflow.WorkflowAppService.CreateWorkflowApp:output_type -> workflow.IdRequest
	22, // 95: workflow.WorkflowAppService.UpdateWorkflowApp:output_type -> workflow.IdRequest
	43, // 96: workflow.WorkflowAppService.ListWorkflowApps:output_type -> workflow.ListWorkflowAppResponse
	22, // 97: workflow.WorkflowAppService.RemoveWorkflowApp:output_type -> workflow.IdRequest
	64, // [64:98] is the sub-list for method output_type
	30, // [30:64] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_workflow_workflow_proto_init() }
func file_workflow_workflow_proto_init() {
	if File_workflow_workflow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workflow_workflow_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceEngagementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceEngagementRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceChild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*IdAndWorkflowIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListSubWorkflowsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListSubWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CloneWorkflowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ChartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MoveWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListTriggersEntrypointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TriggerEntrypoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MarkAsTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TransformComponentSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TransformFromSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CloneWorkflowVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TestDataInputNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*MakeDefaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowListView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowVersionView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*InputPluginData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*NewWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*NewWorkflowVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*NewWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*SaveWorkflowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*TemplatesCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*ListWorkflowsByFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*FilterWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*MarkFavoriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*ActionApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*ListWorkflowAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*WorkflowAppListView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*StartWorkflowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_workflow_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*StopWorkflowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_workflow_workflow_proto_msgTypes[17].OneofWrappers = []any{}
	file_workflow_workflow_proto_msgTypes[18].OneofWrappers = []any{}
	file_workflow_workflow_proto_msgTypes[23].OneofWrappers = []any{}
	file_workflow_workflow_proto_msgTypes[25].OneofWrappers = []any{}
	file_workflow_workflow_proto_msgTypes[27].OneofWrappers = []any{}
	file_workflow_workflow_proto_msgTypes[36].OneofWrappers = []any{}
	file_workflow_workflow_proto_msgTypes[43].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflow_workflow_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_workflow_workflow_proto_goTypes,
		DependencyIndexes: file_workflow_workflow_proto_depIdxs,
		EnumInfos:         file_workflow_workflow_proto_enumTypes,
		MessageInfos:      file_workflow_workflow_proto_msgTypes,
	}.Build()
	File_workflow_workflow_proto = out.File
	file_workflow_workflow_proto_rawDesc = nil
	file_workflow_workflow_proto_goTypes = nil
	file_workflow_workflow_proto_depIdxs = nil
}
