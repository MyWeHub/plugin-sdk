// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: organization/organization.proto

package organization

import (
	_ "github.com/amsokol/mongo-go-driver-protobuf/pmongo"
	_ "github.com/amsokol/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceType int32

const (
	ResourceType_PARENT  ResourceType = 0 // (direct org)
	ResourceType_PARTNER ResourceType = 1
	ResourceType_CHILD   ResourceType = 2
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "PARENT",
		1: "PARTNER",
		2: "CHILD",
	}
	ResourceType_value = map[string]int32{
		"PARENT":  0,
		"PARTNER": 1,
		"CHILD":   2,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_organization_organization_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_organization_organization_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{0}
}

type DocumentType int32

const (
	DocumentType_NONE            DocumentType = 0
	DocumentType_ORGANIZATION    DocumentType = 1
	DocumentType_INVITATION_CODE DocumentType = 2
)

// Enum value maps for DocumentType.
var (
	DocumentType_name = map[int32]string{
		0: "NONE",
		1: "ORGANIZATION",
		2: "INVITATION_CODE",
	}
	DocumentType_value = map[string]int32{
		"NONE":            0,
		"ORGANIZATION":    1,
		"INVITATION_CODE": 2,
	}
)

func (x DocumentType) Enum() *DocumentType {
	p := new(DocumentType)
	*p = x
	return p
}

func (x DocumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_organization_organization_proto_enumTypes[1].Descriptor()
}

func (DocumentType) Type() protoreflect.EnumType {
	return &file_organization_organization_proto_enumTypes[1]
}

func (x DocumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentType.Descriptor instead.
func (DocumentType) EnumDescriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{1}
}

type InvitationStatus int32

const (
	InvitationStatus_UNKNOWN_STATUS InvitationStatus = 0
	InvitationStatus_PENDING        InvitationStatus = 1
	InvitationStatus_ACCEPTED       InvitationStatus = 2
	InvitationStatus_EXPIRED        InvitationStatus = 3
)

// Enum value maps for InvitationStatus.
var (
	InvitationStatus_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "PENDING",
		2: "ACCEPTED",
		3: "EXPIRED",
	}
	InvitationStatus_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"PENDING":        1,
		"ACCEPTED":       2,
		"EXPIRED":        3,
	}
)

func (x InvitationStatus) Enum() *InvitationStatus {
	p := new(InvitationStatus)
	*p = x
	return p
}

func (x InvitationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvitationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_organization_organization_proto_enumTypes[2].Descriptor()
}

func (InvitationStatus) Type() protoreflect.EnumType {
	return &file_organization_organization_proto_enumTypes[2]
}

func (x InvitationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvitationStatus.Descriptor instead.
func (InvitationStatus) EnumDescriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{2}
}

type UserType int32

const (
	UserType_UNKNOWN_USER  UserType = 0
	UserType_NEW_USER      UserType = 1
	UserType_EXISTING_USER UserType = 2
)

// Enum value maps for UserType.
var (
	UserType_name = map[int32]string{
		0: "UNKNOWN_USER",
		1: "NEW_USER",
		2: "EXISTING_USER",
	}
	UserType_value = map[string]int32{
		"UNKNOWN_USER":  0,
		"NEW_USER":      1,
		"EXISTING_USER": 2,
	}
)

func (x UserType) Enum() *UserType {
	p := new(UserType)
	*p = x
	return p
}

func (x UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_organization_organization_proto_enumTypes[3].Descriptor()
}

func (UserType) Type() protoreflect.EnumType {
	return &file_organization_organization_proto_enumTypes[3]
}

func (x UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserType.Descriptor instead.
func (UserType) EnumDescriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{3}
}

type InvitationState int32

const (
	InvitationState_UNKNOWN_STATE  InvitationState = 0
	InvitationState_NOT_REGISTERED InvitationState = 1
	InvitationState_REGISTERING    InvitationState = 2
	InvitationState_REGISTERED     InvitationState = 3
)

// Enum value maps for InvitationState.
var (
	InvitationState_name = map[int32]string{
		0: "UNKNOWN_STATE",
		1: "NOT_REGISTERED",
		2: "REGISTERING",
		3: "REGISTERED",
	}
	InvitationState_value = map[string]int32{
		"UNKNOWN_STATE":  0,
		"NOT_REGISTERED": 1,
		"REGISTERING":    2,
		"REGISTERED":     3,
	}
)

func (x InvitationState) Enum() *InvitationState {
	p := new(InvitationState)
	*p = x
	return p
}

func (x InvitationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvitationState) Descriptor() protoreflect.EnumDescriptor {
	return file_organization_organization_proto_enumTypes[4].Descriptor()
}

func (InvitationState) Type() protoreflect.EnumType {
	return &file_organization_organization_proto_enumTypes[4]
}

func (x InvitationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvitationState.Descriptor instead.
func (InvitationState) EnumDescriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{4}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{0}
}

type RequestInvByID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedClientID string `protobuf:"bytes,1,opt,name=requestedClientID,proto3" json:"requestedClientID,omitempty"`
}

func (x *RequestInvByID) Reset() {
	*x = RequestInvByID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInvByID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInvByID) ProtoMessage() {}

func (x *RequestInvByID) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInvByID.ProtoReflect.Descriptor instead.
func (*RequestInvByID) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{1}
}

func (x *RequestInvByID) GetRequestedClientID() string {
	if x != nil {
		return x.RequestedClientID
	}
	return ""
}

type RequestByID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
}

func (x *RequestByID) Reset() {
	*x = RequestByID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestByID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestByID) ProtoMessage() {}

func (x *RequestByID) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestByID.ProtoReflect.Descriptor instead.
func (*RequestByID) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{2}
}

func (x *RequestByID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CheckInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" bson:"email"`
}

func (x *CheckInvitationRequest) Reset() {
	*x = CheckInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInvitationRequest) ProtoMessage() {}

func (x *CheckInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInvitationRequest.ProtoReflect.Descriptor instead.
func (*CheckInvitationRequest) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{3}
}

func (x *CheckInvitationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CheckInvitationRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type CheckInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
}

func (x *CheckInvitationResponse) Reset() {
	*x = CheckInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInvitationResponse) ProtoMessage() {}

func (x *CheckInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInvitationResponse.ProtoReflect.Descriptor instead.
func (*CheckInvitationResponse) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{4}
}

func (x *CheckInvitationResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type CreateChildReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Child *Organization `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *CreateChildReq) Reset() {
	*x = CreateChildReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChildReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChildReq) ProtoMessage() {}

func (x *CreateChildReq) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChildReq.ProtoReflect.Descriptor instead.
func (*CreateChildReq) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{5}
}

func (x *CreateChildReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateChildReq) GetChild() *Organization {
	if x != nil {
		return x.Child
	}
	return nil
}

type DeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	// Types that are assignable to UserAction:
	//
	//	*DeleteReq_DeleteUsers
	//	*DeleteReq_TransferToOrganizationByID
	UserAction isDeleteReq_UserAction `protobuf_oneof:"userAction"`
}

func (x *DeleteReq) Reset() {
	*x = DeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReq) ProtoMessage() {}

func (x *DeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReq.ProtoReflect.Descriptor instead.
func (*DeleteReq) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *DeleteReq) GetUserAction() isDeleteReq_UserAction {
	if m != nil {
		return m.UserAction
	}
	return nil
}

func (x *DeleteReq) GetDeleteUsers() bool {
	if x, ok := x.GetUserAction().(*DeleteReq_DeleteUsers); ok {
		return x.DeleteUsers
	}
	return false
}

func (x *DeleteReq) GetTransferToOrganizationByID() string {
	if x, ok := x.GetUserAction().(*DeleteReq_TransferToOrganizationByID); ok {
		return x.TransferToOrganizationByID
	}
	return ""
}

type isDeleteReq_UserAction interface {
	isDeleteReq_UserAction()
}

type DeleteReq_DeleteUsers struct {
	DeleteUsers bool `protobuf:"varint,2,opt,name=deleteUsers,proto3,oneof"`
}

type DeleteReq_TransferToOrganizationByID struct {
	TransferToOrganizationByID string `protobuf:"bytes,3,opt,name=transferToOrganizationByID,proto3,oneof"`
}

func (*DeleteReq_DeleteUsers) isDeleteReq_UserAction() {}

func (*DeleteReq_TransferToOrganizationByID) isDeleteReq_UserAction() {}

type Organizations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organizations []*Organization `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *Organizations) Reset() {
	*x = Organizations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations) ProtoMessage() {}

func (x *Organizations) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations.ProtoReflect.Descriptor instead.
func (*Organizations) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{7}
}

func (x *Organizations) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

type GetPartnerChildrenRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPartner  bool     `protobuf:"varint,1,opt,name=isPartner,proto3" json:"isPartner,omitempty"`
	ChildrenID []string `protobuf:"bytes,2,rep,name=childrenID,proto3" json:"childrenID,omitempty"`
}

func (x *GetPartnerChildrenRes) Reset() {
	*x = GetPartnerChildrenRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerChildrenRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerChildrenRes) ProtoMessage() {}

func (x *GetPartnerChildrenRes) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerChildrenRes.ProtoReflect.Descriptor instead.
func (*GetPartnerChildrenRes) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{8}
}

func (x *GetPartnerChildrenRes) GetIsPartner() bool {
	if x != nil {
		return x.IsPartner
	}
	return false
}

func (x *GetPartnerChildrenRes) GetChildrenID() []string {
	if x != nil {
		return x.ChildrenID
	}
	return nil
}

type IsPremiumRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPremium bool `protobuf:"varint,1,opt,name=isPremium,proto3" json:"isPremium,omitempty"`
}

func (x *IsPremiumRes) Reset() {
	*x = IsPremiumRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPremiumRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPremiumRes) ProtoMessage() {}

func (x *IsPremiumRes) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPremiumRes.ProtoReflect.Descriptor instead.
func (*IsPremiumRes) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{9}
}

func (x *IsPremiumRes) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name"`
	Active       bool                   `protobuf:"varint,3,opt,name=active,proto3" json:"active" bson:"active"`
	Updated      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated" bson:"updated"`
	Created      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created" bson:"created"`
	UserCount    int32                  `protobuf:"varint,6,opt,name=userCount,proto3" json:",omitempty" bson:",omitempty"` // informational
	ParentID     string                 `protobuf:"bytes,7,opt,name=parentID,proto3" json:"parentID" bson:"parentID"`
	ParentName   string                 `protobuf:"bytes,8,opt,name=parentName,proto3" json:",omitempty" bson:",omitempty"` // informational
	Children     []*Organization        `protobuf:"bytes,9,rep,name=children,proto3" json:",omitempty" bson:",omitempty"`   // informational
	ResourceType ResourceType           `protobuf:"varint,10,opt,name=resourceType,proto3,enum=organization.ResourceType" json:"resourceType" bson:"resourceType"`
	IsPremium    bool                   `protobuf:"varint,11,opt,name=isPremium,proto3" json:"isPremium" bson:"isPremium"`
	PartitionKey string                 `protobuf:"bytes,12,opt,name=partitionKey,proto3" json:"partitionKey" bson:"partitionKey"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{10}
}

func (x *Organization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Organization) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Organization) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Organization) GetUserCount() int32 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *Organization) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *Organization) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *Organization) GetChildren() []*Organization {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Organization) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_PARENT
}

func (x *Organization) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

func (x *Organization) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

type GetApiSubscriptionKeysRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryKey   string `protobuf:"bytes,1,opt,name=PrimaryKey,proto3" json:"PrimaryKey,omitempty"`
	SecondaryKey string `protobuf:"bytes,2,opt,name=SecondaryKey,proto3" json:"SecondaryKey,omitempty"`
}

func (x *GetApiSubscriptionKeysRes) Reset() {
	*x = GetApiSubscriptionKeysRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiSubscriptionKeysRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiSubscriptionKeysRes) ProtoMessage() {}

func (x *GetApiSubscriptionKeysRes) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiSubscriptionKeysRes.ProtoReflect.Descriptor instead.
func (*GetApiSubscriptionKeysRes) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{11}
}

func (x *GetApiSubscriptionKeysRes) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *GetApiSubscriptionKeysRes) GetSecondaryKey() string {
	if x != nil {
		return x.SecondaryKey
	}
	return ""
}

type ListInvitationsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationEmails []*InvitationEmail `protobuf:"bytes,1,rep,name=invitationEmails,proto3" json:"invitationEmails,omitempty"`
}

func (x *ListInvitationsRes) Reset() {
	*x = ListInvitationsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInvitationsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvitationsRes) ProtoMessage() {}

func (x *ListInvitationsRes) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvitationsRes.ProtoReflect.Descriptor instead.
func (*ListInvitationsRes) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{12}
}

func (x *ListInvitationsRes) GetInvitationEmails() []*InvitationEmail {
	if x != nil {
		return x.InvitationEmails
	}
	return nil
}

type SendInvitationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteeEmail string  `protobuf:"bytes,1,opt,name=inviteeEmail,proto3" json:"inviteeEmail,omitempty"`
	OrgId        string  `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Message      *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *SendInvitationReq) Reset() {
	*x = SendInvitationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInvitationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInvitationReq) ProtoMessage() {}

func (x *SendInvitationReq) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInvitationReq.ProtoReflect.Descriptor instead.
func (*SendInvitationReq) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{13}
}

func (x *SendInvitationReq) GetInviteeEmail() string {
	if x != nil {
		return x.InviteeEmail
	}
	return ""
}

func (x *SendInvitationReq) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SendInvitationReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type InvitationEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id"`
	OrgID           string                 `protobuf:"bytes,2,opt,name=orgID,proto3" json:"orgID" bson:"orgID"`
	Created         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created" bson:"created"`
	Expires         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires,proto3" json:"expires" bson:"expires"`
	IsValid         bool                   `protobuf:"varint,5,opt,name=isValid,proto3" json:"isValid" bson:"isValid"`
	InviteeEmail    string                 `protobuf:"bytes,6,opt,name=inviteeEmail,proto3" json:"inviteeEmail" bson:"inviteeEmail"`
	InviteeID       string                 `protobuf:"bytes,7,opt,name=inviteeID,proto3" json:"inviteeID" bson:"inviteeID"`
	UsedAt          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=usedAt,proto3" json:"usedAt" bson:"usedAt"`
	PartitionKey    string                 `protobuf:"bytes,9,opt,name=partitionKey,proto3" json:"partitionKey" bson:"partitionKey"`
	Status          InvitationStatus       `protobuf:"varint,10,opt,name=status,proto3,enum=organization.InvitationStatus" json:"status" bson:"status"`
	UserType        UserType               `protobuf:"varint,11,opt,name=userType,proto3,enum=organization.UserType" json:"userType" bson:"userType"`
	InvitationState *InvitationState       `protobuf:"varint,12,opt,name=invitationState,proto3,enum=organization.InvitationState,oneof" json:"invitationState" bson:"invitationState"`
	Message         *string                `protobuf:"bytes,13,opt,name=message,proto3,oneof" json:"message" bson:"message"`
}

func (x *InvitationEmail) Reset() {
	*x = InvitationEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationEmail) ProtoMessage() {}

func (x *InvitationEmail) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationEmail.ProtoReflect.Descriptor instead.
func (*InvitationEmail) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{14}
}

func (x *InvitationEmail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InvitationEmail) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *InvitationEmail) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *InvitationEmail) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *InvitationEmail) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *InvitationEmail) GetInviteeEmail() string {
	if x != nil {
		return x.InviteeEmail
	}
	return ""
}

func (x *InvitationEmail) GetInviteeID() string {
	if x != nil {
		return x.InviteeID
	}
	return ""
}

func (x *InvitationEmail) GetUsedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UsedAt
	}
	return nil
}

func (x *InvitationEmail) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *InvitationEmail) GetStatus() InvitationStatus {
	if x != nil {
		return x.Status
	}
	return InvitationStatus_UNKNOWN_STATUS
}

func (x *InvitationEmail) GetUserType() UserType {
	if x != nil {
		return x.UserType
	}
	return UserType_UNKNOWN_USER
}

func (x *InvitationEmail) GetInvitationState() InvitationState {
	if x != nil && x.InvitationState != nil {
		return *x.InvitationState
	}
	return InvitationState_UNKNOWN_STATE
}

func (x *InvitationEmail) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// Switch Organization
type SwitchOrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id"`
	UserId       string       `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId" bson:"userId"`
	PrimaryOrg   string       `protobuf:"bytes,3,opt,name=primaryOrg,proto3" json:"primaryOrg" bson:"primaryOrg"`
	Orgs         []*SimpleOrg `protobuf:"bytes,4,rep,name=orgs,proto3" json:"orgs" bson:"orgs"`
	PartitionKey string       `protobuf:"bytes,5,opt,name=partitionKey,proto3" json:"partitionKey" bson:"partitionKey"`
}

func (x *SwitchOrg) Reset() {
	*x = SwitchOrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchOrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchOrg) ProtoMessage() {}

func (x *SwitchOrg) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchOrg.ProtoReflect.Descriptor instead.
func (*SwitchOrg) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{15}
}

func (x *SwitchOrg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SwitchOrg) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SwitchOrg) GetPrimaryOrg() string {
	if x != nil {
		return x.PrimaryOrg
	}
	return ""
}

func (x *SwitchOrg) GetOrgs() []*SimpleOrg {
	if x != nil {
		return x.Orgs
	}
	return nil
}

func (x *SwitchOrg) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

type SimpleOrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name"`
	LastVisited *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lastVisited,proto3" json:"lastVisited" bson:"lastVisited"`
}

func (x *SimpleOrg) Reset() {
	*x = SimpleOrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleOrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleOrg) ProtoMessage() {}

func (x *SimpleOrg) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleOrg.ProtoReflect.Descriptor instead.
func (*SimpleOrg) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{16}
}

func (x *SimpleOrg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SimpleOrg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleOrg) GetLastVisited() *timestamppb.Timestamp {
	if x != nil {
		return x.LastVisited
	}
	return nil
}

type SwitchOrgCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string       `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Orgs   []*SimpleOrg `protobuf:"bytes,2,rep,name=orgs,proto3" json:"orgs,omitempty"`
}

func (x *SwitchOrgCreateReq) Reset() {
	*x = SwitchOrgCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchOrgCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchOrgCreateReq) ProtoMessage() {}

func (x *SwitchOrgCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchOrgCreateReq.ProtoReflect.Descriptor instead.
func (*SwitchOrgCreateReq) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{17}
}

func (x *SwitchOrgCreateReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SwitchOrgCreateReq) GetOrgs() []*SimpleOrg {
	if x != nil {
		return x.Orgs
	}
	return nil
}

type SwitchOrgPatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId string     `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Org    *SimpleOrg `protobuf:"bytes,3,opt,name=org,proto3" json:"org,omitempty"`
}

func (x *SwitchOrgPatchReq) Reset() {
	*x = SwitchOrgPatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchOrgPatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchOrgPatchReq) ProtoMessage() {}

func (x *SwitchOrgPatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchOrgPatchReq.ProtoReflect.Descriptor instead.
func (*SwitchOrgPatchReq) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{18}
}

func (x *SwitchOrgPatchReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SwitchOrgPatchReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SwitchOrgPatchReq) GetOrg() *SimpleOrg {
	if x != nil {
		return x.Org
	}
	return nil
}

type RequestByUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *RequestByUserId) Reset() {
	*x = RequestByUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestByUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestByUserId) ProtoMessage() {}

func (x *RequestByUserId) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestByUserId.ProtoReflect.Descriptor instead.
func (*RequestByUserId) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{19}
}

func (x *RequestByUserId) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AcceptInvitationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AcceptInvitationReq) Reset() {
	*x = AcceptInvitationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInvitationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInvitationReq) ProtoMessage() {}

func (x *AcceptInvitationReq) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInvitationReq.ProtoReflect.Descriptor instead.
func (*AcceptInvitationReq) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{20}
}

func (x *AcceptInvitationReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AcceptInvitationByEmailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email  string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AcceptInvitationByEmailReq) Reset() {
	*x = AcceptInvitationByEmailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInvitationByEmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInvitationByEmailReq) ProtoMessage() {}

func (x *AcceptInvitationByEmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInvitationByEmailReq.ProtoReflect.Descriptor instead.
func (*AcceptInvitationByEmailReq) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{21}
}

func (x *AcceptInvitationByEmailReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AcceptInvitationByEmailReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SetPremiumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsPremium bool   `protobuf:"varint,2,opt,name=isPremium,proto3" json:"isPremium,omitempty"`
}

func (x *SetPremiumRequest) Reset() {
	*x = SetPremiumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPremiumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPremiumRequest) ProtoMessage() {}

func (x *SetPremiumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPremiumRequest.ProtoReflect.Descriptor instead.
func (*SetPremiumRequest) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{22}
}

func (x *SetPremiumRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetPremiumRequest) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

var File_organization_organization_proto protoreflect.FileDescriptor

var file_organization_organization_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x15, 0x70, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x74, 0x61, 0x67, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x2e, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1f,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03,
	0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x62, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x33, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0xa0, 0x01,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x40, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x51, 0x0a, 0x0d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x40, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x44, 0x22, 0x2c, 0x0a, 0x0c, 0x49, 0x73,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22, 0xe7, 0x07, 0x0a, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x9a, 0x84, 0x9e, 0x03, 0x20, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x9a, 0x84, 0x9e, 0x03, 0x22, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0x9a,
	0x84, 0x9e, 0x03, 0x24, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x60, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2a, 0x9a,
	0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x60, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2d, 0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0x9a, 0x84, 0x9e, 0x03, 0x26, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x12, 0x6f, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x2f, 0x9a, 0x84, 0x9e, 0x03, 0x2a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x20, 0x20, 0x20, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x2c, 0x9a, 0x84, 0x9e, 0x03, 0x27, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x22, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x53, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0x9a, 0x84, 0x9e, 0x03, 0x2a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x20, 0x20, 0x20,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x22, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x22, 0x5f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x22, 0x5f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x78, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa3,
	0x09, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x9a, 0x84, 0x9e, 0x03, 0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x9a, 0x84, 0x9e, 0x03, 0x24,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x72,
	0x67, 0x49, 0x44, 0x22, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2b, 0x9a, 0x84, 0x9e, 0x03, 0x26, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x61,
	0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2b, 0x9a, 0x84, 0x9e,
	0x03, 0x26, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x2b, 0x9a, 0x84, 0x9e, 0x03, 0x26, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0x9a, 0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4b,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x22,
	0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x64, 0x41, 0x74, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x30, 0x9a, 0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x22, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x62, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x2b, 0x9a, 0x84, 0x9e, 0x03, 0x26, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x32, 0x9a, 0x84, 0x9e, 0x03, 0x2d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x9a, 0x84, 0x9e, 0x03,
	0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x09, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x67, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0x9a, 0x84, 0x9e, 0x03, 0x1c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x9a, 0x84, 0x9e, 0x03, 0x20, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f,
	0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x9a, 0x84, 0x9e, 0x03, 0x24, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x22,
	0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f,
	0x72, 0x67, 0x22, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x12,
	0x50, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x73, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x73, 0x22, 0x52, 0x04, 0x6f, 0x72, 0x67,
	0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x9a, 0x84, 0x9e, 0x03, 0x26, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x22, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x22, 0xe1, 0x01, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x67,
	0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x9a, 0x84,
	0x9e, 0x03, 0x1c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2a, 0x9a,
	0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x61, 0x73,
	0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x22, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x6f, 0x72, 0x67,
	0x73, 0x22, 0x66, 0x0a, 0x11, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x4f, 0x72, 0x67, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x22, 0x29, 0x0a, 0x0f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x1a, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x2a, 0x32, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41,
	0x52, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x2a, 0x3f,
	0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41,
	0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x2a,
	0x4e, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x3d, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x45, 0x57, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x59,
	0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x32, 0xcb, 0x05, 0x0a, 0x13, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x42, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x17, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x12, 0x13, 0x2e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x13, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x49,
	0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12,
	0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xce, 0x04, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x48, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x42, 0x79,
	0x49, 0x44, 0x1a, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x17,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x83, 0x03, 0x0a, 0x10, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67,
	0x12, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x12, 0x17, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x4f, 0x72, 0x67, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x12, 0x1d, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x67, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f,
	0x72, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x12,
	0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x13,
	0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x12, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x1c,
	0x5a, 0x1a, 0x77, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_organization_organization_proto_rawDescOnce sync.Once
	file_organization_organization_proto_rawDescData = file_organization_organization_proto_rawDesc
)

func file_organization_organization_proto_rawDescGZIP() []byte {
	file_organization_organization_proto_rawDescOnce.Do(func() {
		file_organization_organization_proto_rawDescData = protoimpl.X.CompressGZIP(file_organization_organization_proto_rawDescData)
	})
	return file_organization_organization_proto_rawDescData
}

var file_organization_organization_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_organization_organization_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_organization_organization_proto_goTypes = []interface{}{
	(ResourceType)(0),                  // 0: organization.ResourceType
	(DocumentType)(0),                  // 1: organization.DocumentType
	(InvitationStatus)(0),              // 2: organization.InvitationStatus
	(UserType)(0),                      // 3: organization.UserType
	(InvitationState)(0),               // 4: organization.InvitationState
	(*Empty)(nil),                      // 5: organization.Empty
	(*RequestInvByID)(nil),             // 6: organization.RequestInvByID
	(*RequestByID)(nil),                // 7: organization.RequestByID
	(*CheckInvitationRequest)(nil),     // 8: organization.CheckInvitationRequest
	(*CheckInvitationResponse)(nil),    // 9: organization.CheckInvitationResponse
	(*CreateChildReq)(nil),             // 10: organization.CreateChildReq
	(*DeleteReq)(nil),                  // 11: organization.DeleteReq
	(*Organizations)(nil),              // 12: organization.Organizations
	(*GetPartnerChildrenRes)(nil),      // 13: organization.GetPartnerChildrenRes
	(*IsPremiumRes)(nil),               // 14: organization.IsPremiumRes
	(*Organization)(nil),               // 15: organization.Organization
	(*GetApiSubscriptionKeysRes)(nil),  // 16: organization.GetApiSubscriptionKeysRes
	(*ListInvitationsRes)(nil),         // 17: organization.ListInvitationsRes
	(*SendInvitationReq)(nil),          // 18: organization.SendInvitationReq
	(*InvitationEmail)(nil),            // 19: organization.InvitationEmail
	(*SwitchOrg)(nil),                  // 20: organization.SwitchOrg
	(*SimpleOrg)(nil),                  // 21: organization.simpleOrg
	(*SwitchOrgCreateReq)(nil),         // 22: organization.SwitchOrgCreateReq
	(*SwitchOrgPatchReq)(nil),          // 23: organization.SwitchOrgPatchReq
	(*RequestByUserId)(nil),            // 24: organization.RequestByUserId
	(*AcceptInvitationReq)(nil),        // 25: organization.AcceptInvitationReq
	(*AcceptInvitationByEmailReq)(nil), // 26: organization.AcceptInvitationByEmailReq
	(*SetPremiumRequest)(nil),          // 27: organization.SetPremiumRequest
	(*timestamppb.Timestamp)(nil),      // 28: google.protobuf.Timestamp
}
var file_organization_organization_proto_depIdxs = []int32{
	15, // 0: organization.CreateChildReq.child:type_name -> organization.Organization
	15, // 1: organization.Organizations.organizations:type_name -> organization.Organization
	28, // 2: organization.Organization.updated:type_name -> google.protobuf.Timestamp
	28, // 3: organization.Organization.created:type_name -> google.protobuf.Timestamp
	15, // 4: organization.Organization.children:type_name -> organization.Organization
	0,  // 5: organization.Organization.resourceType:type_name -> organization.ResourceType
	19, // 6: organization.ListInvitationsRes.invitationEmails:type_name -> organization.InvitationEmail
	28, // 7: organization.InvitationEmail.created:type_name -> google.protobuf.Timestamp
	28, // 8: organization.InvitationEmail.expires:type_name -> google.protobuf.Timestamp
	28, // 9: organization.InvitationEmail.usedAt:type_name -> google.protobuf.Timestamp
	2,  // 10: organization.InvitationEmail.status:type_name -> organization.InvitationStatus
	3,  // 11: organization.InvitationEmail.userType:type_name -> organization.UserType
	4,  // 12: organization.InvitationEmail.invitationState:type_name -> organization.InvitationState
	21, // 13: organization.SwitchOrg.orgs:type_name -> organization.simpleOrg
	28, // 14: organization.simpleOrg.lastVisited:type_name -> google.protobuf.Timestamp
	21, // 15: organization.SwitchOrgCreateReq.orgs:type_name -> organization.simpleOrg
	21, // 16: organization.SwitchOrgPatchReq.org:type_name -> organization.simpleOrg
	15, // 17: organization.OrganizationService.Create:input_type -> organization.Organization
	5,  // 18: organization.OrganizationService.List:input_type -> organization.Empty
	7,  // 19: organization.OrganizationService.Get:input_type -> organization.RequestByID
	15, // 20: organization.OrganizationService.Update:input_type -> organization.Organization
	11, // 21: organization.OrganizationService.Delete:input_type -> organization.DeleteReq
	5,  // 22: organization.OrganizationService.GetPartnerChildren:input_type -> organization.Empty
	5,  // 23: organization.OrganizationService.ListFlat:input_type -> organization.Empty
	5,  // 24: organization.OrganizationService.GetApiSubscriptionKeys:input_type -> organization.Empty
	7,  // 25: organization.OrganizationService.IsPremium:input_type -> organization.RequestByID
	27, // 26: organization.OrganizationService.SetPremium:input_type -> organization.SetPremiumRequest
	18, // 27: organization.InvitationCodeService.SendInvitation:input_type -> organization.SendInvitationReq
	7,  // 28: organization.InvitationCodeService.ResendInvitation:input_type -> organization.RequestByID
	6,  // 29: organization.InvitationCodeService.ListInvitations:input_type -> organization.RequestInvByID
	7,  // 30: organization.InvitationCodeService.RevokeInvitation:input_type -> organization.RequestByID
	8,  // 31: organization.InvitationCodeService.CheckInvitation:input_type -> organization.CheckInvitationRequest
	25, // 32: organization.InvitationCodeService.AcceptInvitation:input_type -> organization.AcceptInvitationReq
	26, // 33: organization.InvitationCodeService.AcceptInvitationByEmail:input_type -> organization.AcceptInvitationByEmailReq
	22, // 34: organization.SwitchOrgService.CreateSwitchOrg:input_type -> organization.SwitchOrgCreateReq
	20, // 35: organization.SwitchOrgService.PatchSwitchOrg:input_type -> organization.SwitchOrg
	24, // 36: organization.SwitchOrgService.GetSwitchOrg:input_type -> organization.RequestByUserId
	24, // 37: organization.SwitchOrgService.RemoveOrgFromSwitchOrg:input_type -> organization.RequestByUserId
	24, // 38: organization.SwitchOrgService.RemoveSwitchOrg:input_type -> organization.RequestByUserId
	15, // 39: organization.OrganizationService.Create:output_type -> organization.Organization
	12, // 40: organization.OrganizationService.List:output_type -> organization.Organizations
	15, // 41: organization.OrganizationService.Get:output_type -> organization.Organization
	15, // 42: organization.OrganizationService.Update:output_type -> organization.Organization
	5,  // 43: organization.OrganizationService.Delete:output_type -> organization.Empty
	13, // 44: organization.OrganizationService.GetPartnerChildren:output_type -> organization.GetPartnerChildrenRes
	12, // 45: organization.OrganizationService.ListFlat:output_type -> organization.Organizations
	16, // 46: organization.OrganizationService.GetApiSubscriptionKeys:output_type -> organization.GetApiSubscriptionKeysRes
	14, // 47: organization.OrganizationService.IsPremium:output_type -> organization.IsPremiumRes
	5,  // 48: organization.OrganizationService.SetPremium:output_type -> organization.Empty
	5,  // 49: organization.InvitationCodeService.SendInvitation:output_type -> organization.Empty
	5,  // 50: organization.InvitationCodeService.ResendInvitation:output_type -> organization.Empty
	17, // 51: organization.InvitationCodeService.ListInvitations:output_type -> organization.ListInvitationsRes
	5,  // 52: organization.InvitationCodeService.RevokeInvitation:output_type -> organization.Empty
	9,  // 53: organization.InvitationCodeService.CheckInvitation:output_type -> organization.CheckInvitationResponse
	5,  // 54: organization.InvitationCodeService.AcceptInvitation:output_type -> organization.Empty
	5,  // 55: organization.InvitationCodeService.AcceptInvitationByEmail:output_type -> organization.Empty
	5,  // 56: organization.SwitchOrgService.CreateSwitchOrg:output_type -> organization.Empty
	5,  // 57: organization.SwitchOrgService.PatchSwitchOrg:output_type -> organization.Empty
	20, // 58: organization.SwitchOrgService.GetSwitchOrg:output_type -> organization.SwitchOrg
	5,  // 59: organization.SwitchOrgService.RemoveOrgFromSwitchOrg:output_type -> organization.Empty
	5,  // 60: organization.SwitchOrgService.RemoveSwitchOrg:output_type -> organization.Empty
	39, // [39:61] is the sub-list for method output_type
	17, // [17:39] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_organization_organization_proto_init() }
func file_organization_organization_proto_init() {
	if File_organization_organization_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_organization_organization_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInvByID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestByID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChildReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerChildrenRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPremiumRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiSubscriptionKeysRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInvitationsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInvitationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchOrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleOrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchOrgCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchOrgPatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestByUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInvitationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInvitationByEmailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPremiumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_organization_organization_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*DeleteReq_DeleteUsers)(nil),
		(*DeleteReq_TransferToOrganizationByID)(nil),
	}
	file_organization_organization_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_organization_organization_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_organization_organization_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_organization_organization_proto_goTypes,
		DependencyIndexes: file_organization_organization_proto_depIdxs,
		EnumInfos:         file_organization_organization_proto_enumTypes,
		MessageInfos:      file_organization_organization_proto_msgTypes,
	}.Build()
	File_organization_organization_proto = out.File
	file_organization_organization_proto_rawDesc = nil
	file_organization_organization_proto_goTypes = nil
	file_organization_organization_proto_depIdxs = nil
}
