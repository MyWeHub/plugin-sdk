// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: organization/organization.proto

package organization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrganizationService_Create_FullMethodName                 = "/organization.OrganizationService/Create"
	OrganizationService_List_FullMethodName                   = "/organization.OrganizationService/List"
	OrganizationService_Get_FullMethodName                    = "/organization.OrganizationService/Get"
	OrganizationService_Update_FullMethodName                 = "/organization.OrganizationService/Update"
	OrganizationService_Delete_FullMethodName                 = "/organization.OrganizationService/Delete"
	OrganizationService_GetPartnerChildren_FullMethodName     = "/organization.OrganizationService/GetPartnerChildren"
	OrganizationService_ListFlat_FullMethodName               = "/organization.OrganizationService/ListFlat"
	OrganizationService_GetApiSubscriptionKeys_FullMethodName = "/organization.OrganizationService/GetApiSubscriptionKeys"
	OrganizationService_IsPremium_FullMethodName              = "/organization.OrganizationService/IsPremium"
	OrganizationService_SetPremium_FullMethodName             = "/organization.OrganizationService/SetPremium"
)

// OrganizationServiceClient is the client API for OrganizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationServiceClient interface {
	Create(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Organizations, error)
	Get(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Organization, error)
	Update(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	GetPartnerChildren(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPartnerChildrenRes, error)
	ListFlat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Organizations, error)
	GetApiSubscriptionKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetApiSubscriptionKeysRes, error)
	IsPremium(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*IsPremiumRes, error)
	SetPremium(ctx context.Context, in *SetPremiumRequest, opts ...grpc.CallOption) (*Empty, error)
}

type organizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationServiceClient(cc grpc.ClientConnInterface) OrganizationServiceClient {
	return &organizationServiceClient{cc}
}

func (c *organizationServiceClient) Create(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, OrganizationService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Organizations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organizations)
	err := c.cc.Invoke(ctx, OrganizationService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Get(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, OrganizationService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Update(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, OrganizationService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, OrganizationService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetPartnerChildren(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPartnerChildrenRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartnerChildrenRes)
	err := c.cc.Invoke(ctx, OrganizationService_GetPartnerChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListFlat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Organizations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organizations)
	err := c.cc.Invoke(ctx, OrganizationService_ListFlat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetApiSubscriptionKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetApiSubscriptionKeysRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApiSubscriptionKeysRes)
	err := c.cc.Invoke(ctx, OrganizationService_GetApiSubscriptionKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) IsPremium(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*IsPremiumRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsPremiumRes)
	err := c.cc.Invoke(ctx, OrganizationService_IsPremium_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) SetPremium(ctx context.Context, in *SetPremiumRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, OrganizationService_SetPremium_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServiceServer is the server API for OrganizationService service.
// All implementations must embed UnimplementedOrganizationServiceServer
// for forward compatibility.
type OrganizationServiceServer interface {
	Create(context.Context, *Organization) (*Organization, error)
	List(context.Context, *Empty) (*Organizations, error)
	Get(context.Context, *RequestByID) (*Organization, error)
	Update(context.Context, *Organization) (*Organization, error)
	Delete(context.Context, *DeleteReq) (*Empty, error)
	GetPartnerChildren(context.Context, *Empty) (*GetPartnerChildrenRes, error)
	ListFlat(context.Context, *Empty) (*Organizations, error)
	GetApiSubscriptionKeys(context.Context, *Empty) (*GetApiSubscriptionKeysRes, error)
	IsPremium(context.Context, *RequestByID) (*IsPremiumRes, error)
	SetPremium(context.Context, *SetPremiumRequest) (*Empty, error)
	mustEmbedUnimplementedOrganizationServiceServer()
}

// UnimplementedOrganizationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrganizationServiceServer struct{}

func (UnimplementedOrganizationServiceServer) Create(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrganizationServiceServer) List(context.Context, *Empty) (*Organizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrganizationServiceServer) Get(context.Context, *RequestByID) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOrganizationServiceServer) Update(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrganizationServiceServer) Delete(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrganizationServiceServer) GetPartnerChildren(context.Context, *Empty) (*GetPartnerChildrenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerChildren not implemented")
}
func (UnimplementedOrganizationServiceServer) ListFlat(context.Context, *Empty) (*Organizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlat not implemented")
}
func (UnimplementedOrganizationServiceServer) GetApiSubscriptionKeys(context.Context, *Empty) (*GetApiSubscriptionKeysRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiSubscriptionKeys not implemented")
}
func (UnimplementedOrganizationServiceServer) IsPremium(context.Context, *RequestByID) (*IsPremiumRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPremium not implemented")
}
func (UnimplementedOrganizationServiceServer) SetPremium(context.Context, *SetPremiumRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPremium not implemented")
}
func (UnimplementedOrganizationServiceServer) mustEmbedUnimplementedOrganizationServiceServer() {}
func (UnimplementedOrganizationServiceServer) testEmbeddedByValue()                             {}

// UnsafeOrganizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServiceServer will
// result in compilation errors.
type UnsafeOrganizationServiceServer interface {
	mustEmbedUnimplementedOrganizationServiceServer()
}

func RegisterOrganizationServiceServer(s grpc.ServiceRegistrar, srv OrganizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrganizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrganizationService_ServiceDesc, srv)
}

func _OrganizationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Create(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Get(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Update(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetPartnerChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetPartnerChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetPartnerChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetPartnerChildren(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListFlat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListFlat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListFlat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListFlat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetApiSubscriptionKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetApiSubscriptionKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetApiSubscriptionKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetApiSubscriptionKeys(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_IsPremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).IsPremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_IsPremium_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).IsPremium(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_SetPremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPremiumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).SetPremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_SetPremium_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).SetPremium(ctx, req.(*SetPremiumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationService_ServiceDesc is the grpc.ServiceDesc for OrganizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organization.OrganizationService",
	HandlerType: (*OrganizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrganizationService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _OrganizationService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OrganizationService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrganizationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrganizationService_Delete_Handler,
		},
		{
			MethodName: "GetPartnerChildren",
			Handler:    _OrganizationService_GetPartnerChildren_Handler,
		},
		{
			MethodName: "ListFlat",
			Handler:    _OrganizationService_ListFlat_Handler,
		},
		{
			MethodName: "GetApiSubscriptionKeys",
			Handler:    _OrganizationService_GetApiSubscriptionKeys_Handler,
		},
		{
			MethodName: "IsPremium",
			Handler:    _OrganizationService_IsPremium_Handler,
		},
		{
			MethodName: "SetPremium",
			Handler:    _OrganizationService_SetPremium_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization/organization.proto",
}

const (
	InvitationCodeService_SendInvitation_FullMethodName          = "/organization.InvitationCodeService/SendInvitation"
	InvitationCodeService_ResendInvitation_FullMethodName        = "/organization.InvitationCodeService/ResendInvitation"
	InvitationCodeService_ListInvitations_FullMethodName         = "/organization.InvitationCodeService/ListInvitations"
	InvitationCodeService_RevokeInvitation_FullMethodName        = "/organization.InvitationCodeService/RevokeInvitation"
	InvitationCodeService_CheckInvitation_FullMethodName         = "/organization.InvitationCodeService/CheckInvitation"
	InvitationCodeService_AcceptInvitation_FullMethodName        = "/organization.InvitationCodeService/AcceptInvitation"
	InvitationCodeService_AcceptInvitationByEmail_FullMethodName = "/organization.InvitationCodeService/AcceptInvitationByEmail"
)

// InvitationCodeServiceClient is the client API for InvitationCodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitationCodeServiceClient interface {
	SendInvitation(ctx context.Context, in *SendInvitationReq, opts ...grpc.CallOption) (*Empty, error)
	ResendInvitation(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Empty, error)
	ListInvitations(ctx context.Context, in *RequestInvByID, opts ...grpc.CallOption) (*ListInvitationsRes, error)
	RevokeInvitation(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Empty, error)
	CheckInvitation(ctx context.Context, in *CheckInvitationRequest, opts ...grpc.CallOption) (*CheckInvitationResponse, error)
	AcceptInvitation(ctx context.Context, in *AcceptInvitationReq, opts ...grpc.CallOption) (*Empty, error)
	AcceptInvitationByEmail(ctx context.Context, in *AcceptInvitationByEmailReq, opts ...grpc.CallOption) (*Empty, error)
}

type invitationCodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitationCodeServiceClient(cc grpc.ClientConnInterface) InvitationCodeServiceClient {
	return &invitationCodeServiceClient{cc}
}

func (c *invitationCodeServiceClient) SendInvitation(ctx context.Context, in *SendInvitationReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, InvitationCodeService_SendInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationCodeServiceClient) ResendInvitation(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, InvitationCodeService_ResendInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationCodeServiceClient) ListInvitations(ctx context.Context, in *RequestInvByID, opts ...grpc.CallOption) (*ListInvitationsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvitationsRes)
	err := c.cc.Invoke(ctx, InvitationCodeService_ListInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationCodeServiceClient) RevokeInvitation(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, InvitationCodeService_RevokeInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationCodeServiceClient) CheckInvitation(ctx context.Context, in *CheckInvitationRequest, opts ...grpc.CallOption) (*CheckInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckInvitationResponse)
	err := c.cc.Invoke(ctx, InvitationCodeService_CheckInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationCodeServiceClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, InvitationCodeService_AcceptInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationCodeServiceClient) AcceptInvitationByEmail(ctx context.Context, in *AcceptInvitationByEmailReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, InvitationCodeService_AcceptInvitationByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitationCodeServiceServer is the server API for InvitationCodeService service.
// All implementations must embed UnimplementedInvitationCodeServiceServer
// for forward compatibility.
type InvitationCodeServiceServer interface {
	SendInvitation(context.Context, *SendInvitationReq) (*Empty, error)
	ResendInvitation(context.Context, *RequestByID) (*Empty, error)
	ListInvitations(context.Context, *RequestInvByID) (*ListInvitationsRes, error)
	RevokeInvitation(context.Context, *RequestByID) (*Empty, error)
	CheckInvitation(context.Context, *CheckInvitationRequest) (*CheckInvitationResponse, error)
	AcceptInvitation(context.Context, *AcceptInvitationReq) (*Empty, error)
	AcceptInvitationByEmail(context.Context, *AcceptInvitationByEmailReq) (*Empty, error)
	mustEmbedUnimplementedInvitationCodeServiceServer()
}

// UnimplementedInvitationCodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInvitationCodeServiceServer struct{}

func (UnimplementedInvitationCodeServiceServer) SendInvitation(context.Context, *SendInvitationReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvitation not implemented")
}
func (UnimplementedInvitationCodeServiceServer) ResendInvitation(context.Context, *RequestByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendInvitation not implemented")
}
func (UnimplementedInvitationCodeServiceServer) ListInvitations(context.Context, *RequestInvByID) (*ListInvitationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitations not implemented")
}
func (UnimplementedInvitationCodeServiceServer) RevokeInvitation(context.Context, *RequestByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInvitation not implemented")
}
func (UnimplementedInvitationCodeServiceServer) CheckInvitation(context.Context, *CheckInvitationRequest) (*CheckInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInvitation not implemented")
}
func (UnimplementedInvitationCodeServiceServer) AcceptInvitation(context.Context, *AcceptInvitationReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedInvitationCodeServiceServer) AcceptInvitationByEmail(context.Context, *AcceptInvitationByEmailReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitationByEmail not implemented")
}
func (UnimplementedInvitationCodeServiceServer) mustEmbedUnimplementedInvitationCodeServiceServer() {}
func (UnimplementedInvitationCodeServiceServer) testEmbeddedByValue()                               {}

// UnsafeInvitationCodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitationCodeServiceServer will
// result in compilation errors.
type UnsafeInvitationCodeServiceServer interface {
	mustEmbedUnimplementedInvitationCodeServiceServer()
}

func RegisterInvitationCodeServiceServer(s grpc.ServiceRegistrar, srv InvitationCodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedInvitationCodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InvitationCodeService_ServiceDesc, srv)
}

func _InvitationCodeService_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvitationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).SendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationCodeService_SendInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).SendInvitation(ctx, req.(*SendInvitationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationCodeService_ResendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).ResendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationCodeService_ResendInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).ResendInvitation(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationCodeService_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInvByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationCodeService_ListInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).ListInvitations(ctx, req.(*RequestInvByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationCodeService_RevokeInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).RevokeInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationCodeService_RevokeInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).RevokeInvitation(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationCodeService_CheckInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).CheckInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationCodeService_CheckInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).CheckInvitation(ctx, req.(*CheckInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationCodeService_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationCodeService_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).AcceptInvitation(ctx, req.(*AcceptInvitationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationCodeService_AcceptInvitationByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).AcceptInvitationByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationCodeService_AcceptInvitationByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).AcceptInvitationByEmail(ctx, req.(*AcceptInvitationByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InvitationCodeService_ServiceDesc is the grpc.ServiceDesc for InvitationCodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvitationCodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organization.InvitationCodeService",
	HandlerType: (*InvitationCodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInvitation",
			Handler:    _InvitationCodeService_SendInvitation_Handler,
		},
		{
			MethodName: "ResendInvitation",
			Handler:    _InvitationCodeService_ResendInvitation_Handler,
		},
		{
			MethodName: "ListInvitations",
			Handler:    _InvitationCodeService_ListInvitations_Handler,
		},
		{
			MethodName: "RevokeInvitation",
			Handler:    _InvitationCodeService_RevokeInvitation_Handler,
		},
		{
			MethodName: "CheckInvitation",
			Handler:    _InvitationCodeService_CheckInvitation_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _InvitationCodeService_AcceptInvitation_Handler,
		},
		{
			MethodName: "AcceptInvitationByEmail",
			Handler:    _InvitationCodeService_AcceptInvitationByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization/organization.proto",
}

const (
	SwitchOrgService_CreateSwitchOrg_FullMethodName        = "/organization.SwitchOrgService/CreateSwitchOrg"
	SwitchOrgService_PatchSwitchOrg_FullMethodName         = "/organization.SwitchOrgService/PatchSwitchOrg"
	SwitchOrgService_GetSwitchOrg_FullMethodName           = "/organization.SwitchOrgService/GetSwitchOrg"
	SwitchOrgService_RemoveOrgFromSwitchOrg_FullMethodName = "/organization.SwitchOrgService/RemoveOrgFromSwitchOrg"
	SwitchOrgService_RemoveSwitchOrg_FullMethodName        = "/organization.SwitchOrgService/RemoveSwitchOrg"
)

// SwitchOrgServiceClient is the client API for SwitchOrgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwitchOrgServiceClient interface {
	CreateSwitchOrg(ctx context.Context, in *SwitchOrgCreateReq, opts ...grpc.CallOption) (*Empty, error)
	PatchSwitchOrg(ctx context.Context, in *SwitchOrg, opts ...grpc.CallOption) (*Empty, error)
	GetSwitchOrg(ctx context.Context, in *RequestByUserId, opts ...grpc.CallOption) (*SwitchOrg, error)
	RemoveOrgFromSwitchOrg(ctx context.Context, in *RequestByUserId, opts ...grpc.CallOption) (*Empty, error)
	RemoveSwitchOrg(ctx context.Context, in *RequestByUserId, opts ...grpc.CallOption) (*Empty, error)
}

type switchOrgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwitchOrgServiceClient(cc grpc.ClientConnInterface) SwitchOrgServiceClient {
	return &switchOrgServiceClient{cc}
}

func (c *switchOrgServiceClient) CreateSwitchOrg(ctx context.Context, in *SwitchOrgCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SwitchOrgService_CreateSwitchOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchOrgServiceClient) PatchSwitchOrg(ctx context.Context, in *SwitchOrg, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SwitchOrgService_PatchSwitchOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchOrgServiceClient) GetSwitchOrg(ctx context.Context, in *RequestByUserId, opts ...grpc.CallOption) (*SwitchOrg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwitchOrg)
	err := c.cc.Invoke(ctx, SwitchOrgService_GetSwitchOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchOrgServiceClient) RemoveOrgFromSwitchOrg(ctx context.Context, in *RequestByUserId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SwitchOrgService_RemoveOrgFromSwitchOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchOrgServiceClient) RemoveSwitchOrg(ctx context.Context, in *RequestByUserId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SwitchOrgService_RemoveSwitchOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchOrgServiceServer is the server API for SwitchOrgService service.
// All implementations must embed UnimplementedSwitchOrgServiceServer
// for forward compatibility.
type SwitchOrgServiceServer interface {
	CreateSwitchOrg(context.Context, *SwitchOrgCreateReq) (*Empty, error)
	PatchSwitchOrg(context.Context, *SwitchOrg) (*Empty, error)
	GetSwitchOrg(context.Context, *RequestByUserId) (*SwitchOrg, error)
	RemoveOrgFromSwitchOrg(context.Context, *RequestByUserId) (*Empty, error)
	RemoveSwitchOrg(context.Context, *RequestByUserId) (*Empty, error)
	mustEmbedUnimplementedSwitchOrgServiceServer()
}

// UnimplementedSwitchOrgServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSwitchOrgServiceServer struct{}

func (UnimplementedSwitchOrgServiceServer) CreateSwitchOrg(context.Context, *SwitchOrgCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwitchOrg not implemented")
}
func (UnimplementedSwitchOrgServiceServer) PatchSwitchOrg(context.Context, *SwitchOrg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSwitchOrg not implemented")
}
func (UnimplementedSwitchOrgServiceServer) GetSwitchOrg(context.Context, *RequestByUserId) (*SwitchOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchOrg not implemented")
}
func (UnimplementedSwitchOrgServiceServer) RemoveOrgFromSwitchOrg(context.Context, *RequestByUserId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgFromSwitchOrg not implemented")
}
func (UnimplementedSwitchOrgServiceServer) RemoveSwitchOrg(context.Context, *RequestByUserId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSwitchOrg not implemented")
}
func (UnimplementedSwitchOrgServiceServer) mustEmbedUnimplementedSwitchOrgServiceServer() {}
func (UnimplementedSwitchOrgServiceServer) testEmbeddedByValue()                          {}

// UnsafeSwitchOrgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwitchOrgServiceServer will
// result in compilation errors.
type UnsafeSwitchOrgServiceServer interface {
	mustEmbedUnimplementedSwitchOrgServiceServer()
}

func RegisterSwitchOrgServiceServer(s grpc.ServiceRegistrar, srv SwitchOrgServiceServer) {
	// If the following call pancis, it indicates UnimplementedSwitchOrgServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SwitchOrgService_ServiceDesc, srv)
}

func _SwitchOrgService_CreateSwitchOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchOrgCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchOrgServiceServer).CreateSwitchOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchOrgService_CreateSwitchOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchOrgServiceServer).CreateSwitchOrg(ctx, req.(*SwitchOrgCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchOrgService_PatchSwitchOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchOrgServiceServer).PatchSwitchOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchOrgService_PatchSwitchOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchOrgServiceServer).PatchSwitchOrg(ctx, req.(*SwitchOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchOrgService_GetSwitchOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchOrgServiceServer).GetSwitchOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchOrgService_GetSwitchOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchOrgServiceServer).GetSwitchOrg(ctx, req.(*RequestByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchOrgService_RemoveOrgFromSwitchOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchOrgServiceServer).RemoveOrgFromSwitchOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchOrgService_RemoveOrgFromSwitchOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchOrgServiceServer).RemoveOrgFromSwitchOrg(ctx, req.(*RequestByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchOrgService_RemoveSwitchOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchOrgServiceServer).RemoveSwitchOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchOrgService_RemoveSwitchOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchOrgServiceServer).RemoveSwitchOrg(ctx, req.(*RequestByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

// SwitchOrgService_ServiceDesc is the grpc.ServiceDesc for SwitchOrgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwitchOrgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organization.SwitchOrgService",
	HandlerType: (*SwitchOrgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSwitchOrg",
			Handler:    _SwitchOrgService_CreateSwitchOrg_Handler,
		},
		{
			MethodName: "PatchSwitchOrg",
			Handler:    _SwitchOrgService_PatchSwitchOrg_Handler,
		},
		{
			MethodName: "GetSwitchOrg",
			Handler:    _SwitchOrgService_GetSwitchOrg_Handler,
		},
		{
			MethodName: "RemoveOrgFromSwitchOrg",
			Handler:    _SwitchOrgService_RemoveOrgFromSwitchOrg_Handler,
		},
		{
			MethodName: "RemoveSwitchOrg",
			Handler:    _SwitchOrgService_RemoveSwitchOrg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization/organization.proto",
}
