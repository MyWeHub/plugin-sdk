// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: schema/schema.proto

package schema

import (
	auditlog "github.com/MyWeHub/plugin-sdk/gen/auditlog"
	_ "github.com/amsokol/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReferencePayloadType int32

const (
	ReferencePayloadType_JSON ReferencePayloadType = 0
	ReferencePayloadType_OAS  ReferencePayloadType = 1
	ReferencePayloadType_CSV  ReferencePayloadType = 2
	ReferencePayloadType_HL7  ReferencePayloadType = 3
)

// Enum value maps for ReferencePayloadType.
var (
	ReferencePayloadType_name = map[int32]string{
		0: "JSON",
		1: "OAS",
		2: "CSV",
		3: "HL7",
	}
	ReferencePayloadType_value = map[string]int32{
		"JSON": 0,
		"OAS":  1,
		"CSV":  2,
		"HL7":  3,
	}
)

func (x ReferencePayloadType) Enum() *ReferencePayloadType {
	p := new(ReferencePayloadType)
	*p = x
	return p
}

func (x ReferencePayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferencePayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_schema_proto_enumTypes[0].Descriptor()
}

func (ReferencePayloadType) Type() protoreflect.EnumType {
	return &file_schema_schema_proto_enumTypes[0]
}

func (x ReferencePayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferencePayloadType.Descriptor instead.
func (ReferencePayloadType) EnumDescriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{0}
}

type Status int32

const (
	Status_DRAFT     Status = 0
	Status_READY     Status = 1
	Status_PUBLISHED Status = 2
	Status_TRASH     Status = 3
	Status_INACTIVE  Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "DRAFT",
		1: "READY",
		2: "PUBLISHED",
		3: "TRASH",
		4: "INACTIVE",
	}
	Status_value = map[string]int32{
		"DRAFT":     0,
		"READY":     1,
		"PUBLISHED": 2,
		"TRASH":     3,
		"INACTIVE":  4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_schema_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_schema_schema_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{1}
}

type ValueType int32

const (
	ValueType_NUMBER   ValueType = 0
	ValueType_STRING   ValueType = 1
	ValueType_BYTE     ValueType = 2
	ValueType_DATE     ValueType = 3
	ValueType_DATETIME ValueType = 4
	ValueType_BOOLEAN  ValueType = 5
	ValueType_OBJECT   ValueType = 6
	ValueType_ARRAY    ValueType = 7
	ValueType_ANY      ValueType = 8
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "NUMBER",
		1: "STRING",
		2: "BYTE",
		3: "DATE",
		4: "DATETIME",
		5: "BOOLEAN",
		6: "OBJECT",
		7: "ARRAY",
		8: "ANY",
	}
	ValueType_value = map[string]int32{
		"NUMBER":   0,
		"STRING":   1,
		"BYTE":     2,
		"DATE":     3,
		"DATETIME": 4,
		"BOOLEAN":  5,
		"OBJECT":   6,
		"ARRAY":    7,
		"ANY":      8,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_schema_proto_enumTypes[2].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_schema_schema_proto_enumTypes[2]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{2}
}

type CreateSchemaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ParentGroup string `protobuf:"bytes,3,opt,name=parentGroup,proto3" json:"parentGroup,omitempty"`
	ClientId    string `protobuf:"bytes,4,opt,name=clientId,proto3" json:"clientId,omitempty"`
}

func (x *CreateSchemaReq) Reset() {
	*x = CreateSchemaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchemaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchemaReq) ProtoMessage() {}

func (x *CreateSchemaReq) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchemaReq.ProtoReflect.Descriptor instead.
func (*CreateSchemaReq) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSchemaReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSchemaReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSchemaReq) GetParentGroup() string {
	if x != nil {
		return x.ParentGroup
	}
	return ""
}

func (x *CreateSchemaReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type CreateSchemaVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId         string            `protobuf:"bytes,2,opt,name=schemaId,proto3" json:"schemaId,omitempty"`
	Schema           *FieldSchema      `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Api              string            `protobuf:"bytes,4,opt,name=api,proto3" json:"api,omitempty"`
	ApiId            string            `protobuf:"bytes,5,opt,name=apiId,proto3" json:"apiId,omitempty"`
	Version          string            `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Description      string            `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	ClientId         string            `protobuf:"bytes,8,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ReferencePayload *ReferencePayload `protobuf:"bytes,9,opt,name=referencePayload,proto3" json:"referencePayload"`
}

func (x *CreateSchemaVersionReq) Reset() {
	*x = CreateSchemaVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchemaVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchemaVersionReq) ProtoMessage() {}

func (x *CreateSchemaVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchemaVersionReq.ProtoReflect.Descriptor instead.
func (*CreateSchemaVersionReq) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSchemaVersionReq) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *CreateSchemaVersionReq) GetSchema() *FieldSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateSchemaVersionReq) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *CreateSchemaVersionReq) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

func (x *CreateSchemaVersionReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateSchemaVersionReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSchemaVersionReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateSchemaVersionReq) GetReferencePayload() *ReferencePayload {
	if x != nil {
		return x.ReferencePayload
	}
	return nil
}

type SchemaWithVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name         string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ParentGroup  string         `protobuf:"bytes,4,opt,name=parentGroup,proto3" json:"parentGroup,omitempty"`
	ClientId     string         `protobuf:"bytes,5,opt,name=clientId,proto3" json:"clientId,omitempty"`
	PartitionKey string         `protobuf:"bytes,6,opt,name=partitionKey,proto3" json:"partitionKey,omitempty"`
	ResourceType string         `protobuf:"bytes,7,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Version      *SchemaVersion `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SchemaWithVersion) Reset() {
	*x = SchemaWithVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaWithVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaWithVersion) ProtoMessage() {}

func (x *SchemaWithVersion) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaWithVersion.ProtoReflect.Descriptor instead.
func (*SchemaWithVersion) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{2}
}

func (x *SchemaWithVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SchemaWithVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaWithVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SchemaWithVersion) GetParentGroup() string {
	if x != nil {
		return x.ParentGroup
	}
	return ""
}

func (x *SchemaWithVersion) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SchemaWithVersion) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *SchemaWithVersion) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SchemaWithVersion) GetVersion() *SchemaVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId                  *string `protobuf:"bytes,1,opt,name=groupId,proto3,oneof" json:"groupId,omitempty"`
	Status                   *Status `protobuf:"varint,2,opt,name=status,proto3,enum=schema.Status,oneof" json:"status,omitempty"`
	OnlyGetChildWithClientID *string `protobuf:"bytes,3,opt,name=onlyGetChildWithClientID,proto3,oneof" json:"onlyGetChildWithClientID,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{3}
}

func (x *Filter) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *Filter) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Status_DRAFT
}

func (x *Filter) GetOnlyGetChildWithClientID() string {
	if x != nil && x.OnlyGetChildWithClientID != nil {
		return *x.OnlyGetChildWithClientID
	}
	return ""
}

type CloneSchemaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ParentGroup string `protobuf:"bytes,4,opt,name=parentGroup,proto3" json:"parentGroup,omitempty"`
}

func (x *CloneSchemaReq) Reset() {
	*x = CloneSchemaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneSchemaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneSchemaReq) ProtoMessage() {}

func (x *CloneSchemaReq) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneSchemaReq.ProtoReflect.Descriptor instead.
func (*CloneSchemaReq) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{4}
}

func (x *CloneSchemaReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloneSchemaReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloneSchemaReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CloneSchemaReq) GetParentGroup() string {
	if x != nil {
		return x.ParentGroup
	}
	return ""
}

type CloneSchemaVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Version     string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CloneSchemaVersionReq) Reset() {
	*x = CloneSchemaVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneSchemaVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneSchemaVersionReq) ProtoMessage() {}

func (x *CloneSchemaVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneSchemaVersionReq.ProtoReflect.Descriptor instead.
func (*CloneSchemaVersionReq) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{5}
}

func (x *CloneSchemaVersionReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloneSchemaVersionReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CloneSchemaVersionReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type MoveSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	ParentGroup string `protobuf:"bytes,2,opt,name=parentGroup,proto3" json:"parentGroup,omitempty"`
}

func (x *MoveSchema) Reset() {
	*x = MoveSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveSchema) ProtoMessage() {}

func (x *MoveSchema) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveSchema.ProtoReflect.Descriptor instead.
func (*MoveSchema) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{6}
}

func (x *MoveSchema) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MoveSchema) GetParentGroup() string {
	if x != nil {
		return x.ParentGroup
	}
	return ""
}

type TrashSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Trash bool   `protobuf:"varint,2,opt,name=trash,proto3" json:"trash,omitempty"`
}

func (x *TrashSchema) Reset() {
	*x = TrashSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrashSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrashSchema) ProtoMessage() {}

func (x *TrashSchema) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrashSchema.ProtoReflect.Descriptor instead.
func (*TrashSchema) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{7}
}

func (x *TrashSchema) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrashSchema) GetTrash() bool {
	if x != nil {
		return x.Trash
	}
	return false
}

type Schemas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemas []*Schema `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
}

func (x *Schemas) Reset() {
	*x = Schemas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schemas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schemas) ProtoMessage() {}

func (x *Schemas) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schemas.ProtoReflect.Descriptor instead.
func (*Schemas) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{8}
}

func (x *Schemas) GetSchemas() []*Schema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type Versions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []*SchemaVersion `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *Versions) Reset() {
	*x = Versions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Versions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Versions) ProtoMessage() {}

func (x *Versions) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Versions.ProtoReflect.Descriptor instead.
func (*Versions) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{9}
}

func (x *Versions) GetVersions() []*SchemaVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{10}
}

type IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdRequest) Reset() {
	*x = IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRequest) ProtoMessage() {}

func (x *IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRequest.ProtoReflect.Descriptor instead.
func (*IdRequest) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{11}
}

func (x *IdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IdsRequest) Reset() {
	*x = IdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdsRequest) ProtoMessage() {}

func (x *IdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdsRequest.ProtoReflect.Descriptor instead.
func (*IdsRequest) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{12}
}

func (x *IdsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name            string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ParentGroup     string             `protobuf:"bytes,4,opt,name=parentGroup,proto3" json:"parentGroup,omitempty"`
	ClientId        string             `protobuf:"bytes,5,opt,name=clientId,proto3" json:"clientId,omitempty"`
	PartitionKey    string             `protobuf:"bytes,6,opt,name=partitionKey,proto3" json:"partitionKey,omitempty"`
	ResourceType    string             `protobuf:"bytes,7,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	VersionMetadata []*VersionMetadata `protobuf:"bytes,8,rep,name=versionMetadata,proto3" json:"versionMetadata,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{13}
}

func (x *Schema) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Schema) GetParentGroup() string {
	if x != nil {
		return x.ParentGroup
	}
	return ""
}

func (x *Schema) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Schema) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *Schema) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Schema) GetVersionMetadata() []*VersionMetadata {
	if x != nil {
		return x.VersionMetadata
	}
	return nil
}

type VersionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Api         string                 `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`
	ApiId       string                 `protobuf:"bytes,3,opt,name=apiId,proto3" json:"apiId,omitempty"`
	Version     string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Status      Status                 `protobuf:"varint,5,opt,name=status,proto3,enum=schema.Status" json:"status"`
	Description string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	CreateDate  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createDate,proto3" json:"createDate,omitempty"`
	ModifyDate  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modifyDate,proto3" json:"modifyDate,omitempty"`
}

func (x *VersionMetadata) Reset() {
	*x = VersionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionMetadata) ProtoMessage() {}

func (x *VersionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionMetadata.ProtoReflect.Descriptor instead.
func (*VersionMetadata) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{14}
}

func (x *VersionMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VersionMetadata) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *VersionMetadata) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

func (x *VersionMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionMetadata) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_DRAFT
}

func (x *VersionMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VersionMetadata) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *VersionMetadata) GetModifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyDate
	}
	return nil
}

type SchemaVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	SchemaId         string                 `protobuf:"bytes,2,opt,name=schemaId,proto3" json:"schemaId,omitempty"`
	Schema           *FieldSchema           `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Api              string                 `protobuf:"bytes,4,opt,name=api,proto3" json:"api,omitempty"`
	ApiId            string                 `protobuf:"bytes,5,opt,name=apiId,proto3" json:"apiId,omitempty"`
	Version          string                 `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Status           Status                 `protobuf:"varint,7,opt,name=status,proto3,enum=schema.Status" json:"status"`
	Description      string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	CreateDate       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createDate,proto3" json:"createDate,omitempty"`
	ModifyDate       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=modifyDate,proto3" json:"modifyDate,omitempty"`
	PartitionKey     string                 `protobuf:"bytes,11,opt,name=partitionKey,proto3" json:"partitionKey,omitempty"`
	ResourceType     string                 `protobuf:"bytes,12,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Hide             *bool                  `protobuf:"varint,13,opt,name=hide,proto3,oneof" json:"hide,omitempty"`
	ClientId         string                 `protobuf:"bytes,14,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ReferencePayload *ReferencePayload      `protobuf:"bytes,15,opt,name=referencePayload,proto3" json:"referencePayload"`
}

func (x *SchemaVersion) Reset() {
	*x = SchemaVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaVersion) ProtoMessage() {}

func (x *SchemaVersion) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaVersion.ProtoReflect.Descriptor instead.
func (*SchemaVersion) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{15}
}

func (x *SchemaVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SchemaVersion) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *SchemaVersion) GetSchema() *FieldSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SchemaVersion) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *SchemaVersion) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

func (x *SchemaVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SchemaVersion) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_DRAFT
}

func (x *SchemaVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SchemaVersion) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *SchemaVersion) GetModifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyDate
	}
	return nil
}

func (x *SchemaVersion) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *SchemaVersion) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SchemaVersion) GetHide() bool {
	if x != nil && x.Hide != nil {
		return *x.Hide
	}
	return false
}

func (x *SchemaVersion) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SchemaVersion) GetReferencePayload() *ReferencePayload {
	if x != nil {
		return x.ReferencePayload
	}
	return nil
}

type UpdateSchemaVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	SchemaId         string                     `protobuf:"bytes,2,opt,name=schemaId,proto3" json:"schemaId,omitempty"`
	Schema           *FieldSchema               `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Api              string                     `protobuf:"bytes,4,opt,name=api,proto3" json:"api,omitempty"`
	ApiId            string                     `protobuf:"bytes,5,opt,name=apiId,proto3" json:"apiId,omitempty"`
	Version          string                     `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Status           Status                     `protobuf:"varint,7,opt,name=status,proto3,enum=schema.Status" json:"status"`
	Description      string                     `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	CreateDate       *timestamppb.Timestamp     `protobuf:"bytes,9,opt,name=createDate,proto3" json:"createDate,omitempty"`
	ModifyDate       *timestamppb.Timestamp     `protobuf:"bytes,10,opt,name=modifyDate,proto3" json:"modifyDate,omitempty"`
	PartitionKey     string                     `protobuf:"bytes,11,opt,name=partitionKey,proto3" json:"partitionKey,omitempty"`
	ResourceType     string                     `protobuf:"bytes,12,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Hide             *bool                      `protobuf:"varint,13,opt,name=hide,proto3,oneof" json:"hide,omitempty"`
	ClientId         string                     `protobuf:"bytes,14,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ReferencePayload *ReferencePayload          `protobuf:"bytes,15,opt,name=referencePayload,proto3" json:"referencePayload"`
	Log              *auditlog.CreateLogRequest `protobuf:"bytes,16,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *UpdateSchemaVersion) Reset() {
	*x = UpdateSchemaVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchemaVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchemaVersion) ProtoMessage() {}

func (x *UpdateSchemaVersion) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchemaVersion.ProtoReflect.Descriptor instead.
func (*UpdateSchemaVersion) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateSchemaVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSchemaVersion) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *UpdateSchemaVersion) GetSchema() *FieldSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *UpdateSchemaVersion) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *UpdateSchemaVersion) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

func (x *UpdateSchemaVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateSchemaVersion) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_DRAFT
}

func (x *UpdateSchemaVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSchemaVersion) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *UpdateSchemaVersion) GetModifyDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyDate
	}
	return nil
}

func (x *UpdateSchemaVersion) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *UpdateSchemaVersion) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *UpdateSchemaVersion) GetHide() bool {
	if x != nil && x.Hide != nil {
		return *x.Hide
	}
	return false
}

func (x *UpdateSchemaVersion) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UpdateSchemaVersion) GetReferencePayload() *ReferencePayload {
	if x != nil {
		return x.ReferencePayload
	}
	return nil
}

func (x *UpdateSchemaVersion) GetLog() *auditlog.CreateLogRequest {
	if x != nil {
		return x.Log
	}
	return nil
}

type ReferencePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte               `protobuf:"bytes,1,opt,name=value,proto3" json:"value"`
	Type  ReferencePayloadType `protobuf:"varint,2,opt,name=type,proto3,enum=schema.ReferencePayloadType" json:"type"`
}

func (x *ReferencePayload) Reset() {
	*x = ReferencePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferencePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferencePayload) ProtoMessage() {}

func (x *ReferencePayload) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferencePayload.ProtoReflect.Descriptor instead.
func (*ReferencePayload) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{17}
}

func (x *ReferencePayload) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReferencePayload) GetType() ReferencePayloadType {
	if x != nil {
		return x.Type
	}
	return ReferencePayloadType_JSON
}

type FieldSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data     *FieldSchemaDef `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Children []*FieldSchema  `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *FieldSchema) Reset() {
	*x = FieldSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSchema) ProtoMessage() {}

func (x *FieldSchema) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSchema.ProtoReflect.Descriptor instead.
func (*FieldSchema) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{18}
}

func (x *FieldSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldSchema) GetData() *FieldSchemaDef {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FieldSchema) GetChildren() []*FieldSchema {
	if x != nil {
		return x.Children
	}
	return nil
}

type FieldSchemaDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        ValueType `protobuf:"varint,2,opt,name=type,proto3,enum=schema.ValueType" json:"type,omitempty"`
	Mandatory   *bool     `protobuf:"varint,3,opt,name=mandatory,proto3,oneof" json:"mandatory,omitempty"`
	Subtype     *string   `protobuf:"bytes,4,opt,name=subtype,proto3,oneof" json:"subtype,omitempty"`
	SubtypeRef  *string   `protobuf:"bytes,5,opt,name=subtypeRef,proto3,oneof" json:"subtypeRef,omitempty"`
	Cardinality *string   `protobuf:"bytes,6,opt,name=cardinality,proto3,oneof" json:"cardinality,omitempty"`
	Regex       *string   `protobuf:"bytes,7,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
	List        *List     `protobuf:"bytes,8,opt,name=list,proto3,oneof" json:"list,omitempty"`
	Hide        *bool     `protobuf:"varint,9,opt,name=hide,proto3,oneof" json:"hide,omitempty"`
	Maxlength   *int32    `protobuf:"varint,10,opt,name=maxlength,proto3,oneof" json:"maxlength,omitempty"`
}

func (x *FieldSchemaDef) Reset() {
	*x = FieldSchemaDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSchemaDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSchemaDef) ProtoMessage() {}

func (x *FieldSchemaDef) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSchemaDef.ProtoReflect.Descriptor instead.
func (*FieldSchemaDef) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{19}
}

func (x *FieldSchemaDef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FieldSchemaDef) GetType() ValueType {
	if x != nil {
		return x.Type
	}
	return ValueType_NUMBER
}

func (x *FieldSchemaDef) GetMandatory() bool {
	if x != nil && x.Mandatory != nil {
		return *x.Mandatory
	}
	return false
}

func (x *FieldSchemaDef) GetSubtype() string {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return ""
}

func (x *FieldSchemaDef) GetSubtypeRef() string {
	if x != nil && x.SubtypeRef != nil {
		return *x.SubtypeRef
	}
	return ""
}

func (x *FieldSchemaDef) GetCardinality() string {
	if x != nil && x.Cardinality != nil {
		return *x.Cardinality
	}
	return ""
}

func (x *FieldSchemaDef) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

func (x *FieldSchemaDef) GetList() *List {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FieldSchemaDef) GetHide() bool {
	if x != nil && x.Hide != nil {
		return *x.Hide
	}
	return false
}

func (x *FieldSchemaDef) GetMaxlength() int32 {
	if x != nil && x.Maxlength != nil {
		return *x.Maxlength
	}
	return 0
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{20}
}

func (x *List) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type SchemaCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DRAFT     int32 `protobuf:"varint,1,opt,name=DRAFT,proto3" json:"DRAFT,omitempty"`
	READY     int32 `protobuf:"varint,2,opt,name=READY,proto3" json:"READY,omitempty"`
	PUBLISHED int32 `protobuf:"varint,3,opt,name=PUBLISHED,proto3" json:"PUBLISHED,omitempty"`
	TRASH     int32 `protobuf:"varint,4,opt,name=TRASH,proto3" json:"TRASH,omitempty"`
	INACTIVE  int32 `protobuf:"varint,5,opt,name=INACTIVE,proto3" json:"INACTIVE,omitempty"`
	All       int32 `protobuf:"varint,6,opt,name=All,proto3" json:"All,omitempty"`
}

func (x *SchemaCount) Reset() {
	*x = SchemaCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaCount) ProtoMessage() {}

func (x *SchemaCount) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaCount.ProtoReflect.Descriptor instead.
func (*SchemaCount) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{21}
}

func (x *SchemaCount) GetDRAFT() int32 {
	if x != nil {
		return x.DRAFT
	}
	return 0
}

func (x *SchemaCount) GetREADY() int32 {
	if x != nil {
		return x.READY
	}
	return 0
}

func (x *SchemaCount) GetPUBLISHED() int32 {
	if x != nil {
		return x.PUBLISHED
	}
	return 0
}

func (x *SchemaCount) GetTRASH() int32 {
	if x != nil {
		return x.TRASH
	}
	return 0
}

func (x *SchemaCount) GetINACTIVE() int32 {
	if x != nil {
		return x.INACTIVE
	}
	return 0
}

func (x *SchemaCount) GetAll() int32 {
	if x != nil {
		return x.All
	}
	return 0
}

type NameAndIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NameAndIdRequest) Reset() {
	*x = NameAndIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameAndIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameAndIdRequest) ProtoMessage() {}

func (x *NameAndIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameAndIdRequest.ProtoReflect.Descriptor instead.
func (*NameAndIdRequest) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{22}
}

func (x *NameAndIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NameAndIdRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_schema_schema_proto protoreflect.FileDescriptor

var file_schema_schema_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x1d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x74, 0x61, 0x67, 0x2f,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc5,
	0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x62, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x01, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x18, 0x6f, 0x6e, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x18, 0x6f, 0x6e, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x74, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f,
	0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x44, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x73, 0x68, 0x22,
	0x33, 0x0a, 0x07, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x22, 0x3d, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x31, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x0a, 0x09,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x06, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xb9, 0x02, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x69, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03,
	0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xfb, 0x04, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x69, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12,
	0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x68, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x68, 0x69,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x62, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x22, 0xaf,
	0x05, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f,
	0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x68, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x6f, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x64, 0x65,
	0x22, 0x7f, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0x9a, 0x84, 0x9e, 0x03, 0x0b,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x7e, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2f, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x22, 0xb6, 0x03, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x44, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x6c, 0x69, 0x73, 0x74,
	0x48, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68,
	0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x04, 0x68, 0x69, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6d, 0x61, 0x78, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x1c, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x53, 0x48, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x54, 0x52, 0x41, 0x53, 0x48, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x22, 0x36, 0x0a, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e,
	0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x3b,
	0x0a, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x41, 0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4c, 0x37, 0x10, 0x03, 0x2a, 0x46, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52,
	0x41, 0x53, 0x48, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x04, 0x2a, 0x72, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x59, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f,
	0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x07, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x08, 0x32, 0xe6, 0x0b, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x17, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x4c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x10, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x73, 0x68,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x36, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x44, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x48, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x13, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x16, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x4a, 0x0a, 0x12, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x47, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x36, 0x0a, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x41, 0x73, 0x54, 0x72, 0x61, 0x73, 0x68, 0x12, 0x13, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x1a, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x0f, 0x5a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schema_schema_proto_rawDescOnce sync.Once
	file_schema_schema_proto_rawDescData = file_schema_schema_proto_rawDesc
)

func file_schema_schema_proto_rawDescGZIP() []byte {
	file_schema_schema_proto_rawDescOnce.Do(func() {
		file_schema_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_schema_proto_rawDescData)
	})
	return file_schema_schema_proto_rawDescData
}

var file_schema_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_schema_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_schema_schema_proto_goTypes = []any{
	(ReferencePayloadType)(0),         // 0: schema.referencePayloadType
	(Status)(0),                       // 1: schema.Status
	(ValueType)(0),                    // 2: schema.ValueType
	(*CreateSchemaReq)(nil),           // 3: schema.CreateSchemaReq
	(*CreateSchemaVersionReq)(nil),    // 4: schema.CreateSchemaVersionReq
	(*SchemaWithVersion)(nil),         // 5: schema.SchemaWithVersion
	(*Filter)(nil),                    // 6: schema.Filter
	(*CloneSchemaReq)(nil),            // 7: schema.CloneSchemaReq
	(*CloneSchemaVersionReq)(nil),     // 8: schema.CloneSchemaVersionReq
	(*MoveSchema)(nil),                // 9: schema.MoveSchema
	(*TrashSchema)(nil),               // 10: schema.TrashSchema
	(*Schemas)(nil),                   // 11: schema.Schemas
	(*Versions)(nil),                  // 12: schema.Versions
	(*Empty)(nil),                     // 13: schema.Empty
	(*IdRequest)(nil),                 // 14: schema.IdRequest
	(*IdsRequest)(nil),                // 15: schema.IdsRequest
	(*Schema)(nil),                    // 16: schema.Schema
	(*VersionMetadata)(nil),           // 17: schema.VersionMetadata
	(*SchemaVersion)(nil),             // 18: schema.SchemaVersion
	(*UpdateSchemaVersion)(nil),       // 19: schema.UpdateSchemaVersion
	(*ReferencePayload)(nil),          // 20: schema.referencePayload
	(*FieldSchema)(nil),               // 21: schema.FieldSchema
	(*FieldSchemaDef)(nil),            // 22: schema.FieldSchemaDef
	(*List)(nil),                      // 23: schema.list
	(*SchemaCount)(nil),               // 24: schema.SchemaCount
	(*NameAndIdRequest)(nil),          // 25: schema.NameAndIdRequest
	(*timestamppb.Timestamp)(nil),     // 26: google.protobuf.Timestamp
	(*auditlog.CreateLogRequest)(nil), // 27: auditlog.CreateLogRequest
}
var file_schema_schema_proto_depIdxs = []int32{
	21, // 0: schema.CreateSchemaVersionReq.schema:type_name -> schema.FieldSchema
	20, // 1: schema.CreateSchemaVersionReq.referencePayload:type_name -> schema.referencePayload
	18, // 2: schema.SchemaWithVersion.version:type_name -> schema.SchemaVersion
	1,  // 3: schema.Filter.status:type_name -> schema.Status
	16, // 4: schema.Schemas.schemas:type_name -> schema.Schema
	18, // 5: schema.Versions.versions:type_name -> schema.SchemaVersion
	17, // 6: schema.Schema.versionMetadata:type_name -> schema.VersionMetadata
	1,  // 7: schema.VersionMetadata.status:type_name -> schema.Status
	26, // 8: schema.VersionMetadata.createDate:type_name -> google.protobuf.Timestamp
	26, // 9: schema.VersionMetadata.modifyDate:type_name -> google.protobuf.Timestamp
	21, // 10: schema.SchemaVersion.schema:type_name -> schema.FieldSchema
	1,  // 11: schema.SchemaVersion.status:type_name -> schema.Status
	26, // 12: schema.SchemaVersion.createDate:type_name -> google.protobuf.Timestamp
	26, // 13: schema.SchemaVersion.modifyDate:type_name -> google.protobuf.Timestamp
	20, // 14: schema.SchemaVersion.referencePayload:type_name -> schema.referencePayload
	21, // 15: schema.UpdateSchemaVersion.schema:type_name -> schema.FieldSchema
	1,  // 16: schema.UpdateSchemaVersion.status:type_name -> schema.Status
	26, // 17: schema.UpdateSchemaVersion.createDate:type_name -> google.protobuf.Timestamp
	26, // 18: schema.UpdateSchemaVersion.modifyDate:type_name -> google.protobuf.Timestamp
	20, // 19: schema.UpdateSchemaVersion.referencePayload:type_name -> schema.referencePayload
	27, // 20: schema.UpdateSchemaVersion.log:type_name -> auditlog.CreateLogRequest
	0,  // 21: schema.referencePayload.type:type_name -> schema.referencePayloadType
	22, // 22: schema.FieldSchema.data:type_name -> schema.FieldSchemaDef
	21, // 23: schema.FieldSchema.children:type_name -> schema.FieldSchema
	2,  // 24: schema.FieldSchemaDef.type:type_name -> schema.ValueType
	23, // 25: schema.FieldSchemaDef.list:type_name -> schema.list
	3,  // 26: schema.SchemaService.CreateSchema:input_type -> schema.CreateSchemaReq
	4,  // 27: schema.SchemaService.CreateSchemaVersion:input_type -> schema.CreateSchemaVersionReq
	5,  // 28: schema.SchemaService.CreateSchemaWithVersion:input_type -> schema.SchemaWithVersion
	12, // 29: schema.SchemaService.CreateVersions:input_type -> schema.Versions
	13, // 30: schema.SchemaService.ListSchemas:input_type -> schema.Empty
	13, // 31: schema.SchemaService.ListVersions:input_type -> schema.Empty
	6,  // 32: schema.SchemaService.ListSchemasWithVersions:input_type -> schema.Filter
	13, // 33: schema.SchemaService.ListTrashSchemas:input_type -> schema.Empty
	14, // 34: schema.SchemaService.GetSchema:input_type -> schema.IdRequest
	14, // 35: schema.SchemaService.GetVersion:input_type -> schema.IdRequest
	14, // 36: schema.SchemaService.GetSchemaWithVersions:input_type -> schema.IdRequest
	14, // 37: schema.SchemaService.GetSchemaWithVersion:input_type -> schema.IdRequest
	15, // 38: schema.SchemaService.GetVersionIdList:input_type -> schema.IdsRequest
	25, // 39: schema.SchemaService.GetSchemaByNameAndID:input_type -> schema.NameAndIdRequest
	25, // 40: schema.SchemaService.GetVersionByNameAndID:input_type -> schema.NameAndIdRequest
	14, // 41: schema.SchemaService.RemoveSchema:input_type -> schema.IdRequest
	14, // 42: schema.SchemaService.RemoveSchemaVersion:input_type -> schema.IdRequest
	7,  // 43: schema.SchemaService.CloneSchema:input_type -> schema.CloneSchemaReq
	8,  // 44: schema.SchemaService.CloneSchemaVersion:input_type -> schema.CloneSchemaVersionReq
	16, // 45: schema.SchemaService.SaveSchema:input_type -> schema.Schema
	19, // 46: schema.SchemaService.SaveSchemaVersion:input_type -> schema.UpdateSchemaVersion
	13, // 47: schema.SchemaService.GetSchemasCount:input_type -> schema.Empty
	14, // 48: schema.SchemaService.GetFieldSchema:input_type -> schema.IdRequest
	9,  // 49: schema.SchemaService.MoveSchemaToGroup:input_type -> schema.MoveSchema
	10, // 50: schema.SchemaService.MarkSchemaAsTrash:input_type -> schema.TrashSchema
	16, // 51: schema.SchemaService.CreateSchema:output_type -> schema.Schema
	18, // 52: schema.SchemaService.CreateSchemaVersion:output_type -> schema.SchemaVersion
	5,  // 53: schema.SchemaService.CreateSchemaWithVersion:output_type -> schema.SchemaWithVersion
	12, // 54: schema.SchemaService.CreateVersions:output_type -> schema.Versions
	11, // 55: schema.SchemaService.ListSchemas:output_type -> schema.Schemas
	12, // 56: schema.SchemaService.ListVersions:output_type -> schema.Versions
	11, // 57: schema.SchemaService.ListSchemasWithVersions:output_type -> schema.Schemas
	11, // 58: schema.SchemaService.ListTrashSchemas:output_type -> schema.Schemas
	16, // 59: schema.SchemaService.GetSchema:output_type -> schema.Schema
	18, // 60: schema.SchemaService.GetVersion:output_type -> schema.SchemaVersion
	16, // 61: schema.SchemaService.GetSchemaWithVersions:output_type -> schema.Schema
	5,  // 62: schema.SchemaService.GetSchemaWithVersion:output_type -> schema.SchemaWithVersion
	15, // 63: schema.SchemaService.GetVersionIdList:output_type -> schema.IdsRequest
	16, // 64: schema.SchemaService.GetSchemaByNameAndID:output_type -> schema.Schema
	18, // 65: schema.SchemaService.GetVersionByNameAndID:output_type -> schema.SchemaVersion
	13, // 66: schema.SchemaService.RemoveSchema:output_type -> schema.Empty
	13, // 67: schema.SchemaService.RemoveSchemaVersion:output_type -> schema.Empty
	16, // 68: schema.SchemaService.CloneSchema:output_type -> schema.Schema
	18, // 69: schema.SchemaService.CloneSchemaVersion:output_type -> schema.SchemaVersion
	16, // 70: schema.SchemaService.SaveSchema:output_type -> schema.Schema
	18, // 71: schema.SchemaService.SaveSchemaVersion:output_type -> schema.SchemaVersion
	24, // 72: schema.SchemaService.GetSchemasCount:output_type -> schema.SchemaCount
	21, // 73: schema.SchemaService.GetFieldSchema:output_type -> schema.FieldSchema
	13, // 74: schema.SchemaService.MoveSchemaToGroup:output_type -> schema.Empty
	13, // 75: schema.SchemaService.MarkSchemaAsTrash:output_type -> schema.Empty
	51, // [51:76] is the sub-list for method output_type
	26, // [26:51] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_schema_schema_proto_init() }
func file_schema_schema_proto_init() {
	if File_schema_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schema_schema_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSchemaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSchemaVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaWithVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CloneSchemaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CloneSchemaVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MoveSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TrashSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Schemas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Versions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*IdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*VersionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSchemaVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ReferencePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*FieldSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FieldSchemaDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*NameAndIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_schema_schema_proto_msgTypes[3].OneofWrappers = []any{}
	file_schema_schema_proto_msgTypes[15].OneofWrappers = []any{}
	file_schema_schema_proto_msgTypes[16].OneofWrappers = []any{}
	file_schema_schema_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_schema_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_schema_schema_proto_goTypes,
		DependencyIndexes: file_schema_schema_proto_depIdxs,
		EnumInfos:         file_schema_schema_proto_enumTypes,
		MessageInfos:      file_schema_schema_proto_msgTypes,
	}.Build()
	File_schema_schema_proto = out.File
	file_schema_schema_proto_rawDesc = nil
	file_schema_schema_proto_goTypes = nil
	file_schema_schema_proto_depIdxs = nil
}
