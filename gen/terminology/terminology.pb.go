// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: terminology/terminology.proto

package terminology

import (
	auditlog "github.com/MyWeHub/plugin-sdk/gen/auditlog"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConceptGroupFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	ClientId       string                 `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ParentFolderId *string                `protobuf:"bytes,6,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *ConceptGroupFolder) Reset() {
	*x = ConceptGroupFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptGroupFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptGroupFolder) ProtoMessage() {}

func (x *ConceptGroupFolder) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptGroupFolder.ProtoReflect.Descriptor instead.
func (*ConceptGroupFolder) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{0}
}

func (x *ConceptGroupFolder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConceptGroupFolder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConceptGroupFolder) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConceptGroupFolder) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ConceptGroupFolder) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ConceptGroupFolder) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

// GetAllConceptGroupFoldersResp --> ConceptGroupFoldersListView
type ConceptGroupFoldersListView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConceptGroupFolders []*ConceptGroupFolder `protobuf:"bytes,1,rep,name=concept_group_folders,json=conceptGroupFolders,proto3" json:"concept_group_folders,omitempty"`
}

func (x *ConceptGroupFoldersListView) Reset() {
	*x = ConceptGroupFoldersListView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptGroupFoldersListView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptGroupFoldersListView) ProtoMessage() {}

func (x *ConceptGroupFoldersListView) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptGroupFoldersListView.ProtoReflect.Descriptor instead.
func (*ConceptGroupFoldersListView) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{1}
}

func (x *ConceptGroupFoldersListView) GetConceptGroupFolders() []*ConceptGroupFolder {
	if x != nil {
		return x.ConceptGroupFolders
	}
	return nil
}

type GetConceptGroupFolderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp                  `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp                  `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	ClientId       string                                  `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ConceptGroups  []*ConceptGroupWithLightConceptMapsView `protobuf:"bytes,6,rep,name=concept_groups,json=conceptGroups,proto3" json:"concept_groups,omitempty"`
	ParentFolderId *string                                 `protobuf:"bytes,7,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *GetConceptGroupFolderResp) Reset() {
	*x = GetConceptGroupFolderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConceptGroupFolderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConceptGroupFolderResp) ProtoMessage() {}

func (x *GetConceptGroupFolderResp) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConceptGroupFolderResp.ProtoReflect.Descriptor instead.
func (*GetConceptGroupFolderResp) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{2}
}

func (x *GetConceptGroupFolderResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetConceptGroupFolderResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetConceptGroupFolderResp) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetConceptGroupFolderResp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetConceptGroupFolderResp) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetConceptGroupFolderResp) GetConceptGroups() []*ConceptGroupWithLightConceptMapsView {
	if x != nil {
		return x.ConceptGroups
	}
	return nil
}

func (x *GetConceptGroupFolderResp) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

// ConceptGroupForGetConceptGroupFolder - >  ConceptGroupWithLightConceptMapsView
type ConceptGroupWithLightConceptMapsView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	ConceptMaps    []*ConceptMapLightView `protobuf:"bytes,5,rep,name=concept_maps,json=conceptMaps,proto3" json:"concept_maps,omitempty"`
	ParentFolderId *string                `protobuf:"bytes,6,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *ConceptGroupWithLightConceptMapsView) Reset() {
	*x = ConceptGroupWithLightConceptMapsView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptGroupWithLightConceptMapsView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptGroupWithLightConceptMapsView) ProtoMessage() {}

func (x *ConceptGroupWithLightConceptMapsView) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptGroupWithLightConceptMapsView.ProtoReflect.Descriptor instead.
func (*ConceptGroupWithLightConceptMapsView) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{3}
}

func (x *ConceptGroupWithLightConceptMapsView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConceptGroupWithLightConceptMapsView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConceptGroupWithLightConceptMapsView) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConceptGroupWithLightConceptMapsView) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ConceptGroupWithLightConceptMapsView) GetConceptMaps() []*ConceptMapLightView {
	if x != nil {
		return x.ConceptMaps
	}
	return nil
}

func (x *ConceptGroupWithLightConceptMapsView) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

// ConceptMapForGetConceptGroupFolder -> ConceptMapLightView
type ConceptMapLightView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version     string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uri         string                 `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Description *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
}

func (x *ConceptMapLightView) Reset() {
	*x = ConceptMapLightView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapLightView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapLightView) ProtoMessage() {}

func (x *ConceptMapLightView) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapLightView.ProtoReflect.Descriptor instead.
func (*ConceptMapLightView) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{4}
}

func (x *ConceptMapLightView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConceptMapLightView) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConceptMapLightView) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ConceptMapLightView) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ConceptMapLightView) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConceptMapLightView) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpsertConceptGroupFolderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentFolderId *string `protobuf:"bytes,3,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *UpsertConceptGroupFolderReq) Reset() {
	*x = UpsertConceptGroupFolderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertConceptGroupFolderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertConceptGroupFolderReq) ProtoMessage() {}

func (x *UpsertConceptGroupFolderReq) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertConceptGroupFolderReq.ProtoReflect.Descriptor instead.
func (*UpsertConceptGroupFolderReq) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertConceptGroupFolderReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UpsertConceptGroupFolderReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertConceptGroupFolderReq) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

type CodeGroupFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	ClientId       string                 `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ParentFolderId *string                `protobuf:"bytes,6,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *CodeGroupFolder) Reset() {
	*x = CodeGroupFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeGroupFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeGroupFolder) ProtoMessage() {}

func (x *CodeGroupFolder) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeGroupFolder.ProtoReflect.Descriptor instead.
func (*CodeGroupFolder) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{6}
}

func (x *CodeGroupFolder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CodeGroupFolder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeGroupFolder) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CodeGroupFolder) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CodeGroupFolder) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CodeGroupFolder) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

// GetAllCodeGroupFoldersResp -> CodeGroupFoldersListView
type CodeGroupFoldersListView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeGroupFolders []*CodeGroupFolder `protobuf:"bytes,1,rep,name=code_group_folders,json=codeGroupFolders,proto3" json:"code_group_folders,omitempty"`
}

func (x *CodeGroupFoldersListView) Reset() {
	*x = CodeGroupFoldersListView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeGroupFoldersListView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeGroupFoldersListView) ProtoMessage() {}

func (x *CodeGroupFoldersListView) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeGroupFoldersListView.ProtoReflect.Descriptor instead.
func (*CodeGroupFoldersListView) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{7}
}

func (x *CodeGroupFoldersListView) GetCodeGroupFolders() []*CodeGroupFolder {
	if x != nil {
		return x.CodeGroupFolders
	}
	return nil
}

type GetCodeGroupFolderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp              `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp              `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	ClientId       string                              `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CodeGroups     []*CodeGroupWithLightCodeSystemView `protobuf:"bytes,6,rep,name=code_groups,json=codeGroups,proto3" json:"code_groups,omitempty"`
	ParentFolderId *string                             `protobuf:"bytes,7,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *GetCodeGroupFolderResp) Reset() {
	*x = GetCodeGroupFolderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeGroupFolderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeGroupFolderResp) ProtoMessage() {}

func (x *GetCodeGroupFolderResp) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeGroupFolderResp.ProtoReflect.Descriptor instead.
func (*GetCodeGroupFolderResp) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{8}
}

func (x *GetCodeGroupFolderResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCodeGroupFolderResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCodeGroupFolderResp) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetCodeGroupFolderResp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetCodeGroupFolderResp) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetCodeGroupFolderResp) GetCodeGroups() []*CodeGroupWithLightCodeSystemView {
	if x != nil {
		return x.CodeGroups
	}
	return nil
}

func (x *GetCodeGroupFolderResp) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

// CodeGroupForGetCodeGroupFolder -> CodeGroupWithLightCodeSystemView
type CodeGroupWithLightCodeSystemView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	CodeSystems    []*CodeSystemLightView `protobuf:"bytes,5,rep,name=code_systems,json=codeSystems,proto3" json:"code_systems,omitempty"`
	ParentFolderId *string                `protobuf:"bytes,6,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *CodeGroupWithLightCodeSystemView) Reset() {
	*x = CodeGroupWithLightCodeSystemView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeGroupWithLightCodeSystemView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeGroupWithLightCodeSystemView) ProtoMessage() {}

func (x *CodeGroupWithLightCodeSystemView) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeGroupWithLightCodeSystemView.ProtoReflect.Descriptor instead.
func (*CodeGroupWithLightCodeSystemView) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{9}
}

func (x *CodeGroupWithLightCodeSystemView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CodeGroupWithLightCodeSystemView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeGroupWithLightCodeSystemView) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CodeGroupWithLightCodeSystemView) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CodeGroupWithLightCodeSystemView) GetCodeSystems() []*CodeSystemLightView {
	if x != nil {
		return x.CodeSystems
	}
	return nil
}

func (x *CodeGroupWithLightCodeSystemView) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

// CodeSysForGetCodeGroupFolder -> CodeSystemLightView
type CodeSystemLightView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version     string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uri         string                 `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Description *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
}

func (x *CodeSystemLightView) Reset() {
	*x = CodeSystemLightView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemLightView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemLightView) ProtoMessage() {}

func (x *CodeSystemLightView) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemLightView.ProtoReflect.Descriptor instead.
func (*CodeSystemLightView) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{10}
}

func (x *CodeSystemLightView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CodeSystemLightView) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CodeSystemLightView) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CodeSystemLightView) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CodeSystemLightView) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CodeSystemLightView) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpsertCodeGroupFolderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentFolderId *string `protobuf:"bytes,3,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *UpsertCodeGroupFolderReq) Reset() {
	*x = UpsertCodeGroupFolderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertCodeGroupFolderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCodeGroupFolderReq) ProtoMessage() {}

func (x *UpsertCodeGroupFolderReq) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCodeGroupFolderReq.ProtoReflect.Descriptor instead.
func (*UpsertCodeGroupFolderReq) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{11}
}

func (x *UpsertCodeGroupFolderReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UpsertCodeGroupFolderReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertCodeGroupFolderReq) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

type GetConceptGroupWithMapsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConceptGroup *ConceptGroup                `protobuf:"bytes,1,opt,name=concept_group,json=conceptGroup,proto3" json:"concept_group,omitempty"`
	ConceptMap   []*ConceptMapWithCodeSysView `protobuf:"bytes,2,rep,name=concept_map,json=conceptMap,proto3" json:"concept_map,omitempty"`
}

func (x *GetConceptGroupWithMapsResp) Reset() {
	*x = GetConceptGroupWithMapsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConceptGroupWithMapsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConceptGroupWithMapsResp) ProtoMessage() {}

func (x *GetConceptGroupWithMapsResp) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConceptGroupWithMapsResp.ProtoReflect.Descriptor instead.
func (*GetConceptGroupWithMapsResp) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{12}
}

func (x *GetConceptGroupWithMapsResp) GetConceptGroup() *ConceptGroup {
	if x != nil {
		return x.ConceptGroup
	}
	return nil
}

func (x *GetConceptGroupWithMapsResp) GetConceptMap() []*ConceptMapWithCodeSysView {
	if x != nil {
		return x.ConceptMap
	}
	return nil
}

type ConceptMapWithCodeSysView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version         string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uri             string                 `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	CodeSystems     []*CodeSystem          `protobuf:"bytes,4,rep,name=code_systems,json=codeSystems,proto3" json:"code_systems,omitempty"`
	CodeSystemsMaps map[string]*CodeSysMap `protobuf:"bytes,5,rep,name=code_systems_maps,json=codeSystemsMaps,proto3" json:"code_systems_maps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description     *string                `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ClientId        string                 `protobuf:"bytes,7,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	GroupId         string                 `protobuf:"bytes,8,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
}

func (x *ConceptMapWithCodeSysView) Reset() {
	*x = ConceptMapWithCodeSysView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapWithCodeSysView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapWithCodeSysView) ProtoMessage() {}

func (x *ConceptMapWithCodeSysView) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapWithCodeSysView.ProtoReflect.Descriptor instead.
func (*ConceptMapWithCodeSysView) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{13}
}

func (x *ConceptMapWithCodeSysView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConceptMapWithCodeSysView) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConceptMapWithCodeSysView) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ConceptMapWithCodeSysView) GetCodeSystems() []*CodeSystem {
	if x != nil {
		return x.CodeSystems
	}
	return nil
}

func (x *ConceptMapWithCodeSysView) GetCodeSystemsMaps() map[string]*CodeSysMap {
	if x != nil {
		return x.CodeSystemsMaps
	}
	return nil
}

func (x *ConceptMapWithCodeSysView) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ConceptMapWithCodeSysView) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ConceptMapWithCodeSysView) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ConceptMapWithCodeSysView) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConceptMapWithCodeSysView) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdRequest) Reset() {
	*x = IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRequest) ProtoMessage() {}

func (x *IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRequest.ProtoReflect.Descriptor instead.
func (*IdRequest) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{14}
}

func (x *IdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpsertConceptMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *string                    `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Version         string                     `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uri             string                     `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	CodeSystemIds   []string                   `protobuf:"bytes,4,rep,name=code_system_ids,json=codeSystemIds,proto3" json:"code_system_ids,omitempty"`
	CodeSystemsMaps map[string]*CodeSysMap     `protobuf:"bytes,5,rep,name=code_systems_maps,json=codeSystemsMaps,proto3" json:"code_systems_maps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description     *string                    `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	GroupId         string                     `protobuf:"bytes,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Log             *auditlog.CreateLogRequest `protobuf:"bytes,8,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *UpsertConceptMapReq) Reset() {
	*x = UpsertConceptMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertConceptMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertConceptMapReq) ProtoMessage() {}

func (x *UpsertConceptMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertConceptMapReq.ProtoReflect.Descriptor instead.
func (*UpsertConceptMapReq) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{15}
}

func (x *UpsertConceptMapReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UpsertConceptMapReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpsertConceptMapReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *UpsertConceptMapReq) GetCodeSystemIds() []string {
	if x != nil {
		return x.CodeSystemIds
	}
	return nil
}

func (x *UpsertConceptMapReq) GetCodeSystemsMaps() map[string]*CodeSysMap {
	if x != nil {
		return x.CodeSystemsMaps
	}
	return nil
}

func (x *UpsertConceptMapReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpsertConceptMapReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UpsertConceptMapReq) GetLog() *auditlog.CreateLogRequest {
	if x != nil {
		return x.Log
	}
	return nil
}

type UploadConceptMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// todo: fix this
	Id                    *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Version               string  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uri                   string  `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	PrimarySystemName     *string `protobuf:"bytes,4,opt,name=primary_system_name,json=primarySystemName,proto3,oneof" json:"primary_system_name,omitempty"`
	PrimaryCodeSystemId   *string `protobuf:"bytes,5,opt,name=primary_code_system_id,json=primaryCodeSystemId,proto3,oneof" json:"primary_code_system_id,omitempty"`
	SecondarySystemName   *string `protobuf:"bytes,6,opt,name=secondary_system_name,json=secondarySystemName,proto3,oneof" json:"secondary_system_name,omitempty"`
	SecondaryCodeSystemId *string `protobuf:"bytes,7,opt,name=secondary_code_system_id,json=secondaryCodeSystemId,proto3,oneof" json:"secondary_code_system_id,omitempty"`
	// MapDirection map_direction = 8;
	Description *string `protobuf:"bytes,9,opt,name=description,proto3,oneof" json:"description,omitempty"`
	GroupId     string  `protobuf:"bytes,10,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	File        []byte  `protobuf:"bytes,11,opt,name=file,proto3" json:"file,omitempty"`
	Delimiter   string  `protobuf:"bytes,12,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
}

func (x *UploadConceptMapReq) Reset() {
	*x = UploadConceptMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadConceptMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadConceptMapReq) ProtoMessage() {}

func (x *UploadConceptMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadConceptMapReq.ProtoReflect.Descriptor instead.
func (*UploadConceptMapReq) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{16}
}

func (x *UploadConceptMapReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UploadConceptMapReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UploadConceptMapReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *UploadConceptMapReq) GetPrimarySystemName() string {
	if x != nil && x.PrimarySystemName != nil {
		return *x.PrimarySystemName
	}
	return ""
}

func (x *UploadConceptMapReq) GetPrimaryCodeSystemId() string {
	if x != nil && x.PrimaryCodeSystemId != nil {
		return *x.PrimaryCodeSystemId
	}
	return ""
}

func (x *UploadConceptMapReq) GetSecondarySystemName() string {
	if x != nil && x.SecondarySystemName != nil {
		return *x.SecondarySystemName
	}
	return ""
}

func (x *UploadConceptMapReq) GetSecondaryCodeSystemId() string {
	if x != nil && x.SecondaryCodeSystemId != nil {
		return *x.SecondaryCodeSystemId
	}
	return ""
}

func (x *UploadConceptMapReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UploadConceptMapReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UploadConceptMapReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *UploadConceptMapReq) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

type ConceptGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClientId       string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	ParentFolderId *string                `protobuf:"bytes,6,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *ConceptGroup) Reset() {
	*x = ConceptGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptGroup) ProtoMessage() {}

func (x *ConceptGroup) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptGroup.ProtoReflect.Descriptor instead.
func (*ConceptGroup) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{17}
}

func (x *ConceptGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConceptGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConceptGroup) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ConceptGroup) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConceptGroup) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ConceptGroup) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

type ConceptGroupWithConceptMapsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConceptGroups []*ConceptGroupWithConceptMapView `protobuf:"bytes,1,rep,name=concept_groups,json=conceptGroups,proto3" json:"concept_groups,omitempty"`
}

func (x *ConceptGroupWithConceptMapsResponse) Reset() {
	*x = ConceptGroupWithConceptMapsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptGroupWithConceptMapsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptGroupWithConceptMapsResponse) ProtoMessage() {}

func (x *ConceptGroupWithConceptMapsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptGroupWithConceptMapsResponse.ProtoReflect.Descriptor instead.
func (*ConceptGroupWithConceptMapsResponse) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{18}
}

func (x *ConceptGroupWithConceptMapsResponse) GetConceptGroups() []*ConceptGroupWithConceptMapView {
	if x != nil {
		return x.ConceptGroups
	}
	return nil
}

type ConceptGroupWithConceptMapView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConceptGroup *ConceptGroup `protobuf:"bytes,1,opt,name=concept_group,json=conceptGroup,proto3" json:"concept_group,omitempty"`
	ConceptMap   []*ConceptMap `protobuf:"bytes,2,rep,name=concept_map,json=conceptMap,proto3" json:"concept_map,omitempty"`
}

func (x *ConceptGroupWithConceptMapView) Reset() {
	*x = ConceptGroupWithConceptMapView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptGroupWithConceptMapView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptGroupWithConceptMapView) ProtoMessage() {}

func (x *ConceptGroupWithConceptMapView) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptGroupWithConceptMapView.ProtoReflect.Descriptor instead.
func (*ConceptGroupWithConceptMapView) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{19}
}

func (x *ConceptGroupWithConceptMapView) GetConceptGroup() *ConceptGroup {
	if x != nil {
		return x.ConceptGroup
	}
	return nil
}

func (x *ConceptGroupWithConceptMapView) GetConceptMap() []*ConceptMap {
	if x != nil {
		return x.ConceptMap
	}
	return nil
}

type CodeSysMapVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value            string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	KeyDisplayName   string `protobuf:"bytes,2,opt,name=key_display_name,json=keyDisplayName,proto3" json:"key_display_name,omitempty"`
	ValueDisplayName string `protobuf:"bytes,3,opt,name=value_display_name,json=valueDisplayName,proto3" json:"value_display_name,omitempty"`
}

func (x *CodeSysMapVal) Reset() {
	*x = CodeSysMapVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSysMapVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSysMapVal) ProtoMessage() {}

func (x *CodeSysMapVal) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSysMapVal.ProtoReflect.Descriptor instead.
func (*CodeSysMapVal) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{20}
}

func (x *CodeSysMapVal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CodeSysMapVal) GetKeyDisplayName() string {
	if x != nil {
		return x.KeyDisplayName
	}
	return ""
}

func (x *CodeSysMapVal) GetValueDisplayName() string {
	if x != nil {
		return x.ValueDisplayName
	}
	return ""
}

type CodeSysMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// was defined in a separate message because map<string, map<string,string>> is not allowed in proto
	Data map[string]*CodeSysMapVal `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CodeSysMap) Reset() {
	*x = CodeSysMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSysMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSysMap) ProtoMessage() {}

func (x *CodeSysMap) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSysMap.ProtoReflect.Descriptor instead.
func (*CodeSysMap) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{21}
}

func (x *CodeSysMap) GetData() map[string]*CodeSysMapVal {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConceptMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version       string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uri           string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	CodeSystemIds []string `protobuf:"bytes,4,rep,name=code_system_ids,json=codeSystemIds,proto3" json:"code_system_ids,omitempty"`
	// key: code system id of the code system which is providing the key
	CodeSystemsMaps map[string]*CodeSysMap `protobuf:"bytes,5,rep,name=code_systems_maps,json=codeSystemsMaps,proto3" json:"code_systems_maps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description     *string                `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ClientId        string                 `protobuf:"bytes,7,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	GroupId         string                 `protobuf:"bytes,8,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
}

func (x *ConceptMap) Reset() {
	*x = ConceptMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMap) ProtoMessage() {}

func (x *ConceptMap) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMap.ProtoReflect.Descriptor instead.
func (*ConceptMap) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{22}
}

func (x *ConceptMap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConceptMap) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConceptMap) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ConceptMap) GetCodeSystemIds() []string {
	if x != nil {
		return x.CodeSystemIds
	}
	return nil
}

func (x *ConceptMap) GetCodeSystemsMaps() map[string]*CodeSysMap {
	if x != nil {
		return x.CodeSystemsMaps
	}
	return nil
}

func (x *ConceptMap) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ConceptMap) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ConceptMap) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ConceptMap) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConceptMap) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpsertConceptGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentFolderId *string `protobuf:"bytes,3,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *UpsertConceptGroupRequest) Reset() {
	*x = UpsertConceptGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertConceptGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertConceptGroupRequest) ProtoMessage() {}

func (x *UpsertConceptGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertConceptGroupRequest.ProtoReflect.Descriptor instead.
func (*UpsertConceptGroupRequest) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{23}
}

func (x *UpsertConceptGroupRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UpsertConceptGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertConceptGroupRequest) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

type UpsertCodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentFolderId *string `protobuf:"bytes,3,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *UpsertCodeGroupRequest) Reset() {
	*x = UpsertCodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertCodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCodeGroupRequest) ProtoMessage() {}

func (x *UpsertCodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCodeGroupRequest.ProtoReflect.Descriptor instead.
func (*UpsertCodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{24}
}

func (x *UpsertCodeGroupRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UpsertCodeGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpsertCodeGroupRequest) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

type GetCodeGroupWithCodeSystemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeGroups []*CodeGroupWithCodeSystemView `protobuf:"bytes,1,rep,name=code_groups,json=codeGroups,proto3" json:"code_groups,omitempty"`
}

func (x *GetCodeGroupWithCodeSystemsResponse) Reset() {
	*x = GetCodeGroupWithCodeSystemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeGroupWithCodeSystemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeGroupWithCodeSystemsResponse) ProtoMessage() {}

func (x *GetCodeGroupWithCodeSystemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeGroupWithCodeSystemsResponse.ProtoReflect.Descriptor instead.
func (*GetCodeGroupWithCodeSystemsResponse) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{25}
}

func (x *GetCodeGroupWithCodeSystemsResponse) GetCodeGroups() []*CodeGroupWithCodeSystemView {
	if x != nil {
		return x.CodeGroups
	}
	return nil
}

type UpsertCodeSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string                    `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Version     string                     `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uri         string                     `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Description *string                    `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	GroupId     string                     `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Fields      map[string]*FieldValue     `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Log         *auditlog.CreateLogRequest `protobuf:"bytes,7,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *UpsertCodeSystemRequest) Reset() {
	*x = UpsertCodeSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertCodeSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCodeSystemRequest) ProtoMessage() {}

func (x *UpsertCodeSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCodeSystemRequest.ProtoReflect.Descriptor instead.
func (*UpsertCodeSystemRequest) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{26}
}

func (x *UpsertCodeSystemRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UpsertCodeSystemRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpsertCodeSystemRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *UpsertCodeSystemRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpsertCodeSystemRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UpsertCodeSystemRequest) GetFields() map[string]*FieldValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpsertCodeSystemRequest) GetLog() *auditlog.CreateLogRequest {
	if x != nil {
		return x.Log
	}
	return nil
}

type UploadCodeSystemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Version     string  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uri         string  `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	GroupId     string  `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	File        []byte  `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	Delimiter   string  `protobuf:"bytes,7,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
}

func (x *UploadCodeSystemReq) Reset() {
	*x = UploadCodeSystemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCodeSystemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCodeSystemReq) ProtoMessage() {}

func (x *UploadCodeSystemReq) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCodeSystemReq.ProtoReflect.Descriptor instead.
func (*UploadCodeSystemReq) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{27}
}

func (x *UploadCodeSystemReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UploadCodeSystemReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UploadCodeSystemReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *UploadCodeSystemReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UploadCodeSystemReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UploadCodeSystemReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *UploadCodeSystemReq) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

type CodeSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version     string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uri         string                 `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Description *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	GroupId     string                 `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ClientId    string                 `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Fields      map[string]*FieldValue `protobuf:"bytes,7,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
}

func (x *CodeSystem) Reset() {
	*x = CodeSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystem) ProtoMessage() {}

func (x *CodeSystem) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystem.ProtoReflect.Descriptor instead.
func (*CodeSystem) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{28}
}

func (x *CodeSystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CodeSystem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CodeSystem) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CodeSystem) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CodeSystem) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CodeSystem) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CodeSystem) GetFields() map[string]*FieldValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CodeSystem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CodeSystem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Display     string `protobuf:"bytes,1,opt,name=display,proto3" json:"display,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValue.ProtoReflect.Descriptor instead.
func (*FieldValue) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{29}
}

func (x *FieldValue) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *FieldValue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClientId       string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	ParentFolderId *string                `protobuf:"bytes,6,opt,name=parent_folder_id,json=parentFolderId,proto3,oneof" json:"parent_folder_id,omitempty"`
}

func (x *CodeGroup) Reset() {
	*x = CodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeGroup) ProtoMessage() {}

func (x *CodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeGroup.ProtoReflect.Descriptor instead.
func (*CodeGroup) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{30}
}

func (x *CodeGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CodeGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeGroup) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CodeGroup) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CodeGroup) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CodeGroup) GetParentFolderId() string {
	if x != nil && x.ParentFolderId != nil {
		return *x.ParentFolderId
	}
	return ""
}

type CodeGroupWithCodeSystemView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeGroup   *CodeGroup    `protobuf:"bytes,1,opt,name=code_group,json=codeGroup,proto3" json:"code_group,omitempty"`
	CodeSystems []*CodeSystem `protobuf:"bytes,2,rep,name=code_systems,json=codeSystems,proto3" json:"code_systems,omitempty"`
}

func (x *CodeGroupWithCodeSystemView) Reset() {
	*x = CodeGroupWithCodeSystemView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeGroupWithCodeSystemView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeGroupWithCodeSystemView) ProtoMessage() {}

func (x *CodeGroupWithCodeSystemView) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeGroupWithCodeSystemView.ProtoReflect.Descriptor instead.
func (*CodeGroupWithCodeSystemView) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{31}
}

func (x *CodeGroupWithCodeSystemView) GetCodeGroup() *CodeGroup {
	if x != nil {
		return x.CodeGroup
	}
	return nil
}

func (x *CodeGroupWithCodeSystemView) GetCodeSystems() []*CodeSystem {
	if x != nil {
		return x.CodeSystems
	}
	return nil
}

type NameAndIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NameAndIdRequest) Reset() {
	*x = NameAndIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameAndIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameAndIdRequest) ProtoMessage() {}

func (x *NameAndIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameAndIdRequest.ProtoReflect.Descriptor instead.
func (*NameAndIdRequest) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{32}
}

func (x *NameAndIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NameAndIdRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetConceptMapByNameAndUriReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Uri     string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *GetConceptMapByNameAndUriReq) Reset() {
	*x = GetConceptMapByNameAndUriReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_terminology_terminology_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConceptMapByNameAndUriReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConceptMapByNameAndUriReq) ProtoMessage() {}

func (x *GetConceptMapByNameAndUriReq) ProtoReflect() protoreflect.Message {
	mi := &file_terminology_terminology_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConceptMapByNameAndUriReq.ProtoReflect.Descriptor instead.
func (*GetConceptMapByNameAndUriReq) Descriptor() ([]byte, []int) {
	return file_terminology_terminology_proto_rawDescGZIP(), []int{33}
}

func (x *GetConceptMapByNameAndUriReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetConceptMapByNameAndUriReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetConceptMapByNameAndUriReq) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

var File_terminology_terminology_proto protoreflect.FileDescriptor

var file_terminology_terminology_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3,
	0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x53, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0x84, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0xdd, 0x02, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x4d, 0x61, 0x70, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0x92, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x18, 0x43,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0a,
	0x63, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xd9, 0x02,
	0x0a, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x13, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x8e,
	0x01, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0xa6, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x22, 0xd2, 0x04, 0x0a, 0x19, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x67,
	0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d,
	0x61, 0x70, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x56, 0x69, 0x65,
	0x77, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x61, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x5b, 0x0a, 0x14, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x1b, 0x0a,
	0x09, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x03, 0x0a, 0x13, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x1a, 0x5b,
	0x0a, 0x14, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x61, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x4d, 0x61, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb1, 0x04, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x13, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x13, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d,
	0x61, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x22, 0x7d,
	0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x98, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x35, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x4d, 0x61, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x53, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x5b, 0x0a, 0x14, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x61,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x4d, 0x61,
	0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x19,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x8c, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x23,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xff,
	0x02, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x03, 0x6c, 0x6f, 0x67, 0x1a, 0x52, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xe1, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x52, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x48, 0x0a, 0x0a, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x22, 0x90, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x63, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x36, 0x0a, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x72, 0x69, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x32, 0xfe, 0x11, 0x0a, 0x12, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x23, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x16, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x30, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x73,
	0x12, 0x16, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x72, 0x69, 0x12, 0x29, 0x2e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x72,
	0x69, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x1d, 0x2e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x26, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x20, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x44,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x1d, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28,
	0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x77, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_terminology_terminology_proto_rawDescOnce sync.Once
	file_terminology_terminology_proto_rawDescData = file_terminology_terminology_proto_rawDesc
)

func file_terminology_terminology_proto_rawDescGZIP() []byte {
	file_terminology_terminology_proto_rawDescOnce.Do(func() {
		file_terminology_terminology_proto_rawDescData = protoimpl.X.CompressGZIP(file_terminology_terminology_proto_rawDescData)
	})
	return file_terminology_terminology_proto_rawDescData
}

var file_terminology_terminology_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_terminology_terminology_proto_goTypes = []interface{}{
	(*ConceptGroupFolder)(nil),                   // 0: terminology.ConceptGroupFolder
	(*ConceptGroupFoldersListView)(nil),          // 1: terminology.ConceptGroupFoldersListView
	(*GetConceptGroupFolderResp)(nil),            // 2: terminology.GetConceptGroupFolderResp
	(*ConceptGroupWithLightConceptMapsView)(nil), // 3: terminology.ConceptGroupWithLightConceptMapsView
	(*ConceptMapLightView)(nil),                  // 4: terminology.ConceptMapLightView
	(*UpsertConceptGroupFolderReq)(nil),          // 5: terminology.UpsertConceptGroupFolderReq
	(*CodeGroupFolder)(nil),                      // 6: terminology.CodeGroupFolder
	(*CodeGroupFoldersListView)(nil),             // 7: terminology.CodeGroupFoldersListView
	(*GetCodeGroupFolderResp)(nil),               // 8: terminology.GetCodeGroupFolderResp
	(*CodeGroupWithLightCodeSystemView)(nil),     // 9: terminology.CodeGroupWithLightCodeSystemView
	(*CodeSystemLightView)(nil),                  // 10: terminology.CodeSystemLightView
	(*UpsertCodeGroupFolderReq)(nil),             // 11: terminology.UpsertCodeGroupFolderReq
	(*GetConceptGroupWithMapsResp)(nil),          // 12: terminology.GetConceptGroupWithMapsResp
	(*ConceptMapWithCodeSysView)(nil),            // 13: terminology.ConceptMapWithCodeSysView
	(*IdRequest)(nil),                            // 14: terminology.IdRequest
	(*UpsertConceptMapReq)(nil),                  // 15: terminology.UpsertConceptMapReq
	(*UploadConceptMapReq)(nil),                  // 16: terminology.UploadConceptMapReq
	(*ConceptGroup)(nil),                         // 17: terminology.ConceptGroup
	(*ConceptGroupWithConceptMapsResponse)(nil),  // 18: terminology.ConceptGroupWithConceptMapsResponse
	(*ConceptGroupWithConceptMapView)(nil),       // 19: terminology.ConceptGroupWithConceptMapView
	(*CodeSysMapVal)(nil),                        // 20: terminology.CodeSysMapVal
	(*CodeSysMap)(nil),                           // 21: terminology.CodeSysMap
	(*ConceptMap)(nil),                           // 22: terminology.ConceptMap
	(*UpsertConceptGroupRequest)(nil),            // 23: terminology.UpsertConceptGroupRequest
	(*UpsertCodeGroupRequest)(nil),               // 24: terminology.UpsertCodeGroupRequest
	(*GetCodeGroupWithCodeSystemsResponse)(nil),  // 25: terminology.GetCodeGroupWithCodeSystemsResponse
	(*UpsertCodeSystemRequest)(nil),              // 26: terminology.UpsertCodeSystemRequest
	(*UploadCodeSystemReq)(nil),                  // 27: terminology.UploadCodeSystemReq
	(*CodeSystem)(nil),                           // 28: terminology.CodeSystem
	(*FieldValue)(nil),                           // 29: terminology.FieldValue
	(*CodeGroup)(nil),                            // 30: terminology.CodeGroup
	(*CodeGroupWithCodeSystemView)(nil),          // 31: terminology.CodeGroupWithCodeSystemView
	(*NameAndIdRequest)(nil),                     // 32: terminology.NameAndIdRequest
	(*GetConceptMapByNameAndUriReq)(nil),         // 33: terminology.GetConceptMapByNameAndUriReq
	nil,                                          // 34: terminology.ConceptMapWithCodeSysView.CodeSystemsMapsEntry
	nil,                                          // 35: terminology.UpsertConceptMapReq.CodeSystemsMapsEntry
	nil,                                          // 36: terminology.CodeSysMap.DataEntry
	nil,                                          // 37: terminology.ConceptMap.CodeSystemsMapsEntry
	nil,                                          // 38: terminology.UpsertCodeSystemRequest.FieldsEntry
	nil,                                          // 39: terminology.CodeSystem.FieldsEntry
	(*timestamppb.Timestamp)(nil),                // 40: google.protobuf.Timestamp
	(*auditlog.CreateLogRequest)(nil),            // 41: auditlog.CreateLogRequest
	(*emptypb.Empty)(nil),                        // 42: google.protobuf.Empty
}
var file_terminology_terminology_proto_depIdxs = []int32{
	40, // 0: terminology.ConceptGroupFolder.created_at:type_name -> google.protobuf.Timestamp
	40, // 1: terminology.ConceptGroupFolder.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 2: terminology.ConceptGroupFoldersListView.concept_group_folders:type_name -> terminology.ConceptGroupFolder
	40, // 3: terminology.GetConceptGroupFolderResp.created_at:type_name -> google.protobuf.Timestamp
	40, // 4: terminology.GetConceptGroupFolderResp.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 5: terminology.GetConceptGroupFolderResp.concept_groups:type_name -> terminology.ConceptGroupWithLightConceptMapsView
	40, // 6: terminology.ConceptGroupWithLightConceptMapsView.created_at:type_name -> google.protobuf.Timestamp
	40, // 7: terminology.ConceptGroupWithLightConceptMapsView.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 8: terminology.ConceptGroupWithLightConceptMapsView.concept_maps:type_name -> terminology.ConceptMapLightView
	40, // 9: terminology.ConceptMapLightView.created_at:type_name -> google.protobuf.Timestamp
	40, // 10: terminology.ConceptMapLightView.updated_at:type_name -> google.protobuf.Timestamp
	40, // 11: terminology.CodeGroupFolder.created_at:type_name -> google.protobuf.Timestamp
	40, // 12: terminology.CodeGroupFolder.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 13: terminology.CodeGroupFoldersListView.code_group_folders:type_name -> terminology.CodeGroupFolder
	40, // 14: terminology.GetCodeGroupFolderResp.created_at:type_name -> google.protobuf.Timestamp
	40, // 15: terminology.GetCodeGroupFolderResp.updated_at:type_name -> google.protobuf.Timestamp
	9,  // 16: terminology.GetCodeGroupFolderResp.code_groups:type_name -> terminology.CodeGroupWithLightCodeSystemView
	40, // 17: terminology.CodeGroupWithLightCodeSystemView.created_at:type_name -> google.protobuf.Timestamp
	40, // 18: terminology.CodeGroupWithLightCodeSystemView.updated_at:type_name -> google.protobuf.Timestamp
	10, // 19: terminology.CodeGroupWithLightCodeSystemView.code_systems:type_name -> terminology.CodeSystemLightView
	40, // 20: terminology.CodeSystemLightView.created_at:type_name -> google.protobuf.Timestamp
	40, // 21: terminology.CodeSystemLightView.updated_at:type_name -> google.protobuf.Timestamp
	17, // 22: terminology.GetConceptGroupWithMapsResp.concept_group:type_name -> terminology.ConceptGroup
	13, // 23: terminology.GetConceptGroupWithMapsResp.concept_map:type_name -> terminology.ConceptMapWithCodeSysView
	28, // 24: terminology.ConceptMapWithCodeSysView.code_systems:type_name -> terminology.CodeSystem
	34, // 25: terminology.ConceptMapWithCodeSysView.code_systems_maps:type_name -> terminology.ConceptMapWithCodeSysView.CodeSystemsMapsEntry
	40, // 26: terminology.ConceptMapWithCodeSysView.created_at:type_name -> google.protobuf.Timestamp
	40, // 27: terminology.ConceptMapWithCodeSysView.updated_at:type_name -> google.protobuf.Timestamp
	35, // 28: terminology.UpsertConceptMapReq.code_systems_maps:type_name -> terminology.UpsertConceptMapReq.CodeSystemsMapsEntry
	41, // 29: terminology.UpsertConceptMapReq.log:type_name -> auditlog.CreateLogRequest
	40, // 30: terminology.ConceptGroup.created_at:type_name -> google.protobuf.Timestamp
	40, // 31: terminology.ConceptGroup.updated_at:type_name -> google.protobuf.Timestamp
	19, // 32: terminology.ConceptGroupWithConceptMapsResponse.concept_groups:type_name -> terminology.ConceptGroupWithConceptMapView
	17, // 33: terminology.ConceptGroupWithConceptMapView.concept_group:type_name -> terminology.ConceptGroup
	22, // 34: terminology.ConceptGroupWithConceptMapView.concept_map:type_name -> terminology.ConceptMap
	36, // 35: terminology.CodeSysMap.data:type_name -> terminology.CodeSysMap.DataEntry
	37, // 36: terminology.ConceptMap.code_systems_maps:type_name -> terminology.ConceptMap.CodeSystemsMapsEntry
	40, // 37: terminology.ConceptMap.created_at:type_name -> google.protobuf.Timestamp
	40, // 38: terminology.ConceptMap.updated_at:type_name -> google.protobuf.Timestamp
	31, // 39: terminology.GetCodeGroupWithCodeSystemsResponse.code_groups:type_name -> terminology.CodeGroupWithCodeSystemView
	38, // 40: terminology.UpsertCodeSystemRequest.fields:type_name -> terminology.UpsertCodeSystemRequest.FieldsEntry
	41, // 41: terminology.UpsertCodeSystemRequest.log:type_name -> auditlog.CreateLogRequest
	39, // 42: terminology.CodeSystem.fields:type_name -> terminology.CodeSystem.FieldsEntry
	40, // 43: terminology.CodeSystem.created_at:type_name -> google.protobuf.Timestamp
	40, // 44: terminology.CodeSystem.updated_at:type_name -> google.protobuf.Timestamp
	40, // 45: terminology.CodeGroup.created_at:type_name -> google.protobuf.Timestamp
	40, // 46: terminology.CodeGroup.updated_at:type_name -> google.protobuf.Timestamp
	30, // 47: terminology.CodeGroupWithCodeSystemView.code_group:type_name -> terminology.CodeGroup
	28, // 48: terminology.CodeGroupWithCodeSystemView.code_systems:type_name -> terminology.CodeSystem
	21, // 49: terminology.ConceptMapWithCodeSysView.CodeSystemsMapsEntry.value:type_name -> terminology.CodeSysMap
	21, // 50: terminology.UpsertConceptMapReq.CodeSystemsMapsEntry.value:type_name -> terminology.CodeSysMap
	20, // 51: terminology.CodeSysMap.DataEntry.value:type_name -> terminology.CodeSysMapVal
	21, // 52: terminology.ConceptMap.CodeSystemsMapsEntry.value:type_name -> terminology.CodeSysMap
	29, // 53: terminology.UpsertCodeSystemRequest.FieldsEntry.value:type_name -> terminology.FieldValue
	29, // 54: terminology.CodeSystem.FieldsEntry.value:type_name -> terminology.FieldValue
	42, // 55: terminology.TerminologyService.GetAllCodeGroupsWithCodeSystems:input_type -> google.protobuf.Empty
	14, // 56: terminology.TerminologyService.GetCodeGroupWithCodeSystems:input_type -> terminology.IdRequest
	24, // 57: terminology.TerminologyService.UpsertCodeGroup:input_type -> terminology.UpsertCodeGroupRequest
	14, // 58: terminology.TerminologyService.DeleteCodeGroup:input_type -> terminology.IdRequest
	26, // 59: terminology.TerminologyService.UpsertCodeSystem:input_type -> terminology.UpsertCodeSystemRequest
	14, // 60: terminology.TerminologyService.DeleteCodeSystem:input_type -> terminology.IdRequest
	27, // 61: terminology.TerminologyService.UploadCodeSystem:input_type -> terminology.UploadCodeSystemReq
	42, // 62: terminology.TerminologyService.GetAllConceptGroupsWithConceptMaps:input_type -> google.protobuf.Empty
	14, // 63: terminology.TerminologyService.GetConceptGroupWithMaps:input_type -> terminology.IdRequest
	14, // 64: terminology.TerminologyService.GetConceptMapById:input_type -> terminology.IdRequest
	33, // 65: terminology.TerminologyService.GetConceptMapByNameAndUri:input_type -> terminology.GetConceptMapByNameAndUriReq
	32, // 66: terminology.TerminologyService.GetConceptGroupByNameAndID:input_type -> terminology.NameAndIdRequest
	23, // 67: terminology.TerminologyService.UpsertConceptGroup:input_type -> terminology.UpsertConceptGroupRequest
	14, // 68: terminology.TerminologyService.DeleteConceptGroup:input_type -> terminology.IdRequest
	15, // 69: terminology.TerminologyService.UpsertConceptMap:input_type -> terminology.UpsertConceptMapReq
	16, // 70: terminology.TerminologyService.UploadConceptMap:input_type -> terminology.UploadConceptMapReq
	14, // 71: terminology.TerminologyService.DeleteConceptMap:input_type -> terminology.IdRequest
	11, // 72: terminology.TerminologyService.UpsertCodeGroupFolder:input_type -> terminology.UpsertCodeGroupFolderReq
	14, // 73: terminology.TerminologyService.GetCodeGroupFolder:input_type -> terminology.IdRequest
	42, // 74: terminology.TerminologyService.GetAllCodeGroupFolders:input_type -> google.protobuf.Empty
	14, // 75: terminology.TerminologyService.DeleteCodeGroupFolder:input_type -> terminology.IdRequest
	5,  // 76: terminology.TerminologyService.UpsertConceptGroupFolder:input_type -> terminology.UpsertConceptGroupFolderReq
	14, // 77: terminology.TerminologyService.GetConceptGroupFolder:input_type -> terminology.IdRequest
	32, // 78: terminology.TerminologyService.GetConceptGroupFolderByNameAndID:input_type -> terminology.NameAndIdRequest
	42, // 79: terminology.TerminologyService.GetAllConceptGroupFolders:input_type -> google.protobuf.Empty
	14, // 80: terminology.TerminologyService.DeleteConceptGroupFolder:input_type -> terminology.IdRequest
	25, // 81: terminology.TerminologyService.GetAllCodeGroupsWithCodeSystems:output_type -> terminology.GetCodeGroupWithCodeSystemsResponse
	31, // 82: terminology.TerminologyService.GetCodeGroupWithCodeSystems:output_type -> terminology.CodeGroupWithCodeSystemView
	30, // 83: terminology.TerminologyService.UpsertCodeGroup:output_type -> terminology.CodeGroup
	42, // 84: terminology.TerminologyService.DeleteCodeGroup:output_type -> google.protobuf.Empty
	28, // 85: terminology.TerminologyService.UpsertCodeSystem:output_type -> terminology.CodeSystem
	42, // 86: terminology.TerminologyService.DeleteCodeSystem:output_type -> google.protobuf.Empty
	28, // 87: terminology.TerminologyService.UploadCodeSystem:output_type -> terminology.CodeSystem
	18, // 88: terminology.TerminologyService.GetAllConceptGroupsWithConceptMaps:output_type -> terminology.ConceptGroupWithConceptMapsResponse
	12, // 89: terminology.TerminologyService.GetConceptGroupWithMaps:output_type -> terminology.GetConceptGroupWithMapsResp
	22, // 90: terminology.TerminologyService.GetConceptMapById:output_type -> terminology.ConceptMap
	22, // 91: terminology.TerminologyService.GetConceptMapByNameAndUri:output_type -> terminology.ConceptMap
	17, // 92: terminology.TerminologyService.GetConceptGroupByNameAndID:output_type -> terminology.ConceptGroup
	17, // 93: terminology.TerminologyService.UpsertConceptGroup:output_type -> terminology.ConceptGroup
	42, // 94: terminology.TerminologyService.DeleteConceptGroup:output_type -> google.protobuf.Empty
	22, // 95: terminology.TerminologyService.UpsertConceptMap:output_type -> terminology.ConceptMap
	22, // 96: terminology.TerminologyService.UploadConceptMap:output_type -> terminology.ConceptMap
	42, // 97: terminology.TerminologyService.DeleteConceptMap:output_type -> google.protobuf.Empty
	6,  // 98: terminology.TerminologyService.UpsertCodeGroupFolder:output_type -> terminology.CodeGroupFolder
	8,  // 99: terminology.TerminologyService.GetCodeGroupFolder:output_type -> terminology.GetCodeGroupFolderResp
	7,  // 100: terminology.TerminologyService.GetAllCodeGroupFolders:output_type -> terminology.CodeGroupFoldersListView
	42, // 101: terminology.TerminologyService.DeleteCodeGroupFolder:output_type -> google.protobuf.Empty
	0,  // 102: terminology.TerminologyService.UpsertConceptGroupFolder:output_type -> terminology.ConceptGroupFolder
	2,  // 103: terminology.TerminologyService.GetConceptGroupFolder:output_type -> terminology.GetConceptGroupFolderResp
	0,  // 104: terminology.TerminologyService.GetConceptGroupFolderByNameAndID:output_type -> terminology.ConceptGroupFolder
	1,  // 105: terminology.TerminologyService.GetAllConceptGroupFolders:output_type -> terminology.ConceptGroupFoldersListView
	42, // 106: terminology.TerminologyService.DeleteConceptGroupFolder:output_type -> google.protobuf.Empty
	81, // [81:107] is the sub-list for method output_type
	55, // [55:81] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_terminology_terminology_proto_init() }
func file_terminology_terminology_proto_init() {
	if File_terminology_terminology_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_terminology_terminology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptGroupFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptGroupFoldersListView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConceptGroupFolderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptGroupWithLightConceptMapsView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapLightView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertConceptGroupFolderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeGroupFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeGroupFoldersListView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeGroupFolderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeGroupWithLightCodeSystemView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemLightView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertCodeGroupFolderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConceptGroupWithMapsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapWithCodeSysView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertConceptMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadConceptMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptGroupWithConceptMapsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptGroupWithConceptMapView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSysMapVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSysMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertConceptGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertCodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeGroupWithCodeSystemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertCodeSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadCodeSystemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeGroupWithCodeSystemView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameAndIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_terminology_terminology_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConceptMapByNameAndUriReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_terminology_terminology_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_terminology_terminology_proto_msgTypes[30].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_terminology_terminology_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_terminology_terminology_proto_goTypes,
		DependencyIndexes: file_terminology_terminology_proto_depIdxs,
		MessageInfos:      file_terminology_terminology_proto_msgTypes,
	}.Build()
	File_terminology_terminology_proto = out.File
	file_terminology_terminology_proto_rawDesc = nil
	file_terminology_terminology_proto_goTypes = nil
	file_terminology_terminology_proto_depIdxs = nil
}
