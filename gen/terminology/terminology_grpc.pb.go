// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: terminology/terminology.proto

package terminology

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TerminologyService_GetAllCodeGroupsWithCodeSystems_FullMethodName    = "/terminology.TerminologyService/GetAllCodeGroupsWithCodeSystems"
	TerminologyService_GetCodeGroupWithCodeSystems_FullMethodName        = "/terminology.TerminologyService/GetCodeGroupWithCodeSystems"
	TerminologyService_UpsertCodeGroup_FullMethodName                    = "/terminology.TerminologyService/UpsertCodeGroup"
	TerminologyService_DeleteCodeGroup_FullMethodName                    = "/terminology.TerminologyService/DeleteCodeGroup"
	TerminologyService_UpsertCodeSystem_FullMethodName                   = "/terminology.TerminologyService/UpsertCodeSystem"
	TerminologyService_DeleteCodeSystem_FullMethodName                   = "/terminology.TerminologyService/DeleteCodeSystem"
	TerminologyService_UploadCodeSystem_FullMethodName                   = "/terminology.TerminologyService/UploadCodeSystem"
	TerminologyService_GetAllConceptGroupsWithConceptMaps_FullMethodName = "/terminology.TerminologyService/GetAllConceptGroupsWithConceptMaps"
	TerminologyService_GetConceptGroupWithMaps_FullMethodName            = "/terminology.TerminologyService/GetConceptGroupWithMaps"
	TerminologyService_UpsertConceptGroup_FullMethodName                 = "/terminology.TerminologyService/UpsertConceptGroup"
	TerminologyService_DeleteConceptGroup_FullMethodName                 = "/terminology.TerminologyService/DeleteConceptGroup"
	TerminologyService_UpsertConceptMap_FullMethodName                   = "/terminology.TerminologyService/UpsertConceptMap"
	TerminologyService_UploadConceptMap_FullMethodName                   = "/terminology.TerminologyService/UploadConceptMap"
	TerminologyService_DeleteConceptMap_FullMethodName                   = "/terminology.TerminologyService/DeleteConceptMap"
	TerminologyService_UpsertCodeGroupFolder_FullMethodName              = "/terminology.TerminologyService/UpsertCodeGroupFolder"
	TerminologyService_GetCodeGroupFolder_FullMethodName                 = "/terminology.TerminologyService/GetCodeGroupFolder"
	TerminologyService_GetAllCodeGroupFolders_FullMethodName             = "/terminology.TerminologyService/GetAllCodeGroupFolders"
	TerminologyService_DeleteCodeGroupFolder_FullMethodName              = "/terminology.TerminologyService/DeleteCodeGroupFolder"
	TerminologyService_UpsertConceptGroupFolder_FullMethodName           = "/terminology.TerminologyService/UpsertConceptGroupFolder"
	TerminologyService_GetConceptGroupFolder_FullMethodName              = "/terminology.TerminologyService/GetConceptGroupFolder"
	TerminologyService_GetAllConceptGroupFolders_FullMethodName          = "/terminology.TerminologyService/GetAllConceptGroupFolders"
	TerminologyService_DeleteConceptGroupFolder_FullMethodName           = "/terminology.TerminologyService/DeleteConceptGroupFolder"
)

// TerminologyServiceClient is the client API for TerminologyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerminologyServiceClient interface {
	GetAllCodeGroupsWithCodeSystems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCodeGroupWithCodeSystemsResponse, error)
	GetCodeGroupWithCodeSystems(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CodeGroupWithCodeSystemView, error)
	UpsertCodeGroup(ctx context.Context, in *UpsertCodeGroupRequest, opts ...grpc.CallOption) (*CodeGroup, error)
	DeleteCodeGroup(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpsertCodeSystem(ctx context.Context, in *UpsertCodeSystemRequest, opts ...grpc.CallOption) (*CodeSystem, error)
	DeleteCodeSystem(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UploadCodeSystem(ctx context.Context, in *UploadCodeSystemReq, opts ...grpc.CallOption) (*CodeSystem, error)
	GetAllConceptGroupsWithConceptMaps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConceptGroupWithConceptMapsResponse, error)
	GetConceptGroupWithMaps(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetConceptGroupWithMapsResp, error)
	UpsertConceptGroup(ctx context.Context, in *UpsertConceptGroupRequest, opts ...grpc.CallOption) (*ConceptGroup, error)
	DeleteConceptGroup(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpsertConceptMap(ctx context.Context, in *UpsertConceptMapReq, opts ...grpc.CallOption) (*ConceptMap, error)
	UploadConceptMap(ctx context.Context, in *UploadConceptMapReq, opts ...grpc.CallOption) (*ConceptMap, error)
	DeleteConceptMap(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpsertCodeGroupFolder(ctx context.Context, in *UpsertCodeGroupFolderReq, opts ...grpc.CallOption) (*CodeGroupFolder, error)
	GetCodeGroupFolder(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetCodeGroupFolderResp, error)
	GetAllCodeGroupFolders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CodeGroupFoldersListView, error)
	DeleteCodeGroupFolder(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpsertConceptGroupFolder(ctx context.Context, in *UpsertConceptGroupFolderReq, opts ...grpc.CallOption) (*ConceptGroupFolder, error)
	GetConceptGroupFolder(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetConceptGroupFolderResp, error)
	GetAllConceptGroupFolders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConceptGroupFoldersListView, error)
	DeleteConceptGroupFolder(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type terminologyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminologyServiceClient(cc grpc.ClientConnInterface) TerminologyServiceClient {
	return &terminologyServiceClient{cc}
}

func (c *terminologyServiceClient) GetAllCodeGroupsWithCodeSystems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCodeGroupWithCodeSystemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCodeGroupWithCodeSystemsResponse)
	err := c.cc.Invoke(ctx, TerminologyService_GetAllCodeGroupsWithCodeSystems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) GetCodeGroupWithCodeSystems(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CodeGroupWithCodeSystemView, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeGroupWithCodeSystemView)
	err := c.cc.Invoke(ctx, TerminologyService_GetCodeGroupWithCodeSystems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) UpsertCodeGroup(ctx context.Context, in *UpsertCodeGroupRequest, opts ...grpc.CallOption) (*CodeGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeGroup)
	err := c.cc.Invoke(ctx, TerminologyService_UpsertCodeGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) DeleteCodeGroup(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TerminologyService_DeleteCodeGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) UpsertCodeSystem(ctx context.Context, in *UpsertCodeSystemRequest, opts ...grpc.CallOption) (*CodeSystem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeSystem)
	err := c.cc.Invoke(ctx, TerminologyService_UpsertCodeSystem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) DeleteCodeSystem(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TerminologyService_DeleteCodeSystem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) UploadCodeSystem(ctx context.Context, in *UploadCodeSystemReq, opts ...grpc.CallOption) (*CodeSystem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeSystem)
	err := c.cc.Invoke(ctx, TerminologyService_UploadCodeSystem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) GetAllConceptGroupsWithConceptMaps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConceptGroupWithConceptMapsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConceptGroupWithConceptMapsResponse)
	err := c.cc.Invoke(ctx, TerminologyService_GetAllConceptGroupsWithConceptMaps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) GetConceptGroupWithMaps(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetConceptGroupWithMapsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConceptGroupWithMapsResp)
	err := c.cc.Invoke(ctx, TerminologyService_GetConceptGroupWithMaps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) UpsertConceptGroup(ctx context.Context, in *UpsertConceptGroupRequest, opts ...grpc.CallOption) (*ConceptGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConceptGroup)
	err := c.cc.Invoke(ctx, TerminologyService_UpsertConceptGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) DeleteConceptGroup(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TerminologyService_DeleteConceptGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) UpsertConceptMap(ctx context.Context, in *UpsertConceptMapReq, opts ...grpc.CallOption) (*ConceptMap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConceptMap)
	err := c.cc.Invoke(ctx, TerminologyService_UpsertConceptMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) UploadConceptMap(ctx context.Context, in *UploadConceptMapReq, opts ...grpc.CallOption) (*ConceptMap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConceptMap)
	err := c.cc.Invoke(ctx, TerminologyService_UploadConceptMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) DeleteConceptMap(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TerminologyService_DeleteConceptMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) UpsertCodeGroupFolder(ctx context.Context, in *UpsertCodeGroupFolderReq, opts ...grpc.CallOption) (*CodeGroupFolder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeGroupFolder)
	err := c.cc.Invoke(ctx, TerminologyService_UpsertCodeGroupFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) GetCodeGroupFolder(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetCodeGroupFolderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCodeGroupFolderResp)
	err := c.cc.Invoke(ctx, TerminologyService_GetCodeGroupFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) GetAllCodeGroupFolders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CodeGroupFoldersListView, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeGroupFoldersListView)
	err := c.cc.Invoke(ctx, TerminologyService_GetAllCodeGroupFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) DeleteCodeGroupFolder(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TerminologyService_DeleteCodeGroupFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) UpsertConceptGroupFolder(ctx context.Context, in *UpsertConceptGroupFolderReq, opts ...grpc.CallOption) (*ConceptGroupFolder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConceptGroupFolder)
	err := c.cc.Invoke(ctx, TerminologyService_UpsertConceptGroupFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) GetConceptGroupFolder(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetConceptGroupFolderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConceptGroupFolderResp)
	err := c.cc.Invoke(ctx, TerminologyService_GetConceptGroupFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) GetAllConceptGroupFolders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConceptGroupFoldersListView, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConceptGroupFoldersListView)
	err := c.cc.Invoke(ctx, TerminologyService_GetAllConceptGroupFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminologyServiceClient) DeleteConceptGroupFolder(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TerminologyService_DeleteConceptGroupFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminologyServiceServer is the server API for TerminologyService service.
// All implementations must embed UnimplementedTerminologyServiceServer
// for forward compatibility.
type TerminologyServiceServer interface {
	GetAllCodeGroupsWithCodeSystems(context.Context, *emptypb.Empty) (*GetCodeGroupWithCodeSystemsResponse, error)
	GetCodeGroupWithCodeSystems(context.Context, *IdRequest) (*CodeGroupWithCodeSystemView, error)
	UpsertCodeGroup(context.Context, *UpsertCodeGroupRequest) (*CodeGroup, error)
	DeleteCodeGroup(context.Context, *IdRequest) (*emptypb.Empty, error)
	UpsertCodeSystem(context.Context, *UpsertCodeSystemRequest) (*CodeSystem, error)
	DeleteCodeSystem(context.Context, *IdRequest) (*emptypb.Empty, error)
	UploadCodeSystem(context.Context, *UploadCodeSystemReq) (*CodeSystem, error)
	GetAllConceptGroupsWithConceptMaps(context.Context, *emptypb.Empty) (*ConceptGroupWithConceptMapsResponse, error)
	GetConceptGroupWithMaps(context.Context, *IdRequest) (*GetConceptGroupWithMapsResp, error)
	UpsertConceptGroup(context.Context, *UpsertConceptGroupRequest) (*ConceptGroup, error)
	DeleteConceptGroup(context.Context, *IdRequest) (*emptypb.Empty, error)
	UpsertConceptMap(context.Context, *UpsertConceptMapReq) (*ConceptMap, error)
	UploadConceptMap(context.Context, *UploadConceptMapReq) (*ConceptMap, error)
	DeleteConceptMap(context.Context, *IdRequest) (*emptypb.Empty, error)
	UpsertCodeGroupFolder(context.Context, *UpsertCodeGroupFolderReq) (*CodeGroupFolder, error)
	GetCodeGroupFolder(context.Context, *IdRequest) (*GetCodeGroupFolderResp, error)
	GetAllCodeGroupFolders(context.Context, *emptypb.Empty) (*CodeGroupFoldersListView, error)
	DeleteCodeGroupFolder(context.Context, *IdRequest) (*emptypb.Empty, error)
	UpsertConceptGroupFolder(context.Context, *UpsertConceptGroupFolderReq) (*ConceptGroupFolder, error)
	GetConceptGroupFolder(context.Context, *IdRequest) (*GetConceptGroupFolderResp, error)
	GetAllConceptGroupFolders(context.Context, *emptypb.Empty) (*ConceptGroupFoldersListView, error)
	DeleteConceptGroupFolder(context.Context, *IdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTerminologyServiceServer()
}

// UnimplementedTerminologyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTerminologyServiceServer struct{}

func (UnimplementedTerminologyServiceServer) GetAllCodeGroupsWithCodeSystems(context.Context, *emptypb.Empty) (*GetCodeGroupWithCodeSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCodeGroupsWithCodeSystems not implemented")
}
func (UnimplementedTerminologyServiceServer) GetCodeGroupWithCodeSystems(context.Context, *IdRequest) (*CodeGroupWithCodeSystemView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeGroupWithCodeSystems not implemented")
}
func (UnimplementedTerminologyServiceServer) UpsertCodeGroup(context.Context, *UpsertCodeGroupRequest) (*CodeGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCodeGroup not implemented")
}
func (UnimplementedTerminologyServiceServer) DeleteCodeGroup(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCodeGroup not implemented")
}
func (UnimplementedTerminologyServiceServer) UpsertCodeSystem(context.Context, *UpsertCodeSystemRequest) (*CodeSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCodeSystem not implemented")
}
func (UnimplementedTerminologyServiceServer) DeleteCodeSystem(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCodeSystem not implemented")
}
func (UnimplementedTerminologyServiceServer) UploadCodeSystem(context.Context, *UploadCodeSystemReq) (*CodeSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCodeSystem not implemented")
}
func (UnimplementedTerminologyServiceServer) GetAllConceptGroupsWithConceptMaps(context.Context, *emptypb.Empty) (*ConceptGroupWithConceptMapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConceptGroupsWithConceptMaps not implemented")
}
func (UnimplementedTerminologyServiceServer) GetConceptGroupWithMaps(context.Context, *IdRequest) (*GetConceptGroupWithMapsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConceptGroupWithMaps not implemented")
}
func (UnimplementedTerminologyServiceServer) UpsertConceptGroup(context.Context, *UpsertConceptGroupRequest) (*ConceptGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertConceptGroup not implemented")
}
func (UnimplementedTerminologyServiceServer) DeleteConceptGroup(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConceptGroup not implemented")
}
func (UnimplementedTerminologyServiceServer) UpsertConceptMap(context.Context, *UpsertConceptMapReq) (*ConceptMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertConceptMap not implemented")
}
func (UnimplementedTerminologyServiceServer) UploadConceptMap(context.Context, *UploadConceptMapReq) (*ConceptMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadConceptMap not implemented")
}
func (UnimplementedTerminologyServiceServer) DeleteConceptMap(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConceptMap not implemented")
}
func (UnimplementedTerminologyServiceServer) UpsertCodeGroupFolder(context.Context, *UpsertCodeGroupFolderReq) (*CodeGroupFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCodeGroupFolder not implemented")
}
func (UnimplementedTerminologyServiceServer) GetCodeGroupFolder(context.Context, *IdRequest) (*GetCodeGroupFolderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeGroupFolder not implemented")
}
func (UnimplementedTerminologyServiceServer) GetAllCodeGroupFolders(context.Context, *emptypb.Empty) (*CodeGroupFoldersListView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCodeGroupFolders not implemented")
}
func (UnimplementedTerminologyServiceServer) DeleteCodeGroupFolder(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCodeGroupFolder not implemented")
}
func (UnimplementedTerminologyServiceServer) UpsertConceptGroupFolder(context.Context, *UpsertConceptGroupFolderReq) (*ConceptGroupFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertConceptGroupFolder not implemented")
}
func (UnimplementedTerminologyServiceServer) GetConceptGroupFolder(context.Context, *IdRequest) (*GetConceptGroupFolderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConceptGroupFolder not implemented")
}
func (UnimplementedTerminologyServiceServer) GetAllConceptGroupFolders(context.Context, *emptypb.Empty) (*ConceptGroupFoldersListView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConceptGroupFolders not implemented")
}
func (UnimplementedTerminologyServiceServer) DeleteConceptGroupFolder(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConceptGroupFolder not implemented")
}
func (UnimplementedTerminologyServiceServer) mustEmbedUnimplementedTerminologyServiceServer() {}
func (UnimplementedTerminologyServiceServer) testEmbeddedByValue()                            {}

// UnsafeTerminologyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerminologyServiceServer will
// result in compilation errors.
type UnsafeTerminologyServiceServer interface {
	mustEmbedUnimplementedTerminologyServiceServer()
}

func RegisterTerminologyServiceServer(s grpc.ServiceRegistrar, srv TerminologyServiceServer) {
	// If the following call pancis, it indicates UnimplementedTerminologyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TerminologyService_ServiceDesc, srv)
}

func _TerminologyService_GetAllCodeGroupsWithCodeSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).GetAllCodeGroupsWithCodeSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_GetAllCodeGroupsWithCodeSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).GetAllCodeGroupsWithCodeSystems(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_GetCodeGroupWithCodeSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).GetCodeGroupWithCodeSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_GetCodeGroupWithCodeSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).GetCodeGroupWithCodeSystems(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_UpsertCodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).UpsertCodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_UpsertCodeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).UpsertCodeGroup(ctx, req.(*UpsertCodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_DeleteCodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).DeleteCodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_DeleteCodeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).DeleteCodeGroup(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_UpsertCodeSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCodeSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).UpsertCodeSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_UpsertCodeSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).UpsertCodeSystem(ctx, req.(*UpsertCodeSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_DeleteCodeSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).DeleteCodeSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_DeleteCodeSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).DeleteCodeSystem(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_UploadCodeSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCodeSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).UploadCodeSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_UploadCodeSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).UploadCodeSystem(ctx, req.(*UploadCodeSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_GetAllConceptGroupsWithConceptMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).GetAllConceptGroupsWithConceptMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_GetAllConceptGroupsWithConceptMaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).GetAllConceptGroupsWithConceptMaps(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_GetConceptGroupWithMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).GetConceptGroupWithMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_GetConceptGroupWithMaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).GetConceptGroupWithMaps(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_UpsertConceptGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertConceptGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).UpsertConceptGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_UpsertConceptGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).UpsertConceptGroup(ctx, req.(*UpsertConceptGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_DeleteConceptGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).DeleteConceptGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_DeleteConceptGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).DeleteConceptGroup(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_UpsertConceptMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertConceptMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).UpsertConceptMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_UpsertConceptMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).UpsertConceptMap(ctx, req.(*UpsertConceptMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_UploadConceptMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadConceptMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).UploadConceptMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_UploadConceptMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).UploadConceptMap(ctx, req.(*UploadConceptMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_DeleteConceptMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).DeleteConceptMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_DeleteConceptMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).DeleteConceptMap(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_UpsertCodeGroupFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCodeGroupFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).UpsertCodeGroupFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_UpsertCodeGroupFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).UpsertCodeGroupFolder(ctx, req.(*UpsertCodeGroupFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_GetCodeGroupFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).GetCodeGroupFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_GetCodeGroupFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).GetCodeGroupFolder(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_GetAllCodeGroupFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).GetAllCodeGroupFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_GetAllCodeGroupFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).GetAllCodeGroupFolders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_DeleteCodeGroupFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).DeleteCodeGroupFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_DeleteCodeGroupFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).DeleteCodeGroupFolder(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_UpsertConceptGroupFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertConceptGroupFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).UpsertConceptGroupFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_UpsertConceptGroupFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).UpsertConceptGroupFolder(ctx, req.(*UpsertConceptGroupFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_GetConceptGroupFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).GetConceptGroupFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_GetConceptGroupFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).GetConceptGroupFolder(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_GetAllConceptGroupFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).GetAllConceptGroupFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_GetAllConceptGroupFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).GetAllConceptGroupFolders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminologyService_DeleteConceptGroupFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminologyServiceServer).DeleteConceptGroupFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerminologyService_DeleteConceptGroupFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminologyServiceServer).DeleteConceptGroupFolder(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TerminologyService_ServiceDesc is the grpc.ServiceDesc for TerminologyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerminologyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terminology.TerminologyService",
	HandlerType: (*TerminologyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCodeGroupsWithCodeSystems",
			Handler:    _TerminologyService_GetAllCodeGroupsWithCodeSystems_Handler,
		},
		{
			MethodName: "GetCodeGroupWithCodeSystems",
			Handler:    _TerminologyService_GetCodeGroupWithCodeSystems_Handler,
		},
		{
			MethodName: "UpsertCodeGroup",
			Handler:    _TerminologyService_UpsertCodeGroup_Handler,
		},
		{
			MethodName: "DeleteCodeGroup",
			Handler:    _TerminologyService_DeleteCodeGroup_Handler,
		},
		{
			MethodName: "UpsertCodeSystem",
			Handler:    _TerminologyService_UpsertCodeSystem_Handler,
		},
		{
			MethodName: "DeleteCodeSystem",
			Handler:    _TerminologyService_DeleteCodeSystem_Handler,
		},
		{
			MethodName: "UploadCodeSystem",
			Handler:    _TerminologyService_UploadCodeSystem_Handler,
		},
		{
			MethodName: "GetAllConceptGroupsWithConceptMaps",
			Handler:    _TerminologyService_GetAllConceptGroupsWithConceptMaps_Handler,
		},
		{
			MethodName: "GetConceptGroupWithMaps",
			Handler:    _TerminologyService_GetConceptGroupWithMaps_Handler,
		},
		{
			MethodName: "UpsertConceptGroup",
			Handler:    _TerminologyService_UpsertConceptGroup_Handler,
		},
		{
			MethodName: "DeleteConceptGroup",
			Handler:    _TerminologyService_DeleteConceptGroup_Handler,
		},
		{
			MethodName: "UpsertConceptMap",
			Handler:    _TerminologyService_UpsertConceptMap_Handler,
		},
		{
			MethodName: "UploadConceptMap",
			Handler:    _TerminologyService_UploadConceptMap_Handler,
		},
		{
			MethodName: "DeleteConceptMap",
			Handler:    _TerminologyService_DeleteConceptMap_Handler,
		},
		{
			MethodName: "UpsertCodeGroupFolder",
			Handler:    _TerminologyService_UpsertCodeGroupFolder_Handler,
		},
		{
			MethodName: "GetCodeGroupFolder",
			Handler:    _TerminologyService_GetCodeGroupFolder_Handler,
		},
		{
			MethodName: "GetAllCodeGroupFolders",
			Handler:    _TerminologyService_GetAllCodeGroupFolders_Handler,
		},
		{
			MethodName: "DeleteCodeGroupFolder",
			Handler:    _TerminologyService_DeleteCodeGroupFolder_Handler,
		},
		{
			MethodName: "UpsertConceptGroupFolder",
			Handler:    _TerminologyService_UpsertConceptGroupFolder_Handler,
		},
		{
			MethodName: "GetConceptGroupFolder",
			Handler:    _TerminologyService_GetConceptGroupFolder_Handler,
		},
		{
			MethodName: "GetAllConceptGroupFolders",
			Handler:    _TerminologyService_GetAllConceptGroupFolders_Handler,
		},
		{
			MethodName: "DeleteConceptGroupFolder",
			Handler:    _TerminologyService_DeleteConceptGroupFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terminology/terminology.proto",
}
