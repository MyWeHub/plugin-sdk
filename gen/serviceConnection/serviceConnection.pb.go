// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: serviceConnection/serviceConnection.proto

package serviceConnection

import (
	auditlog "github.com/MyWeHub/plugin-sdk/gen/auditlog"
	_ "github.com/amsokol/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnectionType int32

const (
	ConnectionType_CONNECTION_SFTP               ConnectionType = 0
	ConnectionType_CONNECTION_MONGO              ConnectionType = 1
	ConnectionType_CONNECTION_AMQP               ConnectionType = 2
	ConnectionType_CONNECTION_KAFKA              ConnectionType = 3
	ConnectionType_CONNECTION_HTTP               ConnectionType = 4
	ConnectionType_CONNECTION_REDIS              ConnectionType = 5
	ConnectionType_CONNECTION_TWILIO             ConnectionType = 6
	ConnectionType_CONNECTION_SENDGRID           ConnectionType = 7
	ConnectionType_CONNECTION_COSMOSDB           ConnectionType = 8
	ConnectionType_CONNECTION_MYSQL              ConnectionType = 9
	ConnectionType_CONNECTION_MSSQL              ConnectionType = 10
	ConnectionType_CONNECTION_POSTGRES           ConnectionType = 11
	ConnectionType_CONNECTION_COSMOSDB_TABLE     ConnectionType = 12
	ConnectionType_CONNECTION_COSMOSDB_NOSQL     ConnectionType = 13
	ConnectionType_CONNECTION_SLACK              ConnectionType = 14
	ConnectionType_CONNECTION_TCP_IP             ConnectionType = 15
	ConnectionType_CONNECTION_BLOB_STORAGE       ConnectionType = 16
	ConnectionType_CONNECTION_DYNAMODB           ConnectionType = 17
	ConnectionType_CONNECTION_SNS                ConnectionType = 18
	ConnectionType_CONNECTION_SQS                ConnectionType = 19
	ConnectionType_CONNECTION_AWS_SECRET_MANAGER ConnectionType = 20
	ConnectionType_CONNECTION_AZURE_KEY_VAULT    ConnectionType = 21
	ConnectionType_CONNECTION_AWS_S3             ConnectionType = 22
	ConnectionType_CONNECTION_ELASTICSEARCH      ConnectionType = 23
	ConnectionType_CONNECTION_OPENAI             ConnectionType = 24
	ConnectionType_CONNECTION_MS_TEAMS           ConnectionType = 25
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0:  "CONNECTION_SFTP",
		1:  "CONNECTION_MONGO",
		2:  "CONNECTION_AMQP",
		3:  "CONNECTION_KAFKA",
		4:  "CONNECTION_HTTP",
		5:  "CONNECTION_REDIS",
		6:  "CONNECTION_TWILIO",
		7:  "CONNECTION_SENDGRID",
		8:  "CONNECTION_COSMOSDB",
		9:  "CONNECTION_MYSQL",
		10: "CONNECTION_MSSQL",
		11: "CONNECTION_POSTGRES",
		12: "CONNECTION_COSMOSDB_TABLE",
		13: "CONNECTION_COSMOSDB_NOSQL",
		14: "CONNECTION_SLACK",
		15: "CONNECTION_TCP_IP",
		16: "CONNECTION_BLOB_STORAGE",
		17: "CONNECTION_DYNAMODB",
		18: "CONNECTION_SNS",
		19: "CONNECTION_SQS",
		20: "CONNECTION_AWS_SECRET_MANAGER",
		21: "CONNECTION_AZURE_KEY_VAULT",
		22: "CONNECTION_AWS_S3",
		23: "CONNECTION_ELASTICSEARCH",
		24: "CONNECTION_OPENAI",
		25: "CONNECTION_MS_TEAMS",
	}
	ConnectionType_value = map[string]int32{
		"CONNECTION_SFTP":               0,
		"CONNECTION_MONGO":              1,
		"CONNECTION_AMQP":               2,
		"CONNECTION_KAFKA":              3,
		"CONNECTION_HTTP":               4,
		"CONNECTION_REDIS":              5,
		"CONNECTION_TWILIO":             6,
		"CONNECTION_SENDGRID":           7,
		"CONNECTION_COSMOSDB":           8,
		"CONNECTION_MYSQL":              9,
		"CONNECTION_MSSQL":              10,
		"CONNECTION_POSTGRES":           11,
		"CONNECTION_COSMOSDB_TABLE":     12,
		"CONNECTION_COSMOSDB_NOSQL":     13,
		"CONNECTION_SLACK":              14,
		"CONNECTION_TCP_IP":             15,
		"CONNECTION_BLOB_STORAGE":       16,
		"CONNECTION_DYNAMODB":           17,
		"CONNECTION_SNS":                18,
		"CONNECTION_SQS":                19,
		"CONNECTION_AWS_SECRET_MANAGER": 20,
		"CONNECTION_AZURE_KEY_VAULT":    21,
		"CONNECTION_AWS_S3":             22,
		"CONNECTION_ELASTICSEARCH":      23,
		"CONNECTION_OPENAI":             24,
		"CONNECTION_MS_TEAMS":           25,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceConnection_serviceConnection_proto_enumTypes[0].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_serviceConnection_serviceConnection_proto_enumTypes[0]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{0}
}

type ApiKeyLocation int32

const (
	ApiKeyLocation_HEADER        ApiKeyLocation = 0
	ApiKeyLocation_QUERY_PSTRING ApiKeyLocation = 1
)

// Enum value maps for ApiKeyLocation.
var (
	ApiKeyLocation_name = map[int32]string{
		0: "HEADER",
		1: "QUERY_PSTRING",
	}
	ApiKeyLocation_value = map[string]int32{
		"HEADER":        0,
		"QUERY_PSTRING": 1,
	}
)

func (x ApiKeyLocation) Enum() *ApiKeyLocation {
	p := new(ApiKeyLocation)
	*p = x
	return p
}

func (x ApiKeyLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiKeyLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceConnection_serviceConnection_proto_enumTypes[1].Descriptor()
}

func (ApiKeyLocation) Type() protoreflect.EnumType {
	return &file_serviceConnection_serviceConnection_proto_enumTypes[1]
}

func (x ApiKeyLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApiKeyLocation.Descriptor instead.
func (ApiKeyLocation) EnumDescriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{1}
}

type SignatureMethod int32

const (
	SignatureMethod_HMAC_SHA1   SignatureMethod = 0
	SignatureMethod_HMAC_SHA256 SignatureMethod = 1
	SignatureMethod_HMAC_SHA512 SignatureMethod = 2
	SignatureMethod_RSA_SHA1    SignatureMethod = 3
	SignatureMethod_RSA_SHA256  SignatureMethod = 4
	SignatureMethod_RSA_SHA512  SignatureMethod = 5
	SignatureMethod_PLAINTEXT   SignatureMethod = 6
)

// Enum value maps for SignatureMethod.
var (
	SignatureMethod_name = map[int32]string{
		0: "HMAC_SHA1",
		1: "HMAC_SHA256",
		2: "HMAC_SHA512",
		3: "RSA_SHA1",
		4: "RSA_SHA256",
		5: "RSA_SHA512",
		6: "PLAINTEXT",
	}
	SignatureMethod_value = map[string]int32{
		"HMAC_SHA1":   0,
		"HMAC_SHA256": 1,
		"HMAC_SHA512": 2,
		"RSA_SHA1":    3,
		"RSA_SHA256":  4,
		"RSA_SHA512":  5,
		"PLAINTEXT":   6,
	}
)

func (x SignatureMethod) Enum() *SignatureMethod {
	p := new(SignatureMethod)
	*p = x
	return p
}

func (x SignatureMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceConnection_serviceConnection_proto_enumTypes[2].Descriptor()
}

func (SignatureMethod) Type() protoreflect.EnumType {
	return &file_serviceConnection_serviceConnection_proto_enumTypes[2]
}

func (x SignatureMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureMethod.Descriptor instead.
func (SignatureMethod) EnumDescriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{2}
}

type HTTPMethod int32

const (
	HTTPMethod_METHOD_GET  HTTPMethod = 0
	HTTPMethod_METHOD_POST HTTPMethod = 1
	HTTPMethod_METHOD_PUT  HTTPMethod = 2
)

// Enum value maps for HTTPMethod.
var (
	HTTPMethod_name = map[int32]string{
		0: "METHOD_GET",
		1: "METHOD_POST",
		2: "METHOD_PUT",
	}
	HTTPMethod_value = map[string]int32{
		"METHOD_GET":  0,
		"METHOD_POST": 1,
		"METHOD_PUT":  2,
	}
)

func (x HTTPMethod) Enum() *HTTPMethod {
	p := new(HTTPMethod)
	*p = x
	return p
}

func (x HTTPMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_serviceConnection_serviceConnection_proto_enumTypes[3].Descriptor()
}

func (HTTPMethod) Type() protoreflect.EnumType {
	return &file_serviceConnection_serviceConnection_proto_enumTypes[3]
}

func (x HTTPMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPMethod.Descriptor instead.
func (HTTPMethod) EnumDescriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{3}
}

type IdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdMessage) Reset() {
	*x = IdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdMessage) ProtoMessage() {}

func (x *IdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdMessage.ProtoReflect.Descriptor instead.
func (*IdMessage) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{0}
}

func (x *IdMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IdsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IdsMessage) Reset() {
	*x = IdsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdsMessage) ProtoMessage() {}

func (x *IdsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdsMessage.ProtoReflect.Descriptor instead.
func (*IdsMessage) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{1}
}

func (x *IdsMessage) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ListConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionType   *ConnectionType `protobuf:"varint,1,opt,name=connectionType,proto3,enum=serviceConnection.ConnectionType,oneof" json:"connectionType,omitempty"`
	OverrideClientID *string         `protobuf:"bytes,2,opt,name=overrideClientID,proto3,oneof" json:"overrideClientID,omitempty"`
}

func (x *ListConnectionRequest) Reset() {
	*x = ListConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionRequest) ProtoMessage() {}

func (x *ListConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionRequest.ProtoReflect.Descriptor instead.
func (*ListConnectionRequest) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{2}
}

func (x *ListConnectionRequest) GetConnectionType() ConnectionType {
	if x != nil && x.ConnectionType != nil {
		return *x.ConnectionType
	}
	return ConnectionType_CONNECTION_SFTP
}

func (x *ListConnectionRequest) GetOverrideClientID() string {
	if x != nil && x.OverrideClientID != nil {
		return *x.OverrideClientID
	}
	return ""
}

type ListConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *ListConnectionResponse) Reset() {
	*x = ListConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionResponse) ProtoMessage() {}

func (x *ListConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionResponse.ProtoReflect.Descriptor instead.
func (*ListConnectionResponse) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{3}
}

func (x *ListConnectionResponse) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ConnectionsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *ConnectionsMessage) Reset() {
	*x = ConnectionsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionsMessage) ProtoMessage() {}

func (x *ConnectionsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionsMessage.ProtoReflect.Descriptor instead.
func (*ConnectionsMessage) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{4}
}

func (x *ConnectionsMessage) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type UpdateConnectionsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection                `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	Log        *auditlog.CreateLogRequest `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *UpdateConnectionsMessage) Reset() {
	*x = UpdateConnectionsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConnectionsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionsMessage) ProtoMessage() {}

func (x *UpdateConnectionsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionsMessage.ProtoReflect.Descriptor instead.
func (*UpdateConnectionsMessage) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateConnectionsMessage) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *UpdateConnectionsMessage) GetLog() *auditlog.CreateLogRequest {
	if x != nil {
		return x.Log
	}
	return nil
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id" yaml:"-"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ConnectionType ConnectionType         `protobuf:"varint,4,opt,name=connectionType,proto3,enum=serviceConnection.ConnectionType" json:"connectionType,omitempty"`
	ParentFolder   string                 `protobuf:"bytes,5,opt,name=parentFolder,proto3" json:"parentFolder,omitempty"`
	ClientId       string                 `protobuf:"bytes,6,opt,name=clientId,proto3" json:"clientId,omitempty"`
	IsGlobal       bool                   `protobuf:"varint,7,opt,name=isGlobal,proto3" json:"isglobal" bson:"isglobal"`
	PartitionKey   string                 `protobuf:"bytes,8,opt,name=partitionKey,proto3" json:"partitionKey,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// Types that are assignable to ConnectionOneof:
	//
	//	*Connection_HttpConnection
	//	*Connection_MongoConnection
	//	*Connection_AmqpConnection
	//	*Connection_SftpConnection
	//	*Connection_KafkaConnection
	//	*Connection_RedisConnection
	//	*Connection_TwilioConnection
	//	*Connection_SendgridConnection
	//	*Connection_CosmosdbConnection
	//	*Connection_MysqlConnection
	//	*Connection_MssqlConnection
	//	*Connection_PostgresConnection
	//	*Connection_CosmosdbTableConnection
	//	*Connection_CosmosdbNoSQLConnection
	//	*Connection_SlackConnection
	//	*Connection_TcpIp_Connection
	//	*Connection_BlobStorageConnection
	//	*Connection_DynamoDBConnection
	//	*Connection_SnsConnection
	//	*Connection_SqsConnection
	//	*Connection_AwsSecretManagerConnection
	//	*Connection_AzureKeyVaultConnection
	//	*Connection_AwsS3Connection
	//	*Connection_ElasticsearchConnection
	//	*Connection_OpenaiConnection
	//	*Connection_MsteamsConnection
	ConnectionOneof isConnection_ConnectionOneof `protobuf_oneof:"connection_oneof" bson:"-" json:"-"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{6}
}

func (x *Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Connection) GetConnectionType() ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return ConnectionType_CONNECTION_SFTP
}

func (x *Connection) GetParentFolder() string {
	if x != nil {
		return x.ParentFolder
	}
	return ""
}

func (x *Connection) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Connection) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

func (x *Connection) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *Connection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Connection) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (m *Connection) GetConnectionOneof() isConnection_ConnectionOneof {
	if m != nil {
		return m.ConnectionOneof
	}
	return nil
}

func (x *Connection) GetHttpConnection() *HTTPConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_HttpConnection); ok {
		return x.HttpConnection
	}
	return nil
}

func (x *Connection) GetMongoConnection() *MongoConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_MongoConnection); ok {
		return x.MongoConnection
	}
	return nil
}

func (x *Connection) GetAmqpConnection() *AMQPConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_AmqpConnection); ok {
		return x.AmqpConnection
	}
	return nil
}

func (x *Connection) GetSftpConnection() *SFTPConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_SftpConnection); ok {
		return x.SftpConnection
	}
	return nil
}

func (x *Connection) GetKafkaConnection() *KafkaConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_KafkaConnection); ok {
		return x.KafkaConnection
	}
	return nil
}

func (x *Connection) GetRedisConnection() *RedisConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_RedisConnection); ok {
		return x.RedisConnection
	}
	return nil
}

func (x *Connection) GetTwilioConnection() *TwilioConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_TwilioConnection); ok {
		return x.TwilioConnection
	}
	return nil
}

func (x *Connection) GetSendgridConnection() *SendGridConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_SendgridConnection); ok {
		return x.SendgridConnection
	}
	return nil
}

func (x *Connection) GetCosmosdbConnection() *CosmosDBConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_CosmosdbConnection); ok {
		return x.CosmosdbConnection
	}
	return nil
}

func (x *Connection) GetMysqlConnection() *MySQLConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_MysqlConnection); ok {
		return x.MysqlConnection
	}
	return nil
}

func (x *Connection) GetMssqlConnection() *MsSQLConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_MssqlConnection); ok {
		return x.MssqlConnection
	}
	return nil
}

func (x *Connection) GetPostgresConnection() *PostgresConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_PostgresConnection); ok {
		return x.PostgresConnection
	}
	return nil
}

func (x *Connection) GetCosmosdbTableConnection() *CosmosDBTableConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_CosmosdbTableConnection); ok {
		return x.CosmosdbTableConnection
	}
	return nil
}

func (x *Connection) GetCosmosdbNoSQLConnection() *CosmosDBNoSQLConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_CosmosdbNoSQLConnection); ok {
		return x.CosmosdbNoSQLConnection
	}
	return nil
}

func (x *Connection) GetSlackConnection() *SlackConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_SlackConnection); ok {
		return x.SlackConnection
	}
	return nil
}

func (x *Connection) GetTcpIp_Connection() *TCP_IP_Connection {
	if x, ok := x.GetConnectionOneof().(*Connection_TcpIp_Connection); ok {
		return x.TcpIp_Connection
	}
	return nil
}

func (x *Connection) GetBlobStorageConnection() *BlobStorageConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_BlobStorageConnection); ok {
		return x.BlobStorageConnection
	}
	return nil
}

func (x *Connection) GetDynamoDBConnection() *DynamoDBConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_DynamoDBConnection); ok {
		return x.DynamoDBConnection
	}
	return nil
}

func (x *Connection) GetSnsConnection() *SNSConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_SnsConnection); ok {
		return x.SnsConnection
	}
	return nil
}

func (x *Connection) GetSqsConnection() *SQSConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_SqsConnection); ok {
		return x.SqsConnection
	}
	return nil
}

func (x *Connection) GetAwsSecretManagerConnection() *AWSSecretManagerConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_AwsSecretManagerConnection); ok {
		return x.AwsSecretManagerConnection
	}
	return nil
}

func (x *Connection) GetAzureKeyVaultConnection() *AzureKeyVaultConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_AzureKeyVaultConnection); ok {
		return x.AzureKeyVaultConnection
	}
	return nil
}

func (x *Connection) GetAwsS3Connection() *AwsS3Connection {
	if x, ok := x.GetConnectionOneof().(*Connection_AwsS3Connection); ok {
		return x.AwsS3Connection
	}
	return nil
}

func (x *Connection) GetElasticsearchConnection() *ElasticsearchConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_ElasticsearchConnection); ok {
		return x.ElasticsearchConnection
	}
	return nil
}

func (x *Connection) GetOpenaiConnection() *OpenaiConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_OpenaiConnection); ok {
		return x.OpenaiConnection
	}
	return nil
}

func (x *Connection) GetMsteamsConnection() *MsteamsConnection {
	if x, ok := x.GetConnectionOneof().(*Connection_MsteamsConnection); ok {
		return x.MsteamsConnection
	}
	return nil
}

type isConnection_ConnectionOneof interface {
	isConnection_ConnectionOneof()
}

type Connection_HttpConnection struct {
	HttpConnection *HTTPConnection `protobuf:"bytes,11,opt,name=httpConnection,proto3,oneof"` //[(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_MongoConnection struct {
	MongoConnection *MongoConnection `protobuf:"bytes,12,opt,name=mongoConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_AmqpConnection struct {
	AmqpConnection *AMQPConnection `protobuf:"bytes,13,opt,name=amqpConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_SftpConnection struct {
	SftpConnection *SFTPConnection `protobuf:"bytes,14,opt,name=sftpConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_KafkaConnection struct {
	KafkaConnection *KafkaConnection `protobuf:"bytes,15,opt,name=kafkaConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_RedisConnection struct {
	RedisConnection *RedisConnection `protobuf:"bytes,16,opt,name=redisConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_TwilioConnection struct {
	TwilioConnection *TwilioConnection `protobuf:"bytes,17,opt,name=twilioConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_SendgridConnection struct {
	SendgridConnection *SendGridConnection `protobuf:"bytes,18,opt,name=sendgridConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_CosmosdbConnection struct {
	CosmosdbConnection *CosmosDBConnection `protobuf:"bytes,19,opt,name=cosmosdbConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_MysqlConnection struct {
	MysqlConnection *MySQLConnection `protobuf:"bytes,20,opt,name=mysqlConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_MssqlConnection struct {
	MssqlConnection *MsSQLConnection `protobuf:"bytes,21,opt,name=mssqlConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_PostgresConnection struct {
	PostgresConnection *PostgresConnection `protobuf:"bytes,22,opt,name=postgresConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_CosmosdbTableConnection struct {
	CosmosdbTableConnection *CosmosDBTableConnection `protobuf:"bytes,23,opt,name=cosmosdbTableConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_CosmosdbNoSQLConnection struct {
	CosmosdbNoSQLConnection *CosmosDBNoSQLConnection `protobuf:"bytes,24,opt,name=cosmosdbNoSQLConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_SlackConnection struct {
	SlackConnection *SlackConnection `protobuf:"bytes,25,opt,name=slackConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_TcpIp_Connection struct {
	TcpIp_Connection *TCP_IP_Connection `protobuf:"bytes,26,opt,name=tcp_ip_Connection,json=tcpIpConnection,proto3,oneof"` // [(tagger.tags) = "bson:\"omitempty\"" ];
}

type Connection_BlobStorageConnection struct {
	BlobStorageConnection *BlobStorageConnection `protobuf:"bytes,27,opt,name=blobStorageConnection,proto3,oneof"`
}

type Connection_DynamoDBConnection struct {
	DynamoDBConnection *DynamoDBConnection `protobuf:"bytes,28,opt,name=dynamoDBConnection,proto3,oneof"`
}

type Connection_SnsConnection struct {
	SnsConnection *SNSConnection `protobuf:"bytes,29,opt,name=snsConnection,proto3,oneof"`
}

type Connection_SqsConnection struct {
	SqsConnection *SQSConnection `protobuf:"bytes,30,opt,name=sqsConnection,proto3,oneof"`
}

type Connection_AwsSecretManagerConnection struct {
	AwsSecretManagerConnection *AWSSecretManagerConnection `protobuf:"bytes,31,opt,name=awsSecretManagerConnection,proto3,oneof"`
}

type Connection_AzureKeyVaultConnection struct {
	AzureKeyVaultConnection *AzureKeyVaultConnection `protobuf:"bytes,32,opt,name=azureKeyVaultConnection,proto3,oneof"`
}

type Connection_AwsS3Connection struct {
	AwsS3Connection *AwsS3Connection `protobuf:"bytes,33,opt,name=awsS3Connection,proto3,oneof"`
}

type Connection_ElasticsearchConnection struct {
	ElasticsearchConnection *ElasticsearchConnection `protobuf:"bytes,34,opt,name=elasticsearchConnection,proto3,oneof"`
}

type Connection_OpenaiConnection struct {
	OpenaiConnection *OpenaiConnection `protobuf:"bytes,35,opt,name=openaiConnection,proto3,oneof"`
}

type Connection_MsteamsConnection struct {
	MsteamsConnection *MsteamsConnection `protobuf:"bytes,36,opt,name=msteamsConnection,proto3,oneof"`
}

func (*Connection_HttpConnection) isConnection_ConnectionOneof() {}

func (*Connection_MongoConnection) isConnection_ConnectionOneof() {}

func (*Connection_AmqpConnection) isConnection_ConnectionOneof() {}

func (*Connection_SftpConnection) isConnection_ConnectionOneof() {}

func (*Connection_KafkaConnection) isConnection_ConnectionOneof() {}

func (*Connection_RedisConnection) isConnection_ConnectionOneof() {}

func (*Connection_TwilioConnection) isConnection_ConnectionOneof() {}

func (*Connection_SendgridConnection) isConnection_ConnectionOneof() {}

func (*Connection_CosmosdbConnection) isConnection_ConnectionOneof() {}

func (*Connection_MysqlConnection) isConnection_ConnectionOneof() {}

func (*Connection_MssqlConnection) isConnection_ConnectionOneof() {}

func (*Connection_PostgresConnection) isConnection_ConnectionOneof() {}

func (*Connection_CosmosdbTableConnection) isConnection_ConnectionOneof() {}

func (*Connection_CosmosdbNoSQLConnection) isConnection_ConnectionOneof() {}

func (*Connection_SlackConnection) isConnection_ConnectionOneof() {}

func (*Connection_TcpIp_Connection) isConnection_ConnectionOneof() {}

func (*Connection_BlobStorageConnection) isConnection_ConnectionOneof() {}

func (*Connection_DynamoDBConnection) isConnection_ConnectionOneof() {}

func (*Connection_SnsConnection) isConnection_ConnectionOneof() {}

func (*Connection_SqsConnection) isConnection_ConnectionOneof() {}

func (*Connection_AwsSecretManagerConnection) isConnection_ConnectionOneof() {}

func (*Connection_AzureKeyVaultConnection) isConnection_ConnectionOneof() {}

func (*Connection_AwsS3Connection) isConnection_ConnectionOneof() {}

func (*Connection_ElasticsearchConnection) isConnection_ConnectionOneof() {}

func (*Connection_OpenaiConnection) isConnection_ConnectionOneof() {}

func (*Connection_MsteamsConnection) isConnection_ConnectionOneof() {}

type TCP_IP_Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"-" bson:"-" yaml:"uri"`
}

func (x *TCP_IP_Connection) Reset() {
	*x = TCP_IP_Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCP_IP_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCP_IP_Connection) ProtoMessage() {}

func (x *TCP_IP_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCP_IP_Connection.ProtoReflect.Descriptor instead.
func (*TCP_IP_Connection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{7}
}

func (x *TCP_IP_Connection) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CosmosDBConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri    string `protobuf:"bytes,1,opt,name=uri,proto3" json:"-" bson:"-" yaml:"uri"`
	DbName string `protobuf:"bytes,2,opt,name=dbName,proto3" json:"-" bson:"-" yaml:"dbName"`
}

func (x *CosmosDBConnection) Reset() {
	*x = CosmosDBConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmosDBConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmosDBConnection) ProtoMessage() {}

func (x *CosmosDBConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmosDBConnection.ProtoReflect.Descriptor instead.
func (*CosmosDBConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{8}
}

func (x *CosmosDBConnection) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CosmosDBConnection) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

type HTTPConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUrl        string    `protobuf:"bytes,1,opt,name=baseUrl,proto3" json:"baseUrl,omitempty" yaml:"baseurl"`
	Authentication bool      `protobuf:"varint,2,opt,name=authentication,proto3" json:"authentication,omitempty" yaml:"authentication"`
	Headers        []*Header `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	// Types that are assignable to AuthenticationOneof:
	//
	//	*HTTPConnection_Basic
	//	*HTTPConnection_Digest
	//	*HTTPConnection_Bearer
	//	*HTTPConnection_ApiKey
	//	*HTTPConnection_OauthOne
	//	*HTTPConnection_OauthTwo
	AuthenticationOneof isHTTPConnection_AuthenticationOneof `protobuf_oneof:"authentication_oneof" yaml:",omitempty" json:"authentication_oneof,omitempty"`
}

func (x *HTTPConnection) Reset() {
	*x = HTTPConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPConnection) ProtoMessage() {}

func (x *HTTPConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPConnection.ProtoReflect.Descriptor instead.
func (*HTTPConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{9}
}

func (x *HTTPConnection) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *HTTPConnection) GetAuthentication() bool {
	if x != nil {
		return x.Authentication
	}
	return false
}

func (x *HTTPConnection) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (m *HTTPConnection) GetAuthenticationOneof() isHTTPConnection_AuthenticationOneof {
	if m != nil {
		return m.AuthenticationOneof
	}
	return nil
}

func (x *HTTPConnection) GetBasic() *AuthenticationMethodBasic {
	if x, ok := x.GetAuthenticationOneof().(*HTTPConnection_Basic); ok {
		return x.Basic
	}
	return nil
}

func (x *HTTPConnection) GetDigest() *AuthenticationMethodUP {
	if x, ok := x.GetAuthenticationOneof().(*HTTPConnection_Digest); ok {
		return x.Digest
	}
	return nil
}

func (x *HTTPConnection) GetBearer() *AuthenticationMethodBearer {
	if x, ok := x.GetAuthenticationOneof().(*HTTPConnection_Bearer); ok {
		return x.Bearer
	}
	return nil
}

func (x *HTTPConnection) GetApiKey() *AuthenticationMethodApiKey {
	if x, ok := x.GetAuthenticationOneof().(*HTTPConnection_ApiKey); ok {
		return x.ApiKey
	}
	return nil
}

func (x *HTTPConnection) GetOauthOne() *AuthenticationMethodOauthOne {
	if x, ok := x.GetAuthenticationOneof().(*HTTPConnection_OauthOne); ok {
		return x.OauthOne
	}
	return nil
}

func (x *HTTPConnection) GetOauthTwo() *AuthenticationMethodOauthTwo {
	if x, ok := x.GetAuthenticationOneof().(*HTTPConnection_OauthTwo); ok {
		return x.OauthTwo
	}
	return nil
}

type isHTTPConnection_AuthenticationOneof interface {
	isHTTPConnection_AuthenticationOneof()
}

type HTTPConnection_Basic struct {
	Basic *AuthenticationMethodBasic `protobuf:"bytes,4,opt,name=basic,proto3,oneof"`
}

type HTTPConnection_Digest struct {
	Digest *AuthenticationMethodUP `protobuf:"bytes,5,opt,name=digest,proto3,oneof"`
}

type HTTPConnection_Bearer struct {
	Bearer *AuthenticationMethodBearer `protobuf:"bytes,6,opt,name=bearer,proto3,oneof"`
}

type HTTPConnection_ApiKey struct {
	ApiKey *AuthenticationMethodApiKey `protobuf:"bytes,7,opt,name=apiKey,proto3,oneof"`
}

type HTTPConnection_OauthOne struct {
	OauthOne *AuthenticationMethodOauthOne `protobuf:"bytes,8,opt,name=oauthOne,proto3,oneof"`
}

type HTTPConnection_OauthTwo struct {
	OauthTwo *AuthenticationMethodOauthTwo `protobuf:"bytes,9,opt,name=oauthTwo,proto3,oneof"`
}

func (*HTTPConnection_Basic) isHTTPConnection_AuthenticationOneof() {}

func (*HTTPConnection_Digest) isHTTPConnection_AuthenticationOneof() {}

func (*HTTPConnection_Bearer) isHTTPConnection_AuthenticationOneof() {}

func (*HTTPConnection_ApiKey) isHTTPConnection_AuthenticationOneof() {}

func (*HTTPConnection_OauthOne) isHTTPConnection_AuthenticationOneof() {}

func (*HTTPConnection_OauthTwo) isHTTPConnection_AuthenticationOneof() {}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{10}
}

func (x *Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AuthenticationMethodBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string    `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" yaml:"username"`
	Password string    `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" yaml:"password"`
	Url      string    `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty" yaml:"uri"`
	Headers  []*Header `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" yaml:"headers"`
}

func (x *AuthenticationMethodBasic) Reset() {
	*x = AuthenticationMethodBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationMethodBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationMethodBasic) ProtoMessage() {}

func (x *AuthenticationMethodBasic) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationMethodBasic.ProtoReflect.Descriptor instead.
func (*AuthenticationMethodBasic) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{11}
}

func (x *AuthenticationMethodBasic) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthenticationMethodBasic) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthenticationMethodBasic) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AuthenticationMethodBasic) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

type AuthenticationMethodUP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" yaml:"username"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" yaml:"password"`
}

func (x *AuthenticationMethodUP) Reset() {
	*x = AuthenticationMethodUP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationMethodUP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationMethodUP) ProtoMessage() {}

func (x *AuthenticationMethodUP) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationMethodUP.ProtoReflect.Descriptor instead.
func (*AuthenticationMethodUP) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{12}
}

func (x *AuthenticationMethodUP) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthenticationMethodUP) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthenticationMethodBearer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          *string               `protobuf:"bytes,1,opt,name=token,proto3,oneof" json:"token,omitempty" yaml:"token"`
	GenerateToken  bool                  `protobuf:"varint,2,opt,name=generateToken,proto3" json:"generateToken,omitempty" yaml:"generateToken"`
	GenerateOption *BearerGenerateOption `protobuf:"bytes,3,opt,name=generateOption,proto3,oneof" json:"generateOption,omitempty" yaml:"generateOption"`
}

func (x *AuthenticationMethodBearer) Reset() {
	*x = AuthenticationMethodBearer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationMethodBearer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationMethodBearer) ProtoMessage() {}

func (x *AuthenticationMethodBearer) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationMethodBearer.ProtoReflect.Descriptor instead.
func (*AuthenticationMethodBearer) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{13}
}

func (x *AuthenticationMethodBearer) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *AuthenticationMethodBearer) GetGenerateToken() bool {
	if x != nil {
		return x.GenerateToken
	}
	return false
}

func (x *AuthenticationMethodBearer) GetGenerateOption() *BearerGenerateOption {
	if x != nil {
		return x.GenerateOption
	}
	return nil
}

type AuthenticationMethodApiKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       string         `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" yaml:"token"`
	KeyLocation ApiKeyLocation `protobuf:"varint,2,opt,name=keyLocation,proto3,enum=serviceConnection.ApiKeyLocation" json:"keyLocation,omitempty" yaml:"location"`
	Key         string         `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty" yaml:"key"`
	Value       string         `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty" yaml:"value"`
}

func (x *AuthenticationMethodApiKey) Reset() {
	*x = AuthenticationMethodApiKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationMethodApiKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationMethodApiKey) ProtoMessage() {}

func (x *AuthenticationMethodApiKey) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationMethodApiKey.ProtoReflect.Descriptor instead.
func (*AuthenticationMethodApiKey) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{14}
}

func (x *AuthenticationMethodApiKey) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AuthenticationMethodApiKey) GetKeyLocation() ApiKeyLocation {
	if x != nil {
		return x.KeyLocation
	}
	return ApiKeyLocation_HEADER
}

func (x *AuthenticationMethodApiKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AuthenticationMethodApiKey) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AuthenticationMethodOauthOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stringature    SignatureMethod `protobuf:"varint,1,opt,name=stringature,proto3,enum=serviceConnection.SignatureMethod" json:"stringature,omitempty" yaml:"signature"`
	ConsumerKey    string          `protobuf:"bytes,2,opt,name=consumerKey,proto3" json:"consumerKey,omitempty" yaml:"consumerKey"`
	ConsumerSecret string          `protobuf:"bytes,3,opt,name=consumerSecret,proto3" json:"consumerSecret,omitempty" yaml:"consumerSecret"`
	AccessToken    string          `protobuf:"bytes,4,opt,name=accessToken,proto3" json:"accessToken,omitempty" yaml:"accessToken"`
	TokenSecret    string          `protobuf:"bytes,5,opt,name=tokenSecret,proto3" json:"tokenSecret,omitempty" yaml:"tokenSecret"`
}

func (x *AuthenticationMethodOauthOne) Reset() {
	*x = AuthenticationMethodOauthOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationMethodOauthOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationMethodOauthOne) ProtoMessage() {}

func (x *AuthenticationMethodOauthOne) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationMethodOauthOne.ProtoReflect.Descriptor instead.
func (*AuthenticationMethodOauthOne) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{15}
}

func (x *AuthenticationMethodOauthOne) GetStringature() SignatureMethod {
	if x != nil {
		return x.Stringature
	}
	return SignatureMethod_HMAC_SHA1
}

func (x *AuthenticationMethodOauthOne) GetConsumerKey() string {
	if x != nil {
		return x.ConsumerKey
	}
	return ""
}

func (x *AuthenticationMethodOauthOne) GetConsumerSecret() string {
	if x != nil {
		return x.ConsumerSecret
	}
	return ""
}

func (x *AuthenticationMethodOauthOne) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *AuthenticationMethodOauthOne) GetTokenSecret() string {
	if x != nil {
		return x.TokenSecret
	}
	return ""
}

type AuthenticationMethodOauthTwo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to GrantType:
	//
	//	*AuthenticationMethodOauthTwo_ClientCredential
	GrantType isAuthenticationMethodOauthTwo_GrantType `protobuf_oneof:"grant_type" yaml:",omitempty" json:"grant_type_oneof,omitempty"`
}

func (x *AuthenticationMethodOauthTwo) Reset() {
	*x = AuthenticationMethodOauthTwo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationMethodOauthTwo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationMethodOauthTwo) ProtoMessage() {}

func (x *AuthenticationMethodOauthTwo) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationMethodOauthTwo.ProtoReflect.Descriptor instead.
func (*AuthenticationMethodOauthTwo) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{16}
}

func (m *AuthenticationMethodOauthTwo) GetGrantType() isAuthenticationMethodOauthTwo_GrantType {
	if m != nil {
		return m.GrantType
	}
	return nil
}

func (x *AuthenticationMethodOauthTwo) GetClientCredential() *GrantClientCredential {
	if x, ok := x.GetGrantType().(*AuthenticationMethodOauthTwo_ClientCredential); ok {
		return x.ClientCredential
	}
	return nil
}

type isAuthenticationMethodOauthTwo_GrantType interface {
	isAuthenticationMethodOauthTwo_GrantType()
}

type AuthenticationMethodOauthTwo_ClientCredential struct {
	ClientCredential *GrantClientCredential `protobuf:"bytes,1,opt,name=client_credential,json=clientCredential,proto3,oneof"`
}

func (*AuthenticationMethodOauthTwo_ClientCredential) isAuthenticationMethodOauthTwo_GrantType() {}

type GrantClientCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId       string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"-" bson:"-" yaml:"clientId"`
	ClientSecret   string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"-" bson:"-" yaml:"clientSecret"`
	AccessTokenUrl string `protobuf:"bytes,3,opt,name=access_token_url,json=accessTokenUrl,proto3" json:"-" bson:"-" yaml:"accessTokenUrl"`
}

func (x *GrantClientCredential) Reset() {
	*x = GrantClientCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantClientCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantClientCredential) ProtoMessage() {}

func (x *GrantClientCredential) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantClientCredential.ProtoReflect.Descriptor instead.
func (*GrantClientCredential) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{17}
}

func (x *GrantClientCredential) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GrantClientCredential) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *GrantClientCredential) GetAccessTokenUrl() string {
	if x != nil {
		return x.AccessTokenUrl
	}
	return ""
}

type BearerGenerateOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   string     `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty" yaml:"payload"`
	JsonPath  string     `protobuf:"bytes,2,opt,name=jsonPath,proto3" json:"jsonPath,omitempty" yaml:"jsonPath"`
	AddPrefix bool       `protobuf:"varint,3,opt,name=addPrefix,proto3" json:"addPrefix,omitempty" yaml:"addPrefix"`
	Method    HTTPMethod `protobuf:"varint,4,opt,name=method,proto3,enum=serviceConnection.HTTPMethod" json:"method,omitempty" yaml:"method"`
	// Types that are assignable to TokenProviderUrlOneOf:
	//
	//	*BearerGenerateOption_ConnectionId
	//	*BearerGenerateOption_TokenProviderUrl
	TokenProviderUrlOneOf isBearerGenerateOption_TokenProviderUrlOneOf `protobuf_oneof:"tokenProviderUrlOneOf" yaml:",omitempty" json:"token_provider_url_oneof,omitempty"`
}

func (x *BearerGenerateOption) Reset() {
	*x = BearerGenerateOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BearerGenerateOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerGenerateOption) ProtoMessage() {}

func (x *BearerGenerateOption) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerGenerateOption.ProtoReflect.Descriptor instead.
func (*BearerGenerateOption) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{18}
}

func (x *BearerGenerateOption) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *BearerGenerateOption) GetJsonPath() string {
	if x != nil {
		return x.JsonPath
	}
	return ""
}

func (x *BearerGenerateOption) GetAddPrefix() bool {
	if x != nil {
		return x.AddPrefix
	}
	return false
}

func (x *BearerGenerateOption) GetMethod() HTTPMethod {
	if x != nil {
		return x.Method
	}
	return HTTPMethod_METHOD_GET
}

func (m *BearerGenerateOption) GetTokenProviderUrlOneOf() isBearerGenerateOption_TokenProviderUrlOneOf {
	if m != nil {
		return m.TokenProviderUrlOneOf
	}
	return nil
}

func (x *BearerGenerateOption) GetConnectionId() string {
	if x, ok := x.GetTokenProviderUrlOneOf().(*BearerGenerateOption_ConnectionId); ok {
		return x.ConnectionId
	}
	return ""
}

func (x *BearerGenerateOption) GetTokenProviderUrl() string {
	if x, ok := x.GetTokenProviderUrlOneOf().(*BearerGenerateOption_TokenProviderUrl); ok {
		return x.TokenProviderUrl
	}
	return ""
}

type isBearerGenerateOption_TokenProviderUrlOneOf interface {
	isBearerGenerateOption_TokenProviderUrlOneOf()
}

type BearerGenerateOption_ConnectionId struct {
	ConnectionId string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3,oneof"`
}

type BearerGenerateOption_TokenProviderUrl struct {
	TokenProviderUrl string `protobuf:"bytes,6,opt,name=tokenProviderUrl,proto3,oneof"`
}

func (*BearerGenerateOption_ConnectionId) isBearerGenerateOption_TokenProviderUrlOneOf() {}

func (*BearerGenerateOption_TokenProviderUrl) isBearerGenerateOption_TokenProviderUrlOneOf() {}

type MongoConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"-" bson:"-"`
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"-" bson:"-"`
}

func (x *MongoConnection) Reset() {
	*x = MongoConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoConnection) ProtoMessage() {}

func (x *MongoConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoConnection.ProtoReflect.Descriptor instead.
func (*MongoConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{19}
}

func (x *MongoConnection) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MongoConnection) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type AMQPConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host   string `protobuf:"bytes,1,opt,name=host,proto3" json:"-" bson:"-"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"-" bson:"-"`
	Secret string `protobuf:"bytes,3,opt,name=secret,proto3" json:"-" bson:"-"`
}

func (x *AMQPConnection) Reset() {
	*x = AMQPConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMQPConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMQPConnection) ProtoMessage() {}

func (x *AMQPConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AMQPConnection.ProtoReflect.Descriptor instead.
func (*AMQPConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{20}
}

func (x *AMQPConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AMQPConnection) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AMQPConnection) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type SFTPConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"-" bson:"-"`
	Port     string `protobuf:"bytes,2,opt,name=port,proto3" json:"-" bson:"-"`
	User     string `protobuf:"bytes,3,opt,name=user,proto3" json:"-" bson:"-"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"-" bson:"-"`
}

func (x *SFTPConnection) Reset() {
	*x = SFTPConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFTPConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFTPConnection) ProtoMessage() {}

func (x *SFTPConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFTPConnection.ProtoReflect.Descriptor instead.
func (*SFTPConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{21}
}

func (x *SFTPConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SFTPConnection) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SFTPConnection) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SFTPConnection) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type KafkaConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string  `protobuf:"bytes,1,opt,name=url,proto3" json:"-" bson:"-"`
	Password *string `protobuf:"bytes,2,opt,name=password,proto3,oneof" json:"-" bson:"-"`
}

func (x *KafkaConnection) Reset() {
	*x = KafkaConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConnection) ProtoMessage() {}

func (x *KafkaConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConnection.ProtoReflect.Descriptor instead.
func (*KafkaConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{22}
}

func (x *KafkaConnection) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *KafkaConnection) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type RedisConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string  `protobuf:"bytes,1,opt,name=host,proto3" json:"-" bson:"-" yaml:"host"`
	Port     string  `protobuf:"bytes,2,opt,name=port,proto3" json:"-" bson:"-" yaml:"port"`
	Username *string `protobuf:"bytes,3,opt,name=username,proto3,oneof" json:"-" bson:"-" yaml:"username"`
	Password *string `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"-" bson:"-" yaml:"password"`
	Db       *int32  `protobuf:"varint,5,opt,name=db,proto3,oneof" json:"-" bson:"-" yaml:"db"`
}

func (x *RedisConnection) Reset() {
	*x = RedisConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConnection) ProtoMessage() {}

func (x *RedisConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConnection.ProtoReflect.Descriptor instead.
func (*RedisConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{23}
}

func (x *RedisConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RedisConnection) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *RedisConnection) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *RedisConnection) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *RedisConnection) GetDb() int32 {
	if x != nil && x.Db != nil {
		return *x.Db
	}
	return 0
}

type TwilioConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountSID string `protobuf:"bytes,1,opt,name=accountSID,proto3" json:"-" bson:"-" yaml:"accountSID"`
	ApiKey     string `protobuf:"bytes,2,opt,name=apiKey,proto3" json:"-" bson:"-" yaml:"apiKey"`
	ApiSecret  string `protobuf:"bytes,3,opt,name=apiSecret,proto3" json:"-" bson:"-" yaml:"apiSecret"`
}

func (x *TwilioConnection) Reset() {
	*x = TwilioConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwilioConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwilioConnection) ProtoMessage() {}

func (x *TwilioConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwilioConnection.ProtoReflect.Descriptor instead.
func (*TwilioConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{24}
}

func (x *TwilioConnection) GetAccountSID() string {
	if x != nil {
		return x.AccountSID
	}
	return ""
}

func (x *TwilioConnection) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *TwilioConnection) GetApiSecret() string {
	if x != nil {
		return x.ApiSecret
	}
	return ""
}

type SendGridConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey string `protobuf:"bytes,1,opt,name=apiKey,proto3" json:"-" bson:"-" yaml:"apiKey"`
}

func (x *SendGridConnection) Reset() {
	*x = SendGridConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGridConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGridConnection) ProtoMessage() {}

func (x *SendGridConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGridConnection.ProtoReflect.Descriptor instead.
func (*SendGridConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{25}
}

func (x *SendGridConnection) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type MySQLConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"-" bson:"-"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"-" bson:"-"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"-" bson:"-"`
	Host     string `protobuf:"bytes,4,opt,name=host,proto3" json:"-" bson:"-"`
	Port     string `protobuf:"bytes,5,opt,name=port,proto3" json:"-" bson:"-"`
	Database string `protobuf:"bytes,6,opt,name=database,proto3" json:"-" bson:"-"`
}

func (x *MySQLConnection) Reset() {
	*x = MySQLConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLConnection) ProtoMessage() {}

func (x *MySQLConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLConnection.ProtoReflect.Descriptor instead.
func (*MySQLConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{26}
}

func (x *MySQLConnection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MySQLConnection) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MySQLConnection) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MySQLConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MySQLConnection) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *MySQLConnection) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type MsSQLConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"-" bson:"-"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"-" bson:"-"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"-" bson:"-"`
	Host     string `protobuf:"bytes,4,opt,name=host,proto3" json:"-" bson:"-"`
	Port     string `protobuf:"bytes,5,opt,name=port,proto3" json:"-" bson:"-"`
	Database string `protobuf:"bytes,6,opt,name=database,proto3" json:"-" bson:"-"`
}

func (x *MsSQLConnection) Reset() {
	*x = MsSQLConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsSQLConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsSQLConnection) ProtoMessage() {}

func (x *MsSQLConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsSQLConnection.ProtoReflect.Descriptor instead.
func (*MsSQLConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{27}
}

func (x *MsSQLConnection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MsSQLConnection) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MsSQLConnection) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MsSQLConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MsSQLConnection) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *MsSQLConnection) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type PostgresConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"-" bson:"-"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"-" bson:"-"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"-" bson:"-"`
	Host     string `protobuf:"bytes,4,opt,name=host,proto3" json:"-" bson:"-"`
	Port     int32  `protobuf:"varint,5,opt,name=port,proto3" json:"-" bson:"-"`
	Database string `protobuf:"bytes,6,opt,name=database,proto3" json:"-" bson:"-"`
}

func (x *PostgresConnection) Reset() {
	*x = PostgresConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresConnection) ProtoMessage() {}

func (x *PostgresConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresConnection.ProtoReflect.Descriptor instead.
func (*PostgresConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{28}
}

func (x *PostgresConnection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgresConnection) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PostgresConnection) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgresConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgresConnection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PostgresConnection) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type CosmosDBTableConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"-" bson:"-" yaml:"uri"`
}

func (x *CosmosDBTableConnection) Reset() {
	*x = CosmosDBTableConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmosDBTableConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmosDBTableConnection) ProtoMessage() {}

func (x *CosmosDBTableConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmosDBTableConnection.ProtoReflect.Descriptor instead.
func (*CosmosDBTableConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{29}
}

func (x *CosmosDBTableConnection) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type CosmosDBNoSQLConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri      string `protobuf:"bytes,1,opt,name=uri,proto3" json:"-" bson:"-" yaml:"uri"`
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"-" bson:"-"`
}

func (x *CosmosDBNoSQLConnection) Reset() {
	*x = CosmosDBNoSQLConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosmosDBNoSQLConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosmosDBNoSQLConnection) ProtoMessage() {}

func (x *CosmosDBNoSQLConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosmosDBNoSQLConnection.ProtoReflect.Descriptor instead.
func (*CosmosDBNoSQLConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{30}
}

func (x *CosmosDBNoSQLConnection) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CosmosDBNoSQLConnection) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type SlackConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"-" bson:"-" yaml:"token"`
}

func (x *SlackConnection) Reset() {
	*x = SlackConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackConnection) ProtoMessage() {}

func (x *SlackConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackConnection.ProtoReflect.Descriptor instead.
func (*SlackConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{31}
}

func (x *SlackConnection) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BlobStorageConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName string `protobuf:"bytes,1,opt,name=accountName,proto3" json:"-" bson:"-"`
	AccountKey  string `protobuf:"bytes,2,opt,name=accountKey,proto3" json:"-" bson:"-"`
	ServiceUrl  string `protobuf:"bytes,3,opt,name=serviceUrl,proto3" json:"-" bson:"-"`
}

func (x *BlobStorageConnection) Reset() {
	*x = BlobStorageConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobStorageConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobStorageConnection) ProtoMessage() {}

func (x *BlobStorageConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobStorageConnection.ProtoReflect.Descriptor instead.
func (*BlobStorageConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{32}
}

func (x *BlobStorageConnection) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *BlobStorageConnection) GetAccountKey() string {
	if x != nil {
		return x.AccountKey
	}
	return ""
}

func (x *BlobStorageConnection) GetServiceUrl() string {
	if x != nil {
		return x.ServiceUrl
	}
	return ""
}

type DynamoDBConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    string `protobuf:"bytes,1,opt,name=region,proto3" json:"-" bson:"-"`
	AccessKey string `protobuf:"bytes,2,opt,name=accessKey,proto3" json:"-" bson:"-"`
	SecretKey string `protobuf:"bytes,3,opt,name=secretKey,proto3" json:"-" bson:"-"`
}

func (x *DynamoDBConnection) Reset() {
	*x = DynamoDBConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamoDBConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBConnection) ProtoMessage() {}

func (x *DynamoDBConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBConnection.ProtoReflect.Descriptor instead.
func (*DynamoDBConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{33}
}

func (x *DynamoDBConnection) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DynamoDBConnection) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *DynamoDBConnection) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type SNSConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    string `protobuf:"bytes,1,opt,name=region,proto3" json:"-" bson:"-"`
	AccessKey string `protobuf:"bytes,2,opt,name=accessKey,proto3" json:"-" bson:"-"`
	SecretKey string `protobuf:"bytes,3,opt,name=secretKey,proto3" json:"-" bson:"-"`
}

func (x *SNSConnection) Reset() {
	*x = SNSConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNSConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNSConnection) ProtoMessage() {}

func (x *SNSConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNSConnection.ProtoReflect.Descriptor instead.
func (*SNSConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{34}
}

func (x *SNSConnection) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SNSConnection) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *SNSConnection) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type SQSConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    string `protobuf:"bytes,1,opt,name=region,proto3" json:"-" bson:"-"`
	AccessKey string `protobuf:"bytes,2,opt,name=accessKey,proto3" json:"-" bson:"-"`
	SecretKey string `protobuf:"bytes,3,opt,name=secretKey,proto3" json:"-" bson:"-"`
}

func (x *SQSConnection) Reset() {
	*x = SQSConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQSConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQSConnection) ProtoMessage() {}

func (x *SQSConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQSConnection.ProtoReflect.Descriptor instead.
func (*SQSConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{35}
}

func (x *SQSConnection) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SQSConnection) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *SQSConnection) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type AWSSecretManagerConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    string `protobuf:"bytes,1,opt,name=region,proto3" json:"-" bson:"-"`
	AccessKey string `protobuf:"bytes,2,opt,name=accessKey,proto3" json:"-" bson:"-"`
	SecretKey string `protobuf:"bytes,3,opt,name=secretKey,proto3" json:"-" bson:"-"`
}

func (x *AWSSecretManagerConnection) Reset() {
	*x = AWSSecretManagerConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSSecretManagerConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSSecretManagerConnection) ProtoMessage() {}

func (x *AWSSecretManagerConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSSecretManagerConnection.ProtoReflect.Descriptor instead.
func (*AWSSecretManagerConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{36}
}

func (x *AWSSecretManagerConnection) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSSecretManagerConnection) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *AWSSecretManagerConnection) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type AzureKeyVaultConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaultUri     string `protobuf:"bytes,1,opt,name=vaultUri,proto3" json:"-" bson:"-"`
	TenantID     string `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"-" bson:"-"`
	ClientID     string `protobuf:"bytes,3,opt,name=clientID,proto3" json:"-" bson:"-"`
	ClientSecret string `protobuf:"bytes,4,opt,name=clientSecret,proto3" json:"-" bson:"-"`
}

func (x *AzureKeyVaultConnection) Reset() {
	*x = AzureKeyVaultConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureKeyVaultConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureKeyVaultConnection) ProtoMessage() {}

func (x *AzureKeyVaultConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureKeyVaultConnection.ProtoReflect.Descriptor instead.
func (*AzureKeyVaultConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{37}
}

func (x *AzureKeyVaultConnection) GetVaultUri() string {
	if x != nil {
		return x.VaultUri
	}
	return ""
}

func (x *AzureKeyVaultConnection) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *AzureKeyVaultConnection) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *AzureKeyVaultConnection) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type AwsS3Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    string `protobuf:"bytes,1,opt,name=region,proto3" json:"-" bson:"-"`
	AccessKey string `protobuf:"bytes,2,opt,name=accessKey,proto3" json:"-" bson:"-"`
	SecretKey string `protobuf:"bytes,3,opt,name=secretKey,proto3" json:"-" bson:"-"`
}

func (x *AwsS3Connection) Reset() {
	*x = AwsS3Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsS3Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3Connection) ProtoMessage() {}

func (x *AwsS3Connection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3Connection.ProtoReflect.Descriptor instead.
func (*AwsS3Connection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{38}
}

func (x *AwsS3Connection) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsS3Connection) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *AwsS3Connection) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type ElasticsearchConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"-" bson:"-"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"-" bson:"-"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"-" bson:"-"`
}

func (x *ElasticsearchConnection) Reset() {
	*x = ElasticsearchConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticsearchConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticsearchConnection) ProtoMessage() {}

func (x *ElasticsearchConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticsearchConnection.ProtoReflect.Descriptor instead.
func (*ElasticsearchConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{39}
}

func (x *ElasticsearchConnection) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ElasticsearchConnection) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ElasticsearchConnection) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type OpenaiConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey string `protobuf:"bytes,1,opt,name=apiKey,proto3" json:"-" bson:"-"`
}

func (x *OpenaiConnection) Reset() {
	*x = OpenaiConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenaiConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenaiConnection) ProtoMessage() {}

func (x *OpenaiConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenaiConnection.ProtoReflect.Descriptor instead.
func (*OpenaiConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{40}
}

func (x *OpenaiConnection) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type MsteamsConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookUrl string `protobuf:"bytes,1,opt,name=webhookUrl,proto3" json:"-" bson:"-"`
}

func (x *MsteamsConnection) Reset() {
	*x = MsteamsConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsteamsConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsteamsConnection) ProtoMessage() {}

func (x *MsteamsConnection) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsteamsConnection.ProtoReflect.Descriptor instead.
func (*MsteamsConnection) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{41}
}

func (x *MsteamsConnection) GetWebhookUrl() string {
	if x != nil {
		return x.WebhookUrl
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{42}
}

type RemoveFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RemoveChildren bool   `protobuf:"varint,2,opt,name=removeChildren,proto3" json:"removeChildren,omitempty"`
}

func (x *RemoveFolderRequest) Reset() {
	*x = RemoveFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFolderRequest) ProtoMessage() {}

func (x *RemoveFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFolderRequest.ProtoReflect.Descriptor instead.
func (*RemoveFolderRequest) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{43}
}

func (x *RemoveFolderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoveFolderRequest) GetRemoveChildren() bool {
	if x != nil {
		return x.RemoveChildren
	}
	return false
}

type MoveFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentFolderId string `protobuf:"bytes,2,opt,name=parentFolderId,proto3" json:"parentFolderId,omitempty"`
}

func (x *MoveFolderRequest) Reset() {
	*x = MoveFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFolderRequest) ProtoMessage() {}

func (x *MoveFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFolderRequest.ProtoReflect.Descriptor instead.
func (*MoveFolderRequest) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{44}
}

func (x *MoveFolderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MoveFolderRequest) GetParentFolderId() string {
	if x != nil {
		return x.ParentFolderId
	}
	return ""
}

type ListFolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Folders []*Folder `protobuf:"bytes,1,rep,name=folders,proto3" json:"folders,omitempty"`
}

func (x *ListFolderResponse) Reset() {
	*x = ListFolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFolderResponse) ProtoMessage() {}

func (x *ListFolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFolderResponse.ProtoReflect.Descriptor instead.
func (*ListFolderResponse) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{45}
}

func (x *ListFolderResponse) GetFolders() []*Folder {
	if x != nil {
		return x.Folders
	}
	return nil
}

type Folder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Parent   string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ClientId string `protobuf:"bytes,4,opt,name=clientId,proto3" json:"clientId,omitempty"`
}

func (x *Folder) Reset() {
	*x = Folder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serviceConnection_serviceConnection_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Folder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Folder) ProtoMessage() {}

func (x *Folder) ProtoReflect() protoreflect.Message {
	mi := &file_serviceConnection_serviceConnection_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Folder.ProtoReflect.Descriptor instead.
func (*Folder) Descriptor() ([]byte, []int) {
	return file_serviceConnection_serviceConnection_proto_rawDescGZIP(), []int{46}
}

func (x *Folder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Folder) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Folder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Folder) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

var File_serviceConnection_serviceConnection_proto protoreflect.FileDescriptor

var file_serviceConnection_serviceConnection_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x74, 0x61, 0x67, 0x2f, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x09, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0x59, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x53, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0xcd,
	0x15, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x2d, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x73, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03,
	0x1e, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x52,
	0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e,
	0x68, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e,
	0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x0e, 0x61, 0x6d, 0x71, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x4d, 0x51, 0x50, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x6d, 0x71,
	0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x73,
	0x66, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x46, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x66, 0x74, 0x70, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x74, 0x77, 0x69, 0x6c,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x77, 0x69, 0x6c, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x74, 0x77, 0x69, 0x6c, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x12, 0x73,
	0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x12, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x64, 0x62,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x44, 0x42, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x0f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x0f, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x53, 0x51, 0x4c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x73,
	0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a,
	0x12, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x44, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x64, 0x62, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66,
	0x0a, 0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x64, 0x62, 0x4e, 0x6f, 0x53, 0x51, 0x4c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x44, 0x42, 0x4e, 0x6f, 0x53, 0x51,
	0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x64, 0x62, 0x4e, 0x6f, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x70,
	0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x43, 0x50, 0x5f, 0x49, 0x50, 0x5f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x49, 0x70,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x15, 0x62, 0x6c,
	0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x12,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x6f, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x0d, 0x73, 0x71, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x51, 0x53, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x71, 0x73, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x1a, 0x61, 0x77, 0x73,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a,
	0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x17, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x77, 0x73, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x77, 0x73, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x17, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x17, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x69, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x69, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x11, 0x6d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x11, 0x6d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x22, 0x48,
	0x0a, 0x11, 0x54, 0x43, 0x50, 0x5f, 0x49, 0x50, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0x9a, 0x84, 0x9e, 0x03, 0x1c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x75,
	0x72, 0x69, 0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x9a, 0x84,
	0x9e, 0x03, 0x1c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x75, 0x72, 0x69, 0x22, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x3c, 0x0a, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xc9, 0x05, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x62, 0x61, 0x73, 0x65, 0x75, 0x72, 0x6c, 0x22, 0x52, 0x07, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0x9a, 0x84,
	0x9e, 0x03, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a,
	0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x12, 0x43, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x50, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x12, 0x47, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x4f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4f, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x4f, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x54, 0x77, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x77, 0x6f, 0x48, 0x00, 0x52, 0x08,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x77, 0x6f, 0x42, 0x54, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x12, 0x3c, 0x9a, 0x84, 0x9e, 0x03, 0x37, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x32,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x12, 0x30, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x75, 0x72,
	0x69, 0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x22, 0x7c, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x50, 0x12, 0x30, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x9a,
	0x84, 0x9e, 0x03, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x9a, 0x02, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a,
	0x84, 0x9e, 0x03, 0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0d,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x70, 0x0a,
	0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a,
	0x9a, 0x84, 0x9e, 0x03, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x01, 0x52, 0x0e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xec, 0x01, 0x0a,
	0x1a, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03,
	0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x9a, 0x84,
	0x9e, 0x03, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84,
	0x9e, 0x03, 0x0a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x1c,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x4f, 0x6e, 0x65, 0x12, 0x5b, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x9a, 0x84, 0x9e, 0x03, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x9a, 0x84,
	0x9e, 0x03, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x9a,
	0x84, 0x9e, 0x03, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x9a, 0x84, 0x9e, 0x03, 0x12, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x22, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xbf,
	0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x77, 0x6f, 0x12,
	0x57, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x46, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x9a, 0x84, 0x9e, 0x03, 0x33, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x22, 0x85, 0x02, 0x0a, 0x15, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x9a,
	0x84, 0x9e, 0x03, 0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x56, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x9a, 0x84, 0x9e, 0x03,
	0x27, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xa7, 0x03, 0x0a, 0x14, 0x42, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x30, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6a,
	0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x61, 0x64, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x49, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x42, 0x59, 0x0a, 0x15, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x4f, 0x6e, 0x65, 0x4f, 0x66,
	0x12, 0x40, 0x9a, 0x84, 0x9e, 0x03, 0x3b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x22, 0x6d, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x31,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x41, 0x4d, 0x51, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84,
	0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x2d, 0x22, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x53, 0x46, 0x54, 0x50,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x29, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a,
	0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x7f,
	0x0a, 0x0f, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84,
	0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x2d, 0x22, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0xec, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x9a, 0x84, 0x9e, 0x03, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x68, 0x6f, 0x73, 0x74, 0x22, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x9a, 0x84, 0x9e, 0x03, 0x1d,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x9a, 0x84, 0x9e, 0x03, 0x22, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x20, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x00,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x9a, 0x84, 0x9e, 0x03, 0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x20, 0x9a, 0x84, 0x9e, 0x03, 0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x64, 0x62, 0x22, 0x48, 0x02, 0x52, 0x02, 0x64, 0x62, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x64, 0x62, 0x22, 0xe1,
	0x01, 0x0a, 0x10, 0x54, 0x77, 0x69, 0x6c, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x9a, 0x84, 0x9e, 0x03, 0x23, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x49, 0x44,
	0x22, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x49, 0x44, 0x12, 0x3c, 0x0a,
	0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x9a,
	0x84, 0x9e, 0x03, 0x1f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x22, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x61,
	0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x9a, 0x84, 0x9e, 0x03, 0x22, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x52, 0x09, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0x52, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x9a, 0x84, 0x9e, 0x03, 0x1f, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22,
	0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xab, 0x02, 0x0a, 0x0f, 0x4d, 0x79, 0x53, 0x51, 0x4c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03,
	0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x0f, 0x4d, 0x73, 0x53, 0x51, 0x4c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x31, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x31, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x17, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x44, 0x42, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x9a, 0x84, 0x9e,
	0x03, 0x1c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x75, 0x72, 0x69, 0x22, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x44, 0x42,
	0x4e, 0x6f, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x9a, 0x84,
	0x9e, 0x03, 0x1c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2d, 0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x75, 0x72, 0x69, 0x22, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x0f, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84,
	0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x2d, 0x22, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x35, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a,
	0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2d, 0x22, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x53, 0x4e, 0x53, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03,
	0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x09,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x53, 0x51, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03,
	0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xb5, 0x01, 0x0a,
	0x1a, 0x41, 0x57, 0x53, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e,
	0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x2d, 0x22, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a,
	0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2d, 0x22, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x22, 0xed, 0x01, 0x0a, 0x17, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x55, 0x72, 0x69, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x41, 0x77, 0x73, 0x53, 0x33, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03,
	0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x09,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x22, 0xa8, 0x01, 0x0a, 0x17, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03,
	0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d,
	0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e,
	0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x2d, 0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x41, 0x0a, 0x10,
	0x4f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22,
	0x4a, 0x0a, 0x11, 0x4d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52,
	0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0x07, 0x0a, 0x05, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x4d, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x49, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0x60, 0x0a, 0x06, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2a, 0x90, 0x05,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x46, 0x54, 0x50, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x47, 0x4f, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4d, 0x51, 0x50, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b,
	0x41, 0x46, 0x4b, 0x41, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x10,
	0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x57, 0x49, 0x4c, 0x49, 0x4f, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x47, 0x52, 0x49, 0x44, 0x10,
	0x07, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x53, 0x4d, 0x4f, 0x53, 0x44, 0x42, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x53, 0x53, 0x51, 0x4c, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x10, 0x0b, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x53, 0x4d, 0x4f, 0x53, 0x44, 0x42, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x53,
	0x4d, 0x4f, 0x53, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x53, 0x51, 0x4c, 0x10, 0x0d, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x41, 0x43,
	0x4b, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x49, 0x50, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x4f, 0x44, 0x42, 0x10, 0x11,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x4e, 0x53, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x51, 0x53, 0x10, 0x13, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45,
	0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x56, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x53, 0x33,
	0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4c, 0x41, 0x53, 0x54, 0x49, 0x43, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x17,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x41, 0x49, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x53, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x10, 0x19,
	0x2a, 0x2f, 0x0a, 0x0e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x2a, 0x7f, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x31, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32,
	0x35, 0x36, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x35, 0x31, 0x32, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x53, 0x41, 0x5f, 0x53, 0x48, 0x41,
	0x31, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x53, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x53, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31,
	0x32, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x58, 0x54,
	0x10, 0x06, 0x2a, 0x3d, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x55, 0x54, 0x10,
	0x02, 0x32, 0xe9, 0x09, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x4a, 0x57, 0x54, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x21, 0x5a,
	0x1f, 0x77, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_serviceConnection_serviceConnection_proto_rawDescOnce sync.Once
	file_serviceConnection_serviceConnection_proto_rawDescData = file_serviceConnection_serviceConnection_proto_rawDesc
)

func file_serviceConnection_serviceConnection_proto_rawDescGZIP() []byte {
	file_serviceConnection_serviceConnection_proto_rawDescOnce.Do(func() {
		file_serviceConnection_serviceConnection_proto_rawDescData = protoimpl.X.CompressGZIP(file_serviceConnection_serviceConnection_proto_rawDescData)
	})
	return file_serviceConnection_serviceConnection_proto_rawDescData
}

var file_serviceConnection_serviceConnection_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_serviceConnection_serviceConnection_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_serviceConnection_serviceConnection_proto_goTypes = []interface{}{
	(ConnectionType)(0),                  // 0: serviceConnection.ConnectionType
	(ApiKeyLocation)(0),                  // 1: serviceConnection.ApiKeyLocation
	(SignatureMethod)(0),                 // 2: serviceConnection.SignatureMethod
	(HTTPMethod)(0),                      // 3: serviceConnection.HTTPMethod
	(*IdMessage)(nil),                    // 4: serviceConnection.IdMessage
	(*IdsMessage)(nil),                   // 5: serviceConnection.IdsMessage
	(*ListConnectionRequest)(nil),        // 6: serviceConnection.ListConnectionRequest
	(*ListConnectionResponse)(nil),       // 7: serviceConnection.ListConnectionResponse
	(*ConnectionsMessage)(nil),           // 8: serviceConnection.ConnectionsMessage
	(*UpdateConnectionsMessage)(nil),     // 9: serviceConnection.UpdateConnectionsMessage
	(*Connection)(nil),                   // 10: serviceConnection.Connection
	(*TCP_IP_Connection)(nil),            // 11: serviceConnection.TCP_IP_Connection
	(*CosmosDBConnection)(nil),           // 12: serviceConnection.CosmosDBConnection
	(*HTTPConnection)(nil),               // 13: serviceConnection.HTTPConnection
	(*Header)(nil),                       // 14: serviceConnection.Header
	(*AuthenticationMethodBasic)(nil),    // 15: serviceConnection.AuthenticationMethodBasic
	(*AuthenticationMethodUP)(nil),       // 16: serviceConnection.AuthenticationMethodUP
	(*AuthenticationMethodBearer)(nil),   // 17: serviceConnection.AuthenticationMethodBearer
	(*AuthenticationMethodApiKey)(nil),   // 18: serviceConnection.AuthenticationMethodApiKey
	(*AuthenticationMethodOauthOne)(nil), // 19: serviceConnection.AuthenticationMethodOauthOne
	(*AuthenticationMethodOauthTwo)(nil), // 20: serviceConnection.AuthenticationMethodOauthTwo
	(*GrantClientCredential)(nil),        // 21: serviceConnection.GrantClientCredential
	(*BearerGenerateOption)(nil),         // 22: serviceConnection.BearerGenerateOption
	(*MongoConnection)(nil),              // 23: serviceConnection.MongoConnection
	(*AMQPConnection)(nil),               // 24: serviceConnection.AMQPConnection
	(*SFTPConnection)(nil),               // 25: serviceConnection.SFTPConnection
	(*KafkaConnection)(nil),              // 26: serviceConnection.KafkaConnection
	(*RedisConnection)(nil),              // 27: serviceConnection.RedisConnection
	(*TwilioConnection)(nil),             // 28: serviceConnection.TwilioConnection
	(*SendGridConnection)(nil),           // 29: serviceConnection.SendGridConnection
	(*MySQLConnection)(nil),              // 30: serviceConnection.MySQLConnection
	(*MsSQLConnection)(nil),              // 31: serviceConnection.MsSQLConnection
	(*PostgresConnection)(nil),           // 32: serviceConnection.PostgresConnection
	(*CosmosDBTableConnection)(nil),      // 33: serviceConnection.CosmosDBTableConnection
	(*CosmosDBNoSQLConnection)(nil),      // 34: serviceConnection.CosmosDBNoSQLConnection
	(*SlackConnection)(nil),              // 35: serviceConnection.SlackConnection
	(*BlobStorageConnection)(nil),        // 36: serviceConnection.BlobStorageConnection
	(*DynamoDBConnection)(nil),           // 37: serviceConnection.DynamoDBConnection
	(*SNSConnection)(nil),                // 38: serviceConnection.SNSConnection
	(*SQSConnection)(nil),                // 39: serviceConnection.SQSConnection
	(*AWSSecretManagerConnection)(nil),   // 40: serviceConnection.AWSSecretManagerConnection
	(*AzureKeyVaultConnection)(nil),      // 41: serviceConnection.AzureKeyVaultConnection
	(*AwsS3Connection)(nil),              // 42: serviceConnection.AwsS3Connection
	(*ElasticsearchConnection)(nil),      // 43: serviceConnection.ElasticsearchConnection
	(*OpenaiConnection)(nil),             // 44: serviceConnection.OpenaiConnection
	(*MsteamsConnection)(nil),            // 45: serviceConnection.MsteamsConnection
	(*Empty)(nil),                        // 46: serviceConnection.Empty
	(*RemoveFolderRequest)(nil),          // 47: serviceConnection.RemoveFolderRequest
	(*MoveFolderRequest)(nil),            // 48: serviceConnection.MoveFolderRequest
	(*ListFolderResponse)(nil),           // 49: serviceConnection.ListFolderResponse
	(*Folder)(nil),                       // 50: serviceConnection.Folder
	(*auditlog.CreateLogRequest)(nil),    // 51: auditlog.CreateLogRequest
	(*timestamppb.Timestamp)(nil),        // 52: google.protobuf.Timestamp
}
var file_serviceConnection_serviceConnection_proto_depIdxs = []int32{
	0,  // 0: serviceConnection.ListConnectionRequest.connectionType:type_name -> serviceConnection.ConnectionType
	10, // 1: serviceConnection.ListConnectionResponse.connections:type_name -> serviceConnection.Connection
	10, // 2: serviceConnection.ConnectionsMessage.connection:type_name -> serviceConnection.Connection
	10, // 3: serviceConnection.UpdateConnectionsMessage.connection:type_name -> serviceConnection.Connection
	51, // 4: serviceConnection.UpdateConnectionsMessage.log:type_name -> auditlog.CreateLogRequest
	0,  // 5: serviceConnection.Connection.connectionType:type_name -> serviceConnection.ConnectionType
	52, // 6: serviceConnection.Connection.createdAt:type_name -> google.protobuf.Timestamp
	52, // 7: serviceConnection.Connection.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 8: serviceConnection.Connection.httpConnection:type_name -> serviceConnection.HTTPConnection
	23, // 9: serviceConnection.Connection.mongoConnection:type_name -> serviceConnection.MongoConnection
	24, // 10: serviceConnection.Connection.amqpConnection:type_name -> serviceConnection.AMQPConnection
	25, // 11: serviceConnection.Connection.sftpConnection:type_name -> serviceConnection.SFTPConnection
	26, // 12: serviceConnection.Connection.kafkaConnection:type_name -> serviceConnection.KafkaConnection
	27, // 13: serviceConnection.Connection.redisConnection:type_name -> serviceConnection.RedisConnection
	28, // 14: serviceConnection.Connection.twilioConnection:type_name -> serviceConnection.TwilioConnection
	29, // 15: serviceConnection.Connection.sendgridConnection:type_name -> serviceConnection.SendGridConnection
	12, // 16: serviceConnection.Connection.cosmosdbConnection:type_name -> serviceConnection.CosmosDBConnection
	30, // 17: serviceConnection.Connection.mysqlConnection:type_name -> serviceConnection.MySQLConnection
	31, // 18: serviceConnection.Connection.mssqlConnection:type_name -> serviceConnection.MsSQLConnection
	32, // 19: serviceConnection.Connection.postgresConnection:type_name -> serviceConnection.PostgresConnection
	33, // 20: serviceConnection.Connection.cosmosdbTableConnection:type_name -> serviceConnection.CosmosDBTableConnection
	34, // 21: serviceConnection.Connection.cosmosdbNoSQLConnection:type_name -> serviceConnection.CosmosDBNoSQLConnection
	35, // 22: serviceConnection.Connection.slackConnection:type_name -> serviceConnection.SlackConnection
	11, // 23: serviceConnection.Connection.tcp_ip_Connection:type_name -> serviceConnection.TCP_IP_Connection
	36, // 24: serviceConnection.Connection.blobStorageConnection:type_name -> serviceConnection.BlobStorageConnection
	37, // 25: serviceConnection.Connection.dynamoDBConnection:type_name -> serviceConnection.DynamoDBConnection
	38, // 26: serviceConnection.Connection.snsConnection:type_name -> serviceConnection.SNSConnection
	39, // 27: serviceConnection.Connection.sqsConnection:type_name -> serviceConnection.SQSConnection
	40, // 28: serviceConnection.Connection.awsSecretManagerConnection:type_name -> serviceConnection.AWSSecretManagerConnection
	41, // 29: serviceConnection.Connection.azureKeyVaultConnection:type_name -> serviceConnection.AzureKeyVaultConnection
	42, // 30: serviceConnection.Connection.awsS3Connection:type_name -> serviceConnection.AwsS3Connection
	43, // 31: serviceConnection.Connection.elasticsearchConnection:type_name -> serviceConnection.ElasticsearchConnection
	44, // 32: serviceConnection.Connection.openaiConnection:type_name -> serviceConnection.OpenaiConnection
	45, // 33: serviceConnection.Connection.msteamsConnection:type_name -> serviceConnection.MsteamsConnection
	14, // 34: serviceConnection.HTTPConnection.headers:type_name -> serviceConnection.Header
	15, // 35: serviceConnection.HTTPConnection.basic:type_name -> serviceConnection.AuthenticationMethodBasic
	16, // 36: serviceConnection.HTTPConnection.digest:type_name -> serviceConnection.AuthenticationMethodUP
	17, // 37: serviceConnection.HTTPConnection.bearer:type_name -> serviceConnection.AuthenticationMethodBearer
	18, // 38: serviceConnection.HTTPConnection.apiKey:type_name -> serviceConnection.AuthenticationMethodApiKey
	19, // 39: serviceConnection.HTTPConnection.oauthOne:type_name -> serviceConnection.AuthenticationMethodOauthOne
	20, // 40: serviceConnection.HTTPConnection.oauthTwo:type_name -> serviceConnection.AuthenticationMethodOauthTwo
	14, // 41: serviceConnection.AuthenticationMethodBasic.headers:type_name -> serviceConnection.Header
	22, // 42: serviceConnection.AuthenticationMethodBearer.generateOption:type_name -> serviceConnection.BearerGenerateOption
	1,  // 43: serviceConnection.AuthenticationMethodApiKey.keyLocation:type_name -> serviceConnection.ApiKeyLocation
	2,  // 44: serviceConnection.AuthenticationMethodOauthOne.stringature:type_name -> serviceConnection.SignatureMethod
	21, // 45: serviceConnection.AuthenticationMethodOauthTwo.client_credential:type_name -> serviceConnection.GrantClientCredential
	3,  // 46: serviceConnection.BearerGenerateOption.method:type_name -> serviceConnection.HTTPMethod
	50, // 47: serviceConnection.ListFolderResponse.folders:type_name -> serviceConnection.Folder
	8,  // 48: serviceConnection.ConnectionService.Create:input_type -> serviceConnection.ConnectionsMessage
	4,  // 49: serviceConnection.ConnectionService.Get:input_type -> serviceConnection.IdMessage
	5,  // 50: serviceConnection.ConnectionService.GetConnectionsIdList:input_type -> serviceConnection.IdsMessage
	4,  // 51: serviceConnection.ConnectionService.Delete:input_type -> serviceConnection.IdMessage
	6,  // 52: serviceConnection.ConnectionService.List:input_type -> serviceConnection.ListConnectionRequest
	9,  // 53: serviceConnection.ConnectionService.Update:input_type -> serviceConnection.UpdateConnectionsMessage
	4,  // 54: serviceConnection.ConnectionService.ListConnectionsByFolderId:input_type -> serviceConnection.IdMessage
	4,  // 55: serviceConnection.ConnectionService.GetWithJWT:input_type -> serviceConnection.IdMessage
	50, // 56: serviceConnection.ConnectionService.CreateFolder:input_type -> serviceConnection.Folder
	50, // 57: serviceConnection.ConnectionService.SaveFolder:input_type -> serviceConnection.Folder
	4,  // 58: serviceConnection.ConnectionService.FolderByID:input_type -> serviceConnection.IdMessage
	47, // 59: serviceConnection.ConnectionService.RemoveFolder:input_type -> serviceConnection.RemoveFolderRequest
	48, // 60: serviceConnection.ConnectionService.MoveFolder:input_type -> serviceConnection.MoveFolderRequest
	46, // 61: serviceConnection.ConnectionService.ListFolders:input_type -> serviceConnection.Empty
	50, // 62: serviceConnection.ConnectionService.EditFolder:input_type -> serviceConnection.Folder
	8,  // 63: serviceConnection.ConnectionService.Create:output_type -> serviceConnection.ConnectionsMessage
	8,  // 64: serviceConnection.ConnectionService.Get:output_type -> serviceConnection.ConnectionsMessage
	5,  // 65: serviceConnection.ConnectionService.GetConnectionsIdList:output_type -> serviceConnection.IdsMessage
	4,  // 66: serviceConnection.ConnectionService.Delete:output_type -> serviceConnection.IdMessage
	7,  // 67: serviceConnection.ConnectionService.List:output_type -> serviceConnection.ListConnectionResponse
	8,  // 68: serviceConnection.ConnectionService.Update:output_type -> serviceConnection.ConnectionsMessage
	7,  // 69: serviceConnection.ConnectionService.ListConnectionsByFolderId:output_type -> serviceConnection.ListConnectionResponse
	8,  // 70: serviceConnection.ConnectionService.GetWithJWT:output_type -> serviceConnection.ConnectionsMessage
	50, // 71: serviceConnection.ConnectionService.CreateFolder:output_type -> serviceConnection.Folder
	50, // 72: serviceConnection.ConnectionService.SaveFolder:output_type -> serviceConnection.Folder
	50, // 73: serviceConnection.ConnectionService.FolderByID:output_type -> serviceConnection.Folder
	46, // 74: serviceConnection.ConnectionService.RemoveFolder:output_type -> serviceConnection.Empty
	46, // 75: serviceConnection.ConnectionService.MoveFolder:output_type -> serviceConnection.Empty
	49, // 76: serviceConnection.ConnectionService.ListFolders:output_type -> serviceConnection.ListFolderResponse
	46, // 77: serviceConnection.ConnectionService.EditFolder:output_type -> serviceConnection.Empty
	63, // [63:78] is the sub-list for method output_type
	48, // [48:63] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_serviceConnection_serviceConnection_proto_init() }
func file_serviceConnection_serviceConnection_proto_init() {
	if File_serviceConnection_serviceConnection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_serviceConnection_serviceConnection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConnectionsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCP_IP_Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosmosDBConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationMethodBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationMethodUP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationMethodBearer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationMethodApiKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationMethodOauthOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationMethodOauthTwo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantClientCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BearerGenerateOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMQPConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFTPConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwilioConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGridConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsSQLConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosmosDBTableConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosmosDBNoSQLConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobStorageConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamoDBConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNSConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQSConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSSecretManagerConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureKeyVaultConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsS3Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticsearchConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenaiConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsteamsConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serviceConnection_serviceConnection_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Folder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_serviceConnection_serviceConnection_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_serviceConnection_serviceConnection_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Connection_HttpConnection)(nil),
		(*Connection_MongoConnection)(nil),
		(*Connection_AmqpConnection)(nil),
		(*Connection_SftpConnection)(nil),
		(*Connection_KafkaConnection)(nil),
		(*Connection_RedisConnection)(nil),
		(*Connection_TwilioConnection)(nil),
		(*Connection_SendgridConnection)(nil),
		(*Connection_CosmosdbConnection)(nil),
		(*Connection_MysqlConnection)(nil),
		(*Connection_MssqlConnection)(nil),
		(*Connection_PostgresConnection)(nil),
		(*Connection_CosmosdbTableConnection)(nil),
		(*Connection_CosmosdbNoSQLConnection)(nil),
		(*Connection_SlackConnection)(nil),
		(*Connection_TcpIp_Connection)(nil),
		(*Connection_BlobStorageConnection)(nil),
		(*Connection_DynamoDBConnection)(nil),
		(*Connection_SnsConnection)(nil),
		(*Connection_SqsConnection)(nil),
		(*Connection_AwsSecretManagerConnection)(nil),
		(*Connection_AzureKeyVaultConnection)(nil),
		(*Connection_AwsS3Connection)(nil),
		(*Connection_ElasticsearchConnection)(nil),
		(*Connection_OpenaiConnection)(nil),
		(*Connection_MsteamsConnection)(nil),
	}
	file_serviceConnection_serviceConnection_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*HTTPConnection_Basic)(nil),
		(*HTTPConnection_Digest)(nil),
		(*HTTPConnection_Bearer)(nil),
		(*HTTPConnection_ApiKey)(nil),
		(*HTTPConnection_OauthOne)(nil),
		(*HTTPConnection_OauthTwo)(nil),
	}
	file_serviceConnection_serviceConnection_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_serviceConnection_serviceConnection_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*AuthenticationMethodOauthTwo_ClientCredential)(nil),
	}
	file_serviceConnection_serviceConnection_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*BearerGenerateOption_ConnectionId)(nil),
		(*BearerGenerateOption_TokenProviderUrl)(nil),
	}
	file_serviceConnection_serviceConnection_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_serviceConnection_serviceConnection_proto_msgTypes[23].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_serviceConnection_serviceConnection_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_serviceConnection_serviceConnection_proto_goTypes,
		DependencyIndexes: file_serviceConnection_serviceConnection_proto_depIdxs,
		EnumInfos:         file_serviceConnection_serviceConnection_proto_enumTypes,
		MessageInfos:      file_serviceConnection_serviceConnection_proto_msgTypes,
	}.Build()
	File_serviceConnection_serviceConnection_proto = out.File
	file_serviceConnection_serviceConnection_proto_rawDesc = nil
	file_serviceConnection_serviceConnection_proto_goTypes = nil
	file_serviceConnection_serviceConnection_proto_depIdxs = nil
}
