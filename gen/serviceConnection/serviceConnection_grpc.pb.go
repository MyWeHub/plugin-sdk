// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: serviceConnection/serviceConnection.proto

package serviceConnection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectionService_Create_FullMethodName                    = "/serviceConnection.ConnectionService/Create"
	ConnectionService_Get_FullMethodName                       = "/serviceConnection.ConnectionService/Get"
	ConnectionService_GetConnectionsIdList_FullMethodName      = "/serviceConnection.ConnectionService/GetConnectionsIdList"
	ConnectionService_Delete_FullMethodName                    = "/serviceConnection.ConnectionService/Delete"
	ConnectionService_List_FullMethodName                      = "/serviceConnection.ConnectionService/List"
	ConnectionService_Update_FullMethodName                    = "/serviceConnection.ConnectionService/Update"
	ConnectionService_ListConnectionsByFolderId_FullMethodName = "/serviceConnection.ConnectionService/ListConnectionsByFolderId"
	ConnectionService_GetWithJWT_FullMethodName                = "/serviceConnection.ConnectionService/GetWithJWT"
	ConnectionService_CreateFolder_FullMethodName              = "/serviceConnection.ConnectionService/CreateFolder"
	ConnectionService_SaveFolder_FullMethodName                = "/serviceConnection.ConnectionService/SaveFolder"
	ConnectionService_FolderByID_FullMethodName                = "/serviceConnection.ConnectionService/FolderByID"
	ConnectionService_RemoveFolder_FullMethodName              = "/serviceConnection.ConnectionService/RemoveFolder"
	ConnectionService_MoveFolder_FullMethodName                = "/serviceConnection.ConnectionService/MoveFolder"
	ConnectionService_ListFolders_FullMethodName               = "/serviceConnection.ConnectionService/ListFolders"
	ConnectionService_EditFolder_FullMethodName                = "/serviceConnection.ConnectionService/EditFolder"
)

// ConnectionServiceClient is the client API for ConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionServiceClient interface {
	Create(ctx context.Context, in *ConnectionsMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error)
	Get(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error)
	GetConnectionsIdList(ctx context.Context, in *IdsMessage, opts ...grpc.CallOption) (*IdsMessage, error)
	Delete(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*IdMessage, error)
	List(ctx context.Context, in *ListConnectionRequest, opts ...grpc.CallOption) (*ListConnectionResponse, error)
	Update(ctx context.Context, in *UpdateConnectionsMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error)
	ListConnectionsByFolderId(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ListConnectionResponse, error)
	GetWithJWT(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error)
	CreateFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Folder, error)
	SaveFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Folder, error)
	FolderByID(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*Folder, error)
	RemoveFolder(ctx context.Context, in *RemoveFolderRequest, opts ...grpc.CallOption) (*Empty, error)
	MoveFolder(ctx context.Context, in *MoveFolderRequest, opts ...grpc.CallOption) (*Empty, error)
	ListFolders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFolderResponse, error)
	EditFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Empty, error)
}

type connectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionServiceClient(cc grpc.ClientConnInterface) ConnectionServiceClient {
	return &connectionServiceClient{cc}
}

func (c *connectionServiceClient) Create(ctx context.Context, in *ConnectionsMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionsMessage)
	err := c.cc.Invoke(ctx, ConnectionService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) Get(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionsMessage)
	err := c.cc.Invoke(ctx, ConnectionService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetConnectionsIdList(ctx context.Context, in *IdsMessage, opts ...grpc.CallOption) (*IdsMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdsMessage)
	err := c.cc.Invoke(ctx, ConnectionService_GetConnectionsIdList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) Delete(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*IdMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdMessage)
	err := c.cc.Invoke(ctx, ConnectionService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) List(ctx context.Context, in *ListConnectionRequest, opts ...grpc.CallOption) (*ListConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectionResponse)
	err := c.cc.Invoke(ctx, ConnectionService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) Update(ctx context.Context, in *UpdateConnectionsMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionsMessage)
	err := c.cc.Invoke(ctx, ConnectionService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) ListConnectionsByFolderId(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ListConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectionResponse)
	err := c.cc.Invoke(ctx, ConnectionService_ListConnectionsByFolderId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetWithJWT(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionsMessage)
	err := c.cc.Invoke(ctx, ConnectionService_GetWithJWT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) CreateFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Folder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Folder)
	err := c.cc.Invoke(ctx, ConnectionService_CreateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) SaveFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Folder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Folder)
	err := c.cc.Invoke(ctx, ConnectionService_SaveFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) FolderByID(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*Folder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Folder)
	err := c.cc.Invoke(ctx, ConnectionService_FolderByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) RemoveFolder(ctx context.Context, in *RemoveFolderRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ConnectionService_RemoveFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) MoveFolder(ctx context.Context, in *MoveFolderRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ConnectionService_MoveFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) ListFolders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFolderResponse)
	err := c.cc.Invoke(ctx, ConnectionService_ListFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) EditFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ConnectionService_EditFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionServiceServer is the server API for ConnectionService service.
// All implementations must embed UnimplementedConnectionServiceServer
// for forward compatibility.
type ConnectionServiceServer interface {
	Create(context.Context, *ConnectionsMessage) (*ConnectionsMessage, error)
	Get(context.Context, *IdMessage) (*ConnectionsMessage, error)
	GetConnectionsIdList(context.Context, *IdsMessage) (*IdsMessage, error)
	Delete(context.Context, *IdMessage) (*IdMessage, error)
	List(context.Context, *ListConnectionRequest) (*ListConnectionResponse, error)
	Update(context.Context, *UpdateConnectionsMessage) (*ConnectionsMessage, error)
	ListConnectionsByFolderId(context.Context, *IdMessage) (*ListConnectionResponse, error)
	GetWithJWT(context.Context, *IdMessage) (*ConnectionsMessage, error)
	CreateFolder(context.Context, *Folder) (*Folder, error)
	SaveFolder(context.Context, *Folder) (*Folder, error)
	FolderByID(context.Context, *IdMessage) (*Folder, error)
	RemoveFolder(context.Context, *RemoveFolderRequest) (*Empty, error)
	MoveFolder(context.Context, *MoveFolderRequest) (*Empty, error)
	ListFolders(context.Context, *Empty) (*ListFolderResponse, error)
	EditFolder(context.Context, *Folder) (*Empty, error)
	mustEmbedUnimplementedConnectionServiceServer()
}

// UnimplementedConnectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectionServiceServer struct{}

func (UnimplementedConnectionServiceServer) Create(context.Context, *ConnectionsMessage) (*ConnectionsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedConnectionServiceServer) Get(context.Context, *IdMessage) (*ConnectionsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConnectionServiceServer) GetConnectionsIdList(context.Context, *IdsMessage) (*IdsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionsIdList not implemented")
}
func (UnimplementedConnectionServiceServer) Delete(context.Context, *IdMessage) (*IdMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConnectionServiceServer) List(context.Context, *ListConnectionRequest) (*ListConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConnectionServiceServer) Update(context.Context, *UpdateConnectionsMessage) (*ConnectionsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedConnectionServiceServer) ListConnectionsByFolderId(context.Context, *IdMessage) (*ListConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectionsByFolderId not implemented")
}
func (UnimplementedConnectionServiceServer) GetWithJWT(context.Context, *IdMessage) (*ConnectionsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithJWT not implemented")
}
func (UnimplementedConnectionServiceServer) CreateFolder(context.Context, *Folder) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedConnectionServiceServer) SaveFolder(context.Context, *Folder) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFolder not implemented")
}
func (UnimplementedConnectionServiceServer) FolderByID(context.Context, *IdMessage) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FolderByID not implemented")
}
func (UnimplementedConnectionServiceServer) RemoveFolder(context.Context, *RemoveFolderRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFolder not implemented")
}
func (UnimplementedConnectionServiceServer) MoveFolder(context.Context, *MoveFolderRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFolder not implemented")
}
func (UnimplementedConnectionServiceServer) ListFolders(context.Context, *Empty) (*ListFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFolders not implemented")
}
func (UnimplementedConnectionServiceServer) EditFolder(context.Context, *Folder) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFolder not implemented")
}
func (UnimplementedConnectionServiceServer) mustEmbedUnimplementedConnectionServiceServer() {}
func (UnimplementedConnectionServiceServer) testEmbeddedByValue()                           {}

// UnsafeConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionServiceServer will
// result in compilation errors.
type UnsafeConnectionServiceServer interface {
	mustEmbedUnimplementedConnectionServiceServer()
}

func RegisterConnectionServiceServer(s grpc.ServiceRegistrar, srv ConnectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedConnectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectionService_ServiceDesc, srv)
}

func _ConnectionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Create(ctx, req.(*ConnectionsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Get(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetConnectionsIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetConnectionsIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_GetConnectionsIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetConnectionsIdList(ctx, req.(*IdsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Delete(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).List(ctx, req.(*ListConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Update(ctx, req.(*UpdateConnectionsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_ListConnectionsByFolderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).ListConnectionsByFolderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_ListConnectionsByFolderId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).ListConnectionsByFolderId(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetWithJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetWithJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_GetWithJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetWithJWT(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Folder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).CreateFolder(ctx, req.(*Folder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_SaveFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Folder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).SaveFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_SaveFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).SaveFolder(ctx, req.(*Folder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_FolderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).FolderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_FolderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).FolderByID(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_RemoveFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).RemoveFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_RemoveFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).RemoveFolder(ctx, req.(*RemoveFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_MoveFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).MoveFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_MoveFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).MoveFolder(ctx, req.(*MoveFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_ListFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).ListFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_ListFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).ListFolders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_EditFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Folder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).EditFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_EditFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).EditFolder(ctx, req.(*Folder))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionService_ServiceDesc is the grpc.ServiceDesc for ConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serviceConnection.ConnectionService",
	HandlerType: (*ConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ConnectionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ConnectionService_Get_Handler,
		},
		{
			MethodName: "GetConnectionsIdList",
			Handler:    _ConnectionService_GetConnectionsIdList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConnectionService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ConnectionService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConnectionService_Update_Handler,
		},
		{
			MethodName: "ListConnectionsByFolderId",
			Handler:    _ConnectionService_ListConnectionsByFolderId_Handler,
		},
		{
			MethodName: "GetWithJWT",
			Handler:    _ConnectionService_GetWithJWT_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _ConnectionService_CreateFolder_Handler,
		},
		{
			MethodName: "SaveFolder",
			Handler:    _ConnectionService_SaveFolder_Handler,
		},
		{
			MethodName: "FolderByID",
			Handler:    _ConnectionService_FolderByID_Handler,
		},
		{
			MethodName: "RemoveFolder",
			Handler:    _ConnectionService_RemoveFolder_Handler,
		},
		{
			MethodName: "MoveFolder",
			Handler:    _ConnectionService_MoveFolder_Handler,
		},
		{
			MethodName: "ListFolders",
			Handler:    _ConnectionService_ListFolders_Handler,
		},
		{
			MethodName: "EditFolder",
			Handler:    _ConnectionService_EditFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serviceConnection/serviceConnection.proto",
}
