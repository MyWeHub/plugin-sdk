// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: auditlog/auditlog.proto

package auditlog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuditLog_ListLogs_FullMethodName   = "/auditlog.AuditLog/ListLogs"
	AuditLog_GetLogById_FullMethodName = "/auditlog.AuditLog/GetLogById"
	AuditLog_CreateLog_FullMethodName  = "/auditlog.AuditLog/CreateLog"
	AuditLog_UpdateLog_FullMethodName  = "/auditlog.AuditLog/UpdateLog"
	AuditLog_DeleteLog_FullMethodName  = "/auditlog.AuditLog/DeleteLog"
)

// AuditLogClient is the client API for AuditLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditLogClient interface {
	ListLogs(ctx context.Context, in *ListLogsRequest, opts ...grpc.CallOption) (*ListLogsResponse, error)
	GetLogById(ctx context.Context, in *LogIdRequest, opts ...grpc.CallOption) (*LogRecord, error)
	CreateLog(ctx context.Context, in *CreateLogRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateLog(ctx context.Context, in *UpdateLogRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteLog(ctx context.Context, in *DeleteLogRequest, opts ...grpc.CallOption) (*Empty, error)
}

type auditLogClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditLogClient(cc grpc.ClientConnInterface) AuditLogClient {
	return &auditLogClient{cc}
}

func (c *auditLogClient) ListLogs(ctx context.Context, in *ListLogsRequest, opts ...grpc.CallOption) (*ListLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLogsResponse)
	err := c.cc.Invoke(ctx, AuditLog_ListLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditLogClient) GetLogById(ctx context.Context, in *LogIdRequest, opts ...grpc.CallOption) (*LogRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogRecord)
	err := c.cc.Invoke(ctx, AuditLog_GetLogById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditLogClient) CreateLog(ctx context.Context, in *CreateLogRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuditLog_CreateLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditLogClient) UpdateLog(ctx context.Context, in *UpdateLogRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuditLog_UpdateLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditLogClient) DeleteLog(ctx context.Context, in *DeleteLogRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuditLog_DeleteLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditLogServer is the server API for AuditLog service.
// All implementations must embed UnimplementedAuditLogServer
// for forward compatibility.
type AuditLogServer interface {
	ListLogs(context.Context, *ListLogsRequest) (*ListLogsResponse, error)
	GetLogById(context.Context, *LogIdRequest) (*LogRecord, error)
	CreateLog(context.Context, *CreateLogRequest) (*Empty, error)
	UpdateLog(context.Context, *UpdateLogRequest) (*Empty, error)
	DeleteLog(context.Context, *DeleteLogRequest) (*Empty, error)
	mustEmbedUnimplementedAuditLogServer()
}

// UnimplementedAuditLogServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuditLogServer struct{}

func (UnimplementedAuditLogServer) ListLogs(context.Context, *ListLogsRequest) (*ListLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogs not implemented")
}
func (UnimplementedAuditLogServer) GetLogById(context.Context, *LogIdRequest) (*LogRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogById not implemented")
}
func (UnimplementedAuditLogServer) CreateLog(context.Context, *CreateLogRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLog not implemented")
}
func (UnimplementedAuditLogServer) UpdateLog(context.Context, *UpdateLogRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLog not implemented")
}
func (UnimplementedAuditLogServer) DeleteLog(context.Context, *DeleteLogRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLog not implemented")
}
func (UnimplementedAuditLogServer) mustEmbedUnimplementedAuditLogServer() {}
func (UnimplementedAuditLogServer) testEmbeddedByValue()                  {}

// UnsafeAuditLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditLogServer will
// result in compilation errors.
type UnsafeAuditLogServer interface {
	mustEmbedUnimplementedAuditLogServer()
}

func RegisterAuditLogServer(s grpc.ServiceRegistrar, srv AuditLogServer) {
	// If the following call pancis, it indicates UnimplementedAuditLogServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuditLog_ServiceDesc, srv)
}

func _AuditLog_ListLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogServer).ListLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLog_ListLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogServer).ListLogs(ctx, req.(*ListLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditLog_GetLogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogServer).GetLogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLog_GetLogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogServer).GetLogById(ctx, req.(*LogIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditLog_CreateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogServer).CreateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLog_CreateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogServer).CreateLog(ctx, req.(*CreateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditLog_UpdateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogServer).UpdateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLog_UpdateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogServer).UpdateLog(ctx, req.(*UpdateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditLog_DeleteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogServer).DeleteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLog_DeleteLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogServer).DeleteLog(ctx, req.(*DeleteLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditLog_ServiceDesc is the grpc.ServiceDesc for AuditLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auditlog.AuditLog",
	HandlerType: (*AuditLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLogs",
			Handler:    _AuditLog_ListLogs_Handler,
		},
		{
			MethodName: "GetLogById",
			Handler:    _AuditLog_GetLogById_Handler,
		},
		{
			MethodName: "CreateLog",
			Handler:    _AuditLog_CreateLog_Handler,
		},
		{
			MethodName: "UpdateLog",
			Handler:    _AuditLog_UpdateLog_Handler,
		},
		{
			MethodName: "DeleteLog",
			Handler:    _AuditLog_DeleteLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auditlog/auditlog.proto",
}
