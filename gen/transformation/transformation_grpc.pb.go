// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: transformation/transformation.proto

package transformation

import (
	context "context"
	testRunner "github.com/MyWeHub/plugin-sdk/gen/testRunner"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransformationService_RunWorkflow_FullMethodName     = "/transformation.TransformationService/RunWorkflow"
	TransformationService_RunTestWorkflow_FullMethodName = "/transformation.TransformationService/RunTestWorkflow"
)

// TransformationServiceClient is the client API for TransformationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformationServiceClient interface {
	RunWorkflow(ctx context.Context, in *testRunner.StartRun, opts ...grpc.CallOption) (*WorkflowOutput, error)
	RunTestWorkflow(ctx context.Context, in *testRunner.StartRunTest, opts ...grpc.CallOption) (*WorkflowOutput, error)
}

type transformationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformationServiceClient(cc grpc.ClientConnInterface) TransformationServiceClient {
	return &transformationServiceClient{cc}
}

func (c *transformationServiceClient) RunWorkflow(ctx context.Context, in *testRunner.StartRun, opts ...grpc.CallOption) (*WorkflowOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowOutput)
	err := c.cc.Invoke(ctx, TransformationService_RunWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformationServiceClient) RunTestWorkflow(ctx context.Context, in *testRunner.StartRunTest, opts ...grpc.CallOption) (*WorkflowOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowOutput)
	err := c.cc.Invoke(ctx, TransformationService_RunTestWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformationServiceServer is the server API for TransformationService service.
// All implementations must embed UnimplementedTransformationServiceServer
// for forward compatibility.
type TransformationServiceServer interface {
	RunWorkflow(context.Context, *testRunner.StartRun) (*WorkflowOutput, error)
	RunTestWorkflow(context.Context, *testRunner.StartRunTest) (*WorkflowOutput, error)
	mustEmbedUnimplementedTransformationServiceServer()
}

// UnimplementedTransformationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransformationServiceServer struct{}

func (UnimplementedTransformationServiceServer) RunWorkflow(context.Context, *testRunner.StartRun) (*WorkflowOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWorkflow not implemented")
}
func (UnimplementedTransformationServiceServer) RunTestWorkflow(context.Context, *testRunner.StartRunTest) (*WorkflowOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTestWorkflow not implemented")
}
func (UnimplementedTransformationServiceServer) mustEmbedUnimplementedTransformationServiceServer() {}
func (UnimplementedTransformationServiceServer) testEmbeddedByValue()                               {}

// UnsafeTransformationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformationServiceServer will
// result in compilation errors.
type UnsafeTransformationServiceServer interface {
	mustEmbedUnimplementedTransformationServiceServer()
}

func RegisterTransformationServiceServer(s grpc.ServiceRegistrar, srv TransformationServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransformationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransformationService_ServiceDesc, srv)
}

func _TransformationService_RunWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(testRunner.StartRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformationServiceServer).RunWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransformationService_RunWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformationServiceServer).RunWorkflow(ctx, req.(*testRunner.StartRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransformationService_RunTestWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(testRunner.StartRunTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformationServiceServer).RunTestWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransformationService_RunTestWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformationServiceServer).RunTestWorkflow(ctx, req.(*testRunner.StartRunTest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransformationService_ServiceDesc is the grpc.ServiceDesc for TransformationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransformationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transformation.TransformationService",
	HandlerType: (*TransformationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunWorkflow",
			Handler:    _TransformationService_RunWorkflow_Handler,
		},
		{
			MethodName: "RunTestWorkflow",
			Handler:    _TransformationService_RunTestWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transformation/transformation.proto",
}
